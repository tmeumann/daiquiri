/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const DQ_EEMAXSIZE: u32 = 2048;
pub const DQ_MAXCHAN: u32 = 64;
pub const DQ_CHANMASK: u32 = 63;
pub const DQ_ONEVOLTINNV: u32 = 1000000000;
pub const DQ_MAXDEVN: u32 = 32;
pub const DQ_MASKDEVN: u32 = 31;
pub const DQ_MAXDEVPHYS: u32 = 16;
pub const DQ_MAXSS: u32 = 8;
pub const DQ_MASKSS: u32 = 7;
pub const DQ_SS0IN: u32 = 0;
pub const DQ_SS0OUT: u32 = 1;
pub const DQ_SS1IN: u32 = 2;
pub const DQ_SS1OUT: u32 = 3;
pub const DQ_SS2IN: u32 = 4;
pub const DQ_SS2OUT: u32 = 5;
pub const DQ_SS3IN: u32 = 6;
pub const DQ_SS3OUT: u32 = 7;
pub const DQ_DIR_MASK: u32 = 1;
pub const DQ_ENABLE: u32 = 1;
pub const DQ_DISABLE: u32 = 0;
pub const DQ_LN_DATASZ8: u32 = 1;
pub const DQ_LN_DATASZ16: u32 = 2;
pub const DQ_LN_DATASZ24: u32 = 3;
pub const DQ_LN_DATASZ32: u32 = 4;
pub const DQ_IOMODE_NAMEDPRM: u32 = 32;
pub const DQ_IOMODE_MODEMASK: u32 = 63;
pub const DQ_IOMODE_STORE: u32 = 128;
pub const DQ_IOMODE_GETPRM: u32 = 64;
pub const DQ_IOMODE_INIT: u32 = 1;
pub const DQ_IOMODE_CFG: u32 = 2;
pub const DQ_IOMODE_OPS: u32 = 4;
pub const DQ_IOMODE_SD: u32 = 8;
pub const DQ_IOMODE_MASK: u32 = 16383;
pub const DQ_IOMODE_SLEEP: u32 = 3;
pub const DQ_IOMODE_PWRDN: u32 = 9;
pub const DQ_IOMODE_PWRUP: u32 = 10;
pub const DQ_IOMODE_NAMES: u32 = 11;
pub const DQ_IOMODE_EECMNDEVS: u32 = 12;
pub const DQ_IOMODE_EEFLAGS: u32 = 13;
pub const DQ_IOMODE_WHEEPROM: u32 = 14;
pub const DQ_IOM_ACCESS_GETPRM: u32 = 64;
pub const DQ_IOM_ACCESS_MODEMASK: u32 = 63;
pub const DQ_IOM_ACCESS_INIT: u32 = 1;
pub const DQ_IOM_ACCESS_CALIBR: u32 = 2;
pub const DQ_IOM_ACCESS_OPERS: u32 = 4;
pub const DQ_IOM_ACCESS_SHUTDOWN: u32 = 8;
pub const DQ_IOM_ACCESS_NAMEDPRM: u32 = 32;
pub const DQ_IOM_ACCESS_NAMES: u32 = 11;
pub const DQ_IOM_ACCESS_EECMNDEVS: u32 = 12;
pub const DQ_IOM_ACCESS_EEFLAGS: u32 = 13;
pub const DQ_IOPRM_INIT: u32 = 1;
pub const DQ_IOPRM_CFG: u32 = 2;
pub const DQ_IOPRM_OPS: u32 = 4;
pub const DQ_IOPRM_SD: u32 = 8;
pub const DQ_IOPRM_SLEEP: u32 = 16;
pub const DQ_IOPRM_PWRDN: u32 = 32;
pub const DQ_IOPRM_PWRUP: u32 = 64;
pub const DQ_IOPRM_NAMES: u32 = 128;
pub const DQ_IOPRM_EECMNDEVS: u32 = 2048;
pub const DQ_IOPRM_EEFLAGS: u32 = 8192;
pub const DQ_IOPRM_NBUFS: u32 = 256;
pub const DQ_IOPRM_CLPERINT: u32 = 512;
pub const DQ_IOPRM_RESERVED0: u32 = 768;
pub const DQ_IOPRM_ADDLDELAY: u32 = 1024;
pub const DQ_IOPRM_RQID: u32 = 4096;
pub const DQ_IOPRM_MIDPOS0: u32 = 4352;
pub const DQ_WD_CLEAR_DISABLED: u32 = 0;
pub const DQ_WD_CLEAR_ON_CONSOLE: u32 = 1;
pub const DQ_WD_CLEAR_ON_RECEIVE: u32 = 2;
pub const DQ_WD_CLEAR_ON_TRANSMIT: u32 = 4;
pub const DQ_WD_CLEAR_ON_OSTASK: u32 = 8;
pub const DQ_WD_GOTO_SHUTDOWN: u32 = 8192;
pub const DQ_WD_CLEAR_RESET: u32 = 16384;
pub const DQ_WD_CLEAR_STATUS: u32 = 32768;
pub const DQ_FIFO_NBUFS_MIN: u32 = 64;
pub const DQ_FIFO_NBUFS: u32 = 1024;
pub const DQ_FIFO_NBUFS_SLOW: u32 = 512;
pub const DQ_FIFO_NBUFS_MED: u32 = 1024;
pub const DQ_FIFO_NBUFS_FAST: u32 = 2048;
pub const DQ_FIFO_NBUFS_MSG: u32 = 1024;
pub const DQ_FIFO_REDUCE_SLOW: u32 = 64;
pub const DQ_FIFO_REDUCE_MED: u32 = 128;
pub const DQ_FIFO_REDUCE_FAST: u32 = 64;
pub const DQ_FIFO_REDUCE_MSG: u32 = 128;
pub const DQ_FIFO_CLPERINT: u32 = 0;
pub const DQ_FIFO_BUF_SEC: u32 = 5;
pub const DQ_FIFO_BUF_MAX: u32 = 4096;
pub const DQ_FIFO_ALLOC_AT_ONCE: u32 = 1;
pub const DQ_MAX_ETH_SIZE_100: u32 = 1518;
pub const DQ_MAX_UDP_SIZE_100: u32 = 1472;
pub const DQ_MAX_ETH_SIZE: u32 = 576;
pub const DQ_MAX_INFO_SIZE: u32 = 4096;
pub const DQ_MAX_INFO_ITEMS: u32 = 300;
pub const DQ_DQRDCFG_SIZE: u32 = 2048;
pub const DQ_FIFO_GET_DATA: u32 = 16;
pub const DQ_FIFO_GET_DATA1: u32 = 18;
pub const DQ_FIFO_GET_DATA2: u32 = 20;
pub const DQ_FIFO_GET_DATA3: u32 = 22;
pub const DQ_FIFO_GET_CAL: u32 = 32;
pub const DQ_FIFO_GET_CUSTOM: u32 = 48;
pub const DQ_FIFO_SET_DATA: u32 = 16;
pub const DQ_FIFO_PUT_COEFF: u32 = 32;
pub const DQ_FIFO_PUT_CUSTOM: u32 = 48;
pub const DQTID_PUSH_DATA: u32 = 2147483649;
pub const DQIOCTL_CVTCHNL: u32 = 1;
pub const DQIOCTL_SETPARAM: u32 = 2;
pub const DQIOCTL_GETPARAM: u32 = 3;
pub const DQIOCTL_SETFILTER: u32 = 4;
pub const DQIOCTL_SIGROUTING: u32 = 5;
pub const DQIOCTL_CVTCHNL_A: u32 = 5121;
pub const DQIOCTL_EXT_DEVICE: u32 = 9729;
pub const DQIOCTL_RTCD_MASK: u32 = 4294901760;
pub const DQIOCTL_RTCD_CMDMASK: u32 = 65535;
pub const DQIOCTL_RTCD_NOTREADY: u32 = 2147483648;
pub const DQ_SETPARAM_SETPLL: u32 = 128;
pub const DQ_SETPARAM_SET_SW_TIMEOUT: u32 = 512;
pub const DQ_SETPARAM_SET_GROUP_DELAY: u32 = 513;
pub const DQ_SETPARAM_SET_SCAN_SKIP: u32 = 514;
pub const DQ_ADV_GRP_DELAY_SET: u32 = 17;
pub const DQ_GETPARAM_TRIG_TS: u32 = 129;
pub const DQ_GETPARAM_GET_GROUP_DELAY: u32 = 513;
pub const DQ_GETPARAM_GET_SCAN_SKIP: u32 = 514;
pub const DQ_ADV_GRP_DELAY_GET: u32 = 16;
pub const DQIOCTL_DLTRIGGER: u32 = 17;
pub const DQIOCTL_DLCFG: u32 = 18;
pub const DQIOCTL_SD_CTRL: u32 = 19;
pub const DQIOCTL_PROGRESS: u32 = 20;
pub const DQIOCTL_GET_DATA: u32 = 21;
pub const DQIOCTL_DL_CTRL: u32 = 22;
pub const DQIOCTL_DL_GETMAXRATE: u32 = 23;
pub const DQIOCTL_DL_TESTMAXRATE: u32 = 24;
pub const DQIOCTL_DL_GETBUFFERSIZE: u32 = 25;
pub const DQIOCTL_DLOGGER: u32 = 16;
pub const DQIOCTL_DLOGGER_DIO_BIT_0: u32 = 4608;
pub const DQIOCTL_DLOGGER_DIO_BIT_1: u32 = 4609;
pub const DQIOCTL_DLOGGER_DATA_SZ: u32 = 4610;
pub const DQIOCTL_DIO_READ_LAST_WRITE: u32 = 4864;
pub const DQIOCTL_RLW_DIO_GET1: u32 = 1;
pub const DQIOCTL_RLW_DIO_GET2: u32 = 2;
pub const DQIOCTL_DIO_RD_W_TIMESTAMP: u32 = 4865;
pub const DQIOCTL_DIO_RST_TIMESTAMP: u32 = 2147483648;
pub const DQIOCTL_HW_CPUTEST: u32 = 64;
pub const DQIOCTL_HW_CPUTEST_START: u32 = 65;
pub const DQIOCTL_HW_CPUTEST_ABORT: u32 = 66;
pub const DQIOCTL_HW_CPUTEST_GET_STATUS: u32 = 67;
pub const DQIOCTL_HW_CPUTEST_GET_RESULT: u32 = 68;
pub const DQIOCTL_HW_NWTEST: u32 = 69;
pub const DQIOCTL_HW_IOMTEST: u32 = 128;
pub const DQIOCTL_UBOOT: u32 = 32;
pub const DQIOCTL_UBOOT_GETENV: u32 = 33;
pub const DQIOCTL_UBOOT_SETENV: u32 = 34;
pub const DQIOCTL_UBOOT_SAVEENV: u32 = 35;
pub const DQ_LN_INTSRC: u32 = 1;
pub const DQ_SETPASS_SUPASS: u32 = 1;
pub const DQ_SETPASS_USRPASS: u32 = 2;
pub const DQ_SETPASS_SETSU: u32 = 4;
pub const DQ_SETPASS_SETUSR: u32 = 8;
pub const DQ_SETPASS_CLEAR: u32 = 16;
pub const DQ_SETPASS_EN_DQCMD0: u32 = 32;
pub const DQ_SETPASS_EN_DQCMD1: u32 = 64;
pub const DQSETLOCK_LOCK: u32 = 0;
pub const DQSETLOCK_UNLOCK: u32 = 1;
pub const DQSETLOCK_CHECK: u32 = 2;
pub const DQSETLOCK_CHECKDIAG: u32 = 3;
pub const DQSETLOCK_DIAG: u32 = 4;
pub const DQ_LN_NO_TIMESTAMP_RESET: u32 = 2097152;
pub const DQ_LN_VMAPPED: u32 = 1048576;
pub const DQ_LN_BURST: u32 = 524288;
pub const DQ_LN_RAW32: u32 = 262144;
pub const DQ_LN_ALT_RES: u32 = 262144;
pub const DQ_FIFO_MODESCAN: u32 = 0;
pub const DQ_FIFO_MODEFIFO: u32 = 131072;
pub const DQ_FIFO_MODECONT: u32 = 196608;
pub const DQ_LN_MAPPED: u32 = 32768;
pub const DQ_LN_STREAMING: u32 = 16384;
pub const DQ_LN_RECYCLE: u32 = 8192;
pub const DQ_LN_GETRAW: u32 = 4096;
pub const DQ_LN_TMREN: u32 = 2048;
pub const DQ_LN_IRQEN: u32 = 1024;
pub const DQ_LN_PTRIGEDGE1: u32 = 512;
pub const DQ_LN_PTRIGEDGE0: u32 = 256;
pub const DQ_LN_STRIGEDGE1: u32 = 128;
pub const DQ_LN_STRIGEDGE0: u32 = 64;
pub const DQ_LN_CVCKSRC1: u32 = 32;
pub const DQ_LN_CVCKSRC0: u32 = 16;
pub const DQ_LN_CLCKSRC1: u32 = 8;
pub const DQ_LN_CLCKSRC0: u32 = 4;
pub const DQ_LN_ACTIVE: u32 = 2;
pub const DQ_LN_ENABLED: u32 = 1;
pub const DQ_DIR_INPUT: u32 = 0;
pub const DQ_DIR_OUTPUT: u32 = 1;
pub const DQ_DMAP_RESET_TRL: u32 = 2147483648;
pub const DQ_DMAP_CHECK_LOCK: u32 = 1073741824;
pub const DQ_VMAP_FIFO_STATUS: u32 = 1;
pub const DQ_VMAP_SPEC_CHANNEL: u32 = 2;
pub const DQ_VMAP_FIFO_RQSIZE: u32 = 4;
pub const DQ_VMAP_FIFO_CLR_ON_OVF: u32 = 8;
pub const DQ_DMAP_LASTID_IN: u32 = 4080;
pub const DQ_DMAP_LASTID_OUT: u32 = 4081;
pub const DQ_DMAP_IDMASK: u32 = 4095;
pub const DQ_DMAP_MODEMASK: u32 = 61440;
pub const DQ_DMAP_DMAP: u32 = 0;
pub const DQ_DMAP_VMAP: u32 = 4096;
pub const DQ_DMAP_STICKY_MAP: u32 = 8192;
pub const DQ_DMAP_SYNC_DMAP_CONV: u32 = 16384;
pub const DQ_VMAP_CLEAR_FIFO_RESTART: u32 = 1;
pub const DQ_VMAP_FIFO_RESTARTED_SZ: u32 = 4294901760;
pub const DQ_LNCL_LAST: u32 = 0;
pub const DQ_LNCL_NEXT: u32 = 2147483648;
pub const DQ_LNCL_INOUT: u32 = 1073741824;
pub const DQ_LNCL_SS1: u32 = 536870912;
pub const DQ_LNCL_SS0: u32 = 268435456;
pub const DQ_LNCL_IRQ: u32 = 134217728;
pub const DQ_LNCL_NOWAIT: u32 = 67108864;
pub const DQ_LNCL_SKIP: u32 = 33554432;
pub const DQ_LNCL_CLK: u32 = 16777216;
pub const DQ_LNCL_CTR: u32 = 8388608;
pub const DQ_LNCL_WRITE: u32 = 4194304;
pub const DQ_LNCL_UPDALL: u32 = 2097152;
pub const DQ_LNCL_TSRQ: u32 = 1048576;
pub const DQ_LNCL_SLOW: u32 = 524288;
pub const DQ_LNCL_DIO: u32 = 262144;
pub const DQ_LNCL_RSVD1: u32 = 131072;
pub const DQ_LNCL_RSVD0: u32 = 65536;
pub const DQ_LNCL_DIFF: u32 = 32768;
pub const DQ_LNCL_TIMESTAMP: u32 = 255;
pub const DQ_LNCL_CHANMASK: u32 = 255;
pub const DQ_LNCL_READSTATUS: u32 = 254;
pub const DQ_LNCL_EXPLSTATUS: u32 = 253;
pub const DQ_LN_CLKID_DUTY1: u32 = 128;
pub const DQ_LN_CLKID_DUTY0: u32 = 64;
pub const DQ_LN_CLKID_TMR1: u32 = 32;
pub const DQ_LN_CLKID_TMR0: u32 = 16;
pub const DQ_LN_CLKID_CVIN: u32 = 8;
pub const DQ_LN_CLKID_CVOUT: u32 = 4;
pub const DQ_LN_CLKID_CLIN: u32 = 2;
pub const DQ_LN_CLKID_CLOUT: u32 = 1;
pub const DQ_LN_CALGAIN: u32 = 2;
pub const DQ_LN_CALOFFS: u32 = 4;
pub const DQ_LN_01us_TIMESTAMP: u32 = 5;
pub const DQ_LN_1us_TIMESTAMP: u32 = 65;
pub const DQ_LN_10us_TIMESTAMP: u32 = 659;
pub const DQ_LN_100us_TIMESTAMP: u32 = 6599;
pub const DQ_LN_1ms_TIMESTAMP: u32 = 65999;
pub const DQ_LN_10ms_TIMESTAMP: u32 = 659999;
pub const DQ_LN_100ms_TIMESTAMP: u32 = 6599999;
pub const DQ_LN_1s_TIMESTAMP: u32 = 65999999;
pub const DQ_LN_MASK_TIMESTAMP: u32 = 134217727;
pub const DQ_FPGAC_PRGEN: u32 = 32768;
pub const DQ_FPGAC_NCFG: u32 = 16384;
pub const DQ_FPGAC_MSEL1: u32 = 8192;
pub const DQ_FPGAC_MSEL0: u32 = 4096;
pub const DQ_FPGAC_DOE1: u32 = 2048;
pub const DQ_FPGAC_DOE0: u32 = 1024;
pub const DQ_FPGAC_DCLR1: u32 = 512;
pub const DQ_FPGAC_DCLR0: u32 = 256;
pub const DQ_FPGAC_ED: u32 = 128;
pub const DQ_FPGAC_ASPGEN: u32 = 64;
pub const DQ_FPGAC_ASDO: u32 = 32;
pub const DQ_FPGAC_NCEO: u32 = 16;
pub const DQ_FPGAC_NCSO: u32 = 8;
pub const DQ_FPGAC_RESERVED2: u32 = 4;
pub const DQ_FPGAC_RESERVED1: u32 = 2;
pub const DQ_FPGAC_RESERVED0: u32 = 1;
pub const DQ_FPGAS_RDY: u32 = 4096;
pub const DQ_FPGAS_NCFG: u32 = 2048;
pub const DQ_FPGAS_NSTAT: u32 = 1024;
pub const DQ_FPGAS_CONFDONE: u32 = 512;
pub const DQ_FPGAS_DCLK: u32 = 256;
pub const DQ_FPGAS_DATA0: u32 = 128;
pub const DQ_FPGAS_MSEL1: u32 = 64;
pub const DQ_FPGAS_MSEL0: u32 = 32;
pub const DQ_FPGAS_ASDO: u32 = 16;
pub const DQ_FPGAS_NCEO: u32 = 8;
pub const DQ_FPGAS_NCSO: u32 = 4;
pub const DQ_FPGAS_DOE: u32 = 2;
pub const DQ_FPGAS_DCLR: u32 = 1;
pub const DQ_TRIGGER_SET_OR: u32 = 32;
pub const DQ_TRIGGER_SET: u32 = 16;
pub const DQ_TRIGGER_ONCE: u32 = 8;
pub const DQ_TRIGGER_TS_CL: u32 = 7;
pub const DQ_TRIGGER_TS_CV: u32 = 6;
pub const DQ_TRIGGER_TS_NO: u32 = 5;
pub const DQ_TRIGGER_RESET: u32 = 4;
pub const DQ_TRIGGER_STOP: u32 = 2;
pub const DQ_TRIGGER_START: u32 = 1;
pub const DQ_EXT_CLKIN: u32 = 48;
pub const DQ_EXT_TRIGIN: u32 = 49;
pub const DQ_EXT_BURST: u32 = 50;
pub const DQ_EXT_CLOCK: u32 = 51;
pub const DQ_EXT_TMR0: u32 = 51;
pub const DQ_EXT_EXT0: u32 = 52;
pub const DQ_EXT_EXT1: u32 = 53;
pub const DQ_EXT_CLKIN_J3_10: u32 = 52;
pub const DQ_EXT_TRIGIN_J3_6: u32 = 53;
pub const DQ_EXT_INTER0: u32 = 54;
pub const DQ_EXT_SYNC0: u32 = 16;
pub const DQ_EXT_SYNC1: u32 = 17;
pub const DQ_EXT_SYNC2: u32 = 18;
pub const DQ_EXT_SYNC3: u32 = 19;
pub const DQ_EXT_RELEASE: u32 = 0;
pub const DQ_EXT_IMMEDIATE: u32 = 128;
pub const DQ_EXT_GLOBAL_TRIG: u32 = 32;
pub const DQ_EXT_STOP_TRIG: u32 = 33;
pub const DQ_EXT_CLIN: u32 = 34;
pub const DQ_EXT_CLOUT: u32 = 35;
pub const DQ_EXT_CVIN: u32 = 36;
pub const DQ_EXT_CVOUT: u32 = 37;
pub const DQ_EXT_GPIO_LOGIC0: u32 = 38;
pub const DQ_EXT_GPIO_LOGIC1: u32 = 39;
pub const DQ_EXT_INT0: u32 = 40;
pub const DQ_EXT_INT1: u32 = 41;
pub const DQ_EXT_CLKOUT_J3_8: u32 = 40;
pub const DQ_EXT_TRIGOUT_J3_4: u32 = 41;
pub const DQ_EXT_DIO0: u32 = 42;
pub const DQ_EXT_DIO1: u32 = 43;
pub const DQ_EXT_ADCCVT: u32 = 44;
pub const DQ_EXT_TSTD: u32 = 45;
pub const DQ_EXT_PUSH_BUTTON: u32 = 46;
pub const DQ_INTERNAL_ISO_INT: u32 = 46;
pub const DQ_EXT_ADCBS: u32 = 47;
pub const DQ_EDGE_RISING: u32 = 0;
pub const DQ_EDGE_FALLING: u32 = 1;
pub const DQ_EXT_DIO_DEFAULT: u32 = 0;
pub const DQ_EXT_DIO_INPUT: u32 = 1;
pub const DQ_EXT_DIO_OUTPUT: u32 = 2;
pub const DQ_EXT_DIO_INVERTED: u32 = 16;
pub const DQ_LN_MAX_SYNCX: u32 = 4;
pub const DQ_LN_MAX_DIOX: u32 = 4;
pub const DQ_LN_MAX_CLOCKS: u32 = 4;
pub const DQ_LN_MAX_TRIGS: u32 = 4;
pub const DQ_EXT_SIG_CMD_DEF: u32 = 0;
pub const DQ_EXT_SIG_CMD_DIO_RW: u32 = 1;
pub const DQ_EXT_SIG_CMD_DIO_R: u32 = 2;
pub const DQ_EXT_SIG_CMD_SET_SYS: u32 = 32;
pub const DQ_ACCESS_DIO_DIO0_ENB: u32 = 1;
pub const DQ_ACCESS_DIO_DIO1_ENB: u32 = 2;
pub const DQ_ACCESS_DIO_DIO2_ENB: u32 = 4;
pub const DQ_ACCESS_DIO_DIO3_ENB: u32 = 8;
pub const DQ_ACCESS_DIO_DIO0_OUT: u32 = 16;
pub const DQ_ACCESS_DIO_DIO0_IN: u32 = 0;
pub const DQ_ACCESS_DIO_DIO1_OUT: u32 = 32;
pub const DQ_ACCESS_DIO_DIO1_IN: u32 = 0;
pub const DQ_ACCESS_DIO_DIO2_OUT: u32 = 64;
pub const DQ_ACCESS_DIO_DIO2_IN: u32 = 0;
pub const DQ_ACCESS_DIO_DIO3_OUT: u32 = 128;
pub const DQ_ACCESS_DIO_DIO3_IN: u32 = 0;
pub const DQ_EXT_CLIN_OFS: u32 = 0;
pub const DQ_EXT_CLOUT_OFS: u32 = 1;
pub const DQ_EXT_CVIN_OFS: u32 = 2;
pub const DQ_EXT_CVOUT_OFS: u32 = 3;
pub const DQ_EXT_BOTH_CV_CL_FLAG: u32 = 16;
pub const DQ_EXT_START_TRIG_OFS: u32 = 0;
pub const DQ_EXT_STOP_TRIG_OFS: u32 = 1;
pub const DQ_EXT_SYNC0_OFS: u32 = 0;
pub const DQ_EXT_SYNC1_OFS: u32 = 1;
pub const DQ_EXT_SYNC2_OFS: u32 = 2;
pub const DQ_EXT_SYNC3_OFS: u32 = 3;
pub const DQ_EXT_DIO0_OFFS: u32 = 0;
pub const DQ_EXT_DIO1_OFFS: u32 = 1;
pub const DQ_EXT_DIO2_OFFS: u32 = 2;
pub const DQ_EXT_DIO3_OFFS: u32 = 3;
pub const DQ_PWR_DEVN: u32 = 12;
pub const DQ_SYNC_DEVN: u32 = 13;
pub const DQ_CPU_DEVN: u32 = 14;
pub const DQ_BROADCAST_DEVN: u32 = 15;
pub const DQ_SYNC_NOT_CONN: u32 = 0;
pub const DQ_SYNC_INPUT: u32 = 1;
pub const DQ_SYNC_DRIVER: u32 = 2;
pub const DQ_SYNC_EXTERNAL: u32 = 4;
pub const DQ_SYNC_0: u32 = 8;
pub const DQ_SYNC_1: u32 = 16;
pub const DQ_SYNC_BUTTON: u32 = 32;
pub const DQ_SYNC_CLOCK: u32 = 0;
pub const DQ_SYNC_TRIGGER: u32 = 1;
pub const DQ_SYNC_PPC: u32 = 0;
pub const DQ_SYNC_PLL: u32 = 1;
pub const DQ_SYNC_PPC2: u32 = 2;
pub const DQ_SYNC_PLL_IMMEDIATE: u32 = 3;
pub const DQ_C3PLL_MIN_N: u32 = 2;
pub const DQ_C3PLL_MAX_N: u32 = 510;
pub const DQ_C3PLL_MIN_M: u32 = 2;
pub const DQ_C3PLL_MAX_M: u32 = 510;
pub const DQ_C3PLL_MIN_VCO: f64 = 600000000.0;
pub const DQ_C3PLL_MAX_VCO: f64 = 1300000000.0;
pub const DQ_C3PLL_MAX_VCO_60X: f64 = 1220000000.0;
pub const DQ_C3PLL_BASE: u32 = 66000000;
pub const DQ_DEVNAME_SIZE: u32 = 40;
pub const DQ_CLSZ: u32 = 64;
pub const DQ_CFG_RECORD_SIZE: u32 = 8192;
pub const DQ_MAX_FRAGMENTS: u32 = 8;
pub const DQ_MAX_PAYLOAD_FRAG: u32 = 11776;
pub const DQL_SYNC_LINES: u32 = 4;
pub const DQL_TMRCFG_TSTS3: u32 = 2147483648;
pub const DQL_TMRCFG_TSTS0: u32 = 268435456;
pub const DQL_TMRCFG_TMR1S3: u32 = 134217728;
pub const DQL_TMRCFG_TMR1S0: u32 = 16777216;
pub const DQL_TMRCFG_TMR0S3: u32 = 8388608;
pub const DQL_TMRCFG_TMR0S0: u32 = 1048576;
pub const DQL_TMRCFG_TSTTRM1: u32 = 524288;
pub const DQL_TMRCFG_TSTTRM0: u32 = 262144;
pub const DQL_TMRCFG_TSTTRM_NO: u32 = 0;
pub const DQL_TMRCFG_TSTTRM_CLICV: u32 = 1;
pub const DQL_TMRCFG_TSTTRM_CLICL: u32 = 2;
pub const DQL_TMRCFG_TRRDIS1: u32 = 131072;
pub const DQL_TMRCFG_TRRDIS0: u32 = 65536;
pub const DQL_TMRCFG_TSTRSTM1: u32 = 32768;
pub const DQL_TMRCFG_TSTRSTM0: u32 = 16384;
pub const DQL_TMRCFG_TSTRSTM_NO: u32 = 0;
pub const DQL_TMRCFG_TSTRSTM_TRG: u32 = 1;
pub const DQL_TMRCFG_TSTRSTM_PPS: u32 = 2;
pub const DQL_TMRCFG_TRCLK1: u32 = 8192;
pub const DQL_TMRCFG_TRCLK0: u32 = 4096;
pub const DQL_TMRCFG_TRCLK_NO: u32 = 0;
pub const DQL_TMRCFG_TRCLK_TMR0: u32 = 1;
pub const DQL_TMRCFG_TRCLK_TMR1: u32 = 2;
pub const DQL_TMRCFG_TSTS_66M: u32 = 0;
pub const DQL_TMRCFG_TSTS_TMR0: u32 = 1;
pub const DQL_TMRCFG_TSTS_TMR1: u32 = 3;
pub const DQL_TMRCFG_TSTS_IEXT0: u32 = 4;
pub const DQL_TMRCFG_TSTS_IEXT1: u32 = 5;
pub const DQL_TMRCFG_TSTS_IINT0: u32 = 8;
pub const DQL_TMRCFG_TSTS_IINT1: u32 = 9;
pub const DQL_TMRCFG_TSTS_SYNC0: u32 = 12;
pub const DQL_TMRCFG_TSTS_SYNC1: u32 = 13;
pub const DQL_TMRCFG_TSTS_SYNC2: u32 = 14;
pub const DQL_TMRCFG_TSTS_SYNC3: u32 = 15;
pub const DQL_TMRCFG_TMR1_ENABLE: u32 = 128;
pub const DQL_TMRCFG_TMR1_INV: u32 = 64;
pub const DQL_TMRCFG_TMR1_MODE1: u32 = 32;
pub const DQL_TMRCFG_TMR1_MODE0: u32 = 16;
pub const DQL_TMRCFG_TMR0_ENABLE: u32 = 8;
pub const DQL_TMRCFG_TMR0_INV: u32 = 4;
pub const DQL_TMRCFG_TMR0_MODE1: u32 = 2;
pub const DQL_TMRCFG_TMR0_MODE0: u32 = 1;
pub const DQL_TMRCFG_MODE_CNT: u32 = 0;
pub const DQL_TMRCFG_MODE_PWM: u32 = 1;
pub const DQL_TMRCFG_TS_SRC_MASK: u32 = 4026531840;
pub const DQL_TMRCFG_TMR1_CLK_MASK: u32 = 251658240;
pub const DQL_TMRCFG_TMR0_CLK_MASK: u32 = 15728640;
pub const DQL_TMRCFG_TS_TRIG_MASK: u32 = 786432;
pub const DQ_LN_CLKID_SRC_TMR0_66M: u32 = 80;
pub const DQ_LN_CLKID_SRC_TMR0_TMR1: u32 = 83;
pub const DQ_LN_CLKID_SRC_TMR0_IEXT0: u32 = 84;
pub const DQ_LN_CLKID_SRC_TMR0_IEXT1: u32 = 85;
pub const DQ_LN_CLKID_SRC_TMR0_IINT0: u32 = 88;
pub const DQ_LN_CLKID_SRC_TMR0_IINT1: u32 = 89;
pub const DQ_LN_CLKID_SRC_TMR0_SYNC0: u32 = 92;
pub const DQ_LN_CLKID_SRC_TMR0_SYNC1: u32 = 93;
pub const DQ_LN_CLKID_SRC_TMR0_SYNC2: u32 = 94;
pub const DQ_LN_CLKID_SRC_TMR0_SYNC3: u32 = 95;
pub const DQ_LN_CLKID_SRC_TMR1_66M: u32 = 96;
pub const DQ_LN_CLKID_SRC_TMR1_TMR0: u32 = 97;
pub const DQ_LN_CLKID_SRC_TMR1_IEXT0: u32 = 100;
pub const DQ_LN_CLKID_SRC_TMR1_IEXT1: u32 = 101;
pub const DQ_LN_CLKID_SRC_TMR1_IINT0: u32 = 104;
pub const DQ_LN_CLKID_SRC_TMR1_IINT1: u32 = 105;
pub const DQ_LN_CLKID_SRC_TMR1_SYNC0: u32 = 108;
pub const DQ_LN_CLKID_SRC_TMR1_SYNC1: u32 = 109;
pub const DQ_LN_CLKID_SRC_TMR1_SYNC2: u32 = 110;
pub const DQ_LN_CLKID_SRC_TMR1_SYNC3: u32 = 111;
pub const DQ_DQPKT_OFFS: u32 = 42;
pub const DQ_READCOMM: u32 = 1;
pub const DQ_WRITECOMM: u32 = 2;
pub const DQ_READCOMM2: u32 = 3;
pub const DQ_WRITECOMM2: u32 = 4;
pub const DQ_WRITECOMMSRV: u32 = 5;
pub const DQ_WRITECOMM2SRV: u32 = 6;
pub const DQWRRD32_DONOT_INC: u32 = 2;
pub const DQWRRD32_READ_1ST: u32 = 1;
pub const DQFIFOHSZ: u32 = 4;
pub const DQL_CPU_PLL_MAX: u32 = 2;
pub const DQ_SYNC_8347: u32 = 1;
pub const DQ_SYNC_8347S: u32 = 2;
pub const DQ_SYNC_5200: u32 = 3;
pub const DQ_SYNC_5200S: u32 = 4;
pub const DQ_SYNC_RESERVED: u32 = 5;
pub const DQ_SYNC_IRIG650: u32 = 6;
pub const DQ_SYNC_IMX6SX: u32 = 7;
pub const DQ_SYNCCLK_SYNCIN0: u32 = 1;
pub const DQ_SYNCCLK_SYNCIN1: u32 = 2;
pub const DQ_SYNCCLK_SYNC0: u32 = 1;
pub const DQ_SYNCCLK_SYNC1: u32 = 2;
pub const DQ_SYNCCLK_SYNC2: u32 = 3;
pub const DQ_SYNCCLK_SYNC3: u32 = 4;
pub const DQ_SYNCCLK_SYNC: u32 = 1;
pub const DQ_SYNCCLK_NTP: u32 = 2;
pub const DQ_SYNCCLK_SWPTP: u32 = 3;
pub const DQ_SYNCCLK_1588: u32 = 4;
pub const DQ_SYNCCLK5_SYNCIN0: u32 = 1;
pub const DQ_SYNCCLK5_NTP: u32 = 2;
pub const DQ_SYNCCLK5_SWPTP: u32 = 3;
pub const DQ_SYNCCLK5_1588: u32 = 4;
pub const DQ_SYNCCLK_ETH0: u32 = 0;
pub const DQ_SYNCCLK_ETH1: u32 = 32768;
pub const DQ_SYNCCLK_MODE_MSK: u32 = 15;
pub const DQ_USE_SYNC0: u32 = 256;
pub const DQ_USE_SYNC1: u32 = 512;
pub const DQ_USE_SYNC2: u32 = 768;
pub const DQ_USE_SYNC3: u32 = 1024;
pub const DQ_USE_SYNC_MASK: u32 = 3840;
pub const DQ_SYNCSRV_1PPS: u32 = 1;
pub const DQ_SYNCSRV_NTP: u32 = 2;
pub const DQ_SYNCSRV_SWPTP: u32 = 3;
pub const DQ_SYNCSRV_SYNCOUT0: u32 = 1;
pub const DQ_SYNCSRV_SYNCOUT1: u32 = 2;
pub const DQ_SYNCSRV_1588: u32 = 4;
pub const DQ_SYNCSRV_ETH0: u32 = 0;
pub const DQ_SYNCSRV_ETH1: u32 = 32768;
pub const DQ_TRIGSRV_START_PPS: u32 = 1;
pub const DQ_TRIGSRV_GLOB_START: u32 = 2;
pub const DQ_TRIGSRV_GLOB_STOP: u32 = 4;
pub const DQ_CLOCKSRC_UNUSED: u32 = 0;
pub const DQ_CLOCKSRC_PLL0: u32 = 1;
pub const DQ_CLOCKSRC_ADPLL: u32 = 2;
pub const DQ_CLOCKSRC_SYNCIN0: u32 = 3;
pub const DQ_CLOCKSRC_SYNCIN1: u32 = 4;
pub const DQ_CLOCKSRC_EM0: u32 = 5;
pub const DQ_CLOCKSRC_EM1: u32 = 6;
pub const DQ_CLOCKSRC_EM2: u32 = 7;
pub const DQ_CLOCKSRC_PLL0TMR0: u32 = 8;
pub const DQ_CLOCKSRC_PLL0TMR1: u32 = 9;
pub const DQ_CLOCKSRC_MASK: u32 = 255;
pub const DQ_CLOCKSRC5_PLL0: u32 = 1;
pub const DQ_CLOCKSRC5_SYNCIN0: u32 = 3;
pub const DQ_TRIGSTART_SYNCIN0: u32 = 1;
pub const DQ_TRIGSTART_SYNCIN1: u32 = 2;
pub const DQ_TRIGSTART_SYNC: u32 = 1;
pub const DQ_TRIGSTART_NPPS: u32 = 2;
pub const DQ_TRIGSTART_RETRIG: u32 = 3;
pub const DQ_TRIGSTART5_SYNCIN0: u32 = 1;
pub const DQ_TRIGSTART5_NEXTPPS: u32 = 2;
pub const DQ_TRIGSTART5_RETRIG: u32 = 3;
pub const DQ_TRIGSTART_DEFAULT: u32 = 0;
pub const DQ_TRIGSTOP_SYNC: u32 = 1;
pub const DQ_TRIGSTOP_DURATION: u32 = 2;
pub const DQ_TRIGSTOP_NCLOCKS: u32 = 3;
pub const DQ_TRIGSTOP650_TIME: u32 = 4;
pub const DQ_TRIGSTOP_DEFAULT: u32 = 0;
pub const DQ_nPPSDEST_SYNCOUT0: u32 = 1;
pub const DQ_nPPSDEST_SYNCOUT1: u32 = 2;
pub const DQ_TRGDEST_SYNCOUT0: u32 = 1;
pub const DQ_TRGDEST_SYNCOUT1: u32 = 2;
pub const DQ_CLKDEST_SYNCOUT0: u32 = 1;
pub const DQ_CLKDEST_SYNCOUT1: u32 = 2;
pub const DQ_PTP_USE_STATIC_MASTER: u32 = 1;
pub const DQ_PTP_PORT_STATE_INIT: u32 = 1;
pub const DQ_PTP_PORT_STATE_FAULTY: u32 = 2;
pub const DQ_PTP_PORT_STATE_DISABLED: u32 = 3;
pub const DQ_PTP_PORT_STATE_LISTENING: u32 = 4;
pub const DQ_PTP_PORT_STATE_PRE_MASTER: u32 = 5;
pub const DQ_PTP_PORT_STATE_MASTER: u32 = 6;
pub const DQ_PTP_PORT_STATE_PASSIVE: u32 = 7;
pub const DQ_PTP_PORT_STATE_UNCALIBRATED: u32 = 8;
pub const DQ_PTP_PORT_STATE_SLAVE: u32 = 9;
pub const DQ_SYNCCLLK_SYNC0: u32 = 1;
pub const DQ_SYNCCLLK_SYNC1: u32 = 2;
pub const DQ_SYNCCLLK_SYNC2: u32 = 3;
pub const DQ_SYNCCLLK_SYNC3: u32 = 4;
pub const DQ_SYNCCLLK_SYNCIN0: u32 = 5;
pub const DQ_SYNCCLLK_SYNCIN1: u32 = 6;
pub const DQ_SYNCCLLK_DEFAULT: u32 = 0;
pub const DQ_SYNCLCLK_CLOCK_PER_SCAN: u32 = 268435456;
pub const DQ_SYNCLCLK_ISSUE_IMMEDIATE: u32 = 1;
pub const DQ_SYNCTRG_SYNC0: u32 = 1;
pub const DQ_SYNCTRG_SYNC1: u32 = 2;
pub const DQ_SYNCTRG_SYNC2: u32 = 3;
pub const DQ_SYNCTRG_SYNC3: u32 = 4;
pub const DQ_SYNCTRG_SYNCIN0: u32 = 5;
pub const DQ_SYNCTRG_SYNCIN1: u32 = 6;
pub const DQ_SYNCTRG_SOFT: u32 = 7;
pub const DQ_SYNCTRG_DEFAULT: u32 = 0;
pub const DQ_SYNCTST_SYNC0: u32 = 1;
pub const DQ_SYNCTST_SYNC1: u32 = 2;
pub const DQ_SYNCTST_SYNC2: u32 = 3;
pub const DQ_SYNCTST_SYNC3: u32 = 4;
pub const DQ_SYNCTST_SYNCIN0: u32 = 5;
pub const DQ_SYNCTST_SYNCIN1: u32 = 6;
pub const DQ_SYNCTST_DEFAULT: u32 = 0;
pub const DQ_SYNC_UTCTM_OFFSINVLAID: u32 = 1;
pub const DQ_SYNC_UTCTM_ARB_PTPTSCALE: u32 = 2;
pub const DQ_SYNC_UTCTM_TIMEVALID: u32 = 2147483648;
pub const DQ_PPC_FLASH_ADDRESS: u32 = 4290772992;
pub const DQ_PPC_FLASH_SIZE: u32 = 4194304;
pub const DQ_PPC_FLASH_FIRMWARE_OFFSET: u32 = 65536;
pub const DQ_FIRMWARE_ENTRY_ROM: u32 = 4290838528;
pub const DQ_UBOOT_ENTRY_ROM: u32 = 4293918976;
pub const DQ_UBOOT_DATA_SEG: u32 = 4294049792;
pub const DQ_UBOOT_DATA_SEG_SZ: u32 = 131072;
pub const DQ_FLASH_ADDRESS: u32 = 4290772992;
pub const DQ_FLASH_SIZE: u32 = 4194304;
pub const DQ_FLASH_FIRMWARE_OFFSET: u32 = 65536;
pub const DQ_PPC8347_FLASH_ADDRESS_32: u32 = 4261412864;
pub const DQ_PPC8347_FLASH_SIZE_32: u32 = 33554432;
pub const DQ_PPC8347_FLASH_FIRMWARE_OFFSET_32: u32 = 25165824;
pub const DQ_PPC8347_UPUSER_SEC_32: u32 = 192;
pub const DQ_PPC8347_UEIPACKERNEL_SEC_32: u32 = 0;
pub const DQ_PPC8347_UEIPACRAMDISK_SEC_32: u32 = 16;
pub const DQ_PPC8347_FLASH_ADDRESS_128: u32 = 4160749568;
pub const DQ_PPC8347_FLASH_SIZE_128: u32 = 134217728;
pub const DQ_PPC8347_FLASH_FIRMWARE_OFFSET_128: u32 = 125829120;
pub const DQ_PPC8347_UPUSER_SEC_128: u32 = 960;
pub const DQ_PPC8347_UEIPACKERNEL_SEC_128: u32 = 768;
pub const DQ_PPC8347_UEIPACRAMDISK_SEC_128: u32 = 184;
pub const DQ_PPC8347_MAXFWSIZE: u32 = 7340032;
pub const DQ_PPC8347_FLASH_SIZE: u32 = 33554432;
pub const DQ_PPC8347_FLASH_FIRMWARE_OFFSET: u32 = 25165824;
pub const DQ_PROLOG: u32 = 3132816074;
pub const DQ_PLGVT1: u32 = 3132816075;
pub const DQ_PLGVTL: u32 = 3132816076;
pub const DQPROLOGVER: u32 = 3132816066;
pub const DQERR_MASK: u32 = 4294901760;
pub const DQNOERR_MASK: u32 = 65535;
pub const DQERR_NIBMASK: u32 = 4026531840;
pub const DQERR_MULTFAIL: u32 = 2147483648;
pub const DQERR_SINGFAIL: u32 = 2415919104;
pub const DQERR_BITS: u32 = 268369920;
pub const DQERR_GENFAIL: u32 = 4026531840;
pub const DQERR_OVRFLW: u32 = 2147549184;
pub const DQERR_STARTED: u32 = 2147614720;
pub const DQERR_STOPPED: u32 = 2147745792;
pub const DQERR_EXEC: u32 = 2415984640;
pub const DQERR_NOMORE: u32 = 2416050176;
pub const DQERR_MOREDATA: u32 = 2416115712;
pub const DQERR_TOOOLD: u32 = 2416181248;
pub const DQERR_INVREQ: u32 = 2416246784;
pub const DQERR_NIMP: u32 = 2416312320;
pub const DQERR_ACCESS: u32 = 2416377856;
pub const DQERR_LOCKED: u32 = 2416443392;
pub const DQERR_NOTALLOWED: u32 = 2416508928;
pub const DQERR_WRONGID: u32 = 2416574464;
pub const DQERR_DEVBUSY: u32 = 2416640000;
pub const DQERR_CRC_FAILED: u32 = 2416705536;
pub const DQERR_DATA_FAILED: u32 = 2416771072;
pub const DQERR_OPS: u32 = 2416377856;
pub const DQERR_PARAM: u32 = 2416443392;
pub const DQERR_RCV: u32 = 2416508928;
pub const DQERR_SND: u32 = 2416574464;
pub const DQERR_NOSEND: u32 = 2701131776;
pub const DQERR_PENDING: u32 = 2717908992;
pub const DQERR_KEEP_PKT: u32 = 2751463424;
pub const DQERR_CLEAR_REPLY_MASK: u32 = 65535;
pub const DQ_REPLY: u32 = 4096;
pub const DQ_NOREPLY: u32 = 8192;
pub const DQ_REREQ: u32 = 16384;
pub const DQCMD_FIRST: u32 = 256;
pub const DQCMD_ECHB: u32 = 256;
pub const DQCMD_HRTBEAT: u32 = 257;
pub const DQCMD_ECHO: u32 = 260;
pub const DQCMD_ECHOPNP: u32 = 264;
pub const DQCMD_EFR: u32 = 268;
pub const DQCMD_RST: u32 = 272;
pub const DQCMD_RSTTS: u32 = 273;
pub const DQCMD_RSTTSB: u32 = 274;
pub const DQCMD_WRVAL: u32 = 276;
pub const DQCMD_WRRD32: u32 = 277;
pub const DQCMD_RDVAL: u32 = 280;
pub const DQCMD_WRVALM: u32 = 284;
pub const DQCMD_RDVALM: u32 = 288;
pub const DQCMD_SETCFG: u32 = 292;
pub const DQCMD_RDSTS: u32 = 296;
pub const DQCMD_GETCFG: u32 = 297;
pub const DQCMD_WRCHNL: u32 = 300;
pub const DQCMD_RDCHNL: u32 = 304;
pub const DQCMD_SETCLK: u32 = 308;
pub const DQCMD_START: u32 = 312;
pub const DQCMD_STARTB: u32 = 313;
pub const DQCMD_SETCL: u32 = 316;
pub const DQCMD_SETTRL: u32 = 320;
pub const DQCMD_CRTTRL: u32 = 321;
pub const DQCMD_FINISH: u32 = 324;
pub const DQCMD_MAP_CLEAR: u32 = 325;
pub const DQCMD_WRALL: u32 = 328;
pub const DQCMD_WRRD: u32 = 332;
pub const DQCMD_WRFIFO: u32 = 336;
pub const DQCMD_RDFIFO: u32 = 340;
pub const DQCMD_WRRDFIFO: u32 = 344;
pub const DQCMD_WRFLASH: u32 = 348;
pub const DQCMD_UPDFLASH: u32 = 352;
pub const DQCMD_SETSYNCRT: u32 = 354;
pub const DQCMD_SETCOMM: u32 = 356;
pub const DQCMD_SETNAME: u32 = 360;
pub const DQCMD_RDNAME: u32 = 364;
pub const DQCMD_SETPRM: u32 = 368;
pub const DQCMD_GETPRM: u32 = 369;
pub const DQCMD_WDSET: u32 = 370;
pub const DQCMD_SETCAL: u32 = 372;
pub const DQCMD_SAVEPRM: u32 = 376;
pub const DQCMD_SETMD: u32 = 380;
pub const DQCMD_SETRPLMAX: u32 = 384;
pub const DQCMD_SETPASS: u32 = 388;
pub const DQCMD_GETCRC: u32 = 392;
pub const DQCMD_GETCAPS: u32 = 400;
pub const DQCMD_INITIOM: u32 = 404;
pub const DQCMD_IOCTL: u32 = 408;
pub const DQCMD_IOCTLR: u32 = 409;
pub const DQCMD_IOCTLD: u32 = 410;
pub const DQCMD_SETTRIG: u32 = 416;
pub const DQCMD_BURST: u32 = 417;
pub const DQCMD_EVENT: u32 = 436;
pub const DQCMD_EMIT_EVENT: u32 = 437;
pub const DQCMD_RBFCPUWR: u32 = 452;
pub const DQCMD_RBFPAGEWR: u32 = 454;
pub const DQCMD_RBFPAGERD: u32 = 455;
pub const DQCMD_RBFDEVLIST: u32 = 456;
pub const DQCMD_SETAXMAP: u32 = 458;
pub const DQCMD_SETAXWRT: u32 = 459;
pub const DQCMD_SYNCCPU: u32 = 460;
pub const DQCMD_SYNCCPUB: u32 = 461;
pub const DQCMD_CLEARMEM: u32 = 508;
pub const DQCMD_JTAGACCESS: u32 = 509;
pub const DQCMD_SETVEC: u32 = 420;
pub const DQCMD_RUNVEC: u32 = 424;
pub const DQCMD_RSTWCHDG: u32 = 428;
pub const DQCMD_FLSHFIFO: u32 = 432;
pub const DQCMD_ALLOC: u32 = 440;
pub const DQCMD_FREE: u32 = 444;
pub const DQCMD_GETNVR: u32 = 275;
pub const DQCMD_SETLOCK: u32 = 448;
pub const DQ_EXE_LIMITED: u32 = 0;
pub const DQ_EXE_OPMD_OK: u32 = 1;
pub const DQ_EXE_DIAG_OK: u32 = 2;
pub const DQ_EXE_OP_DIAG: u32 = 3;
pub const DQ_EXE_SHUT_OK: u32 = 4;
pub const DQ_EXE_OP_D_SD: u32 = 7;
pub const DQ_CF_UPUSER_SEC: u32 = 4;
pub const DQ_PPC_UPUSER_SEC: u32 = 8;
pub const DQ_PPC_UEIPACKERNEL_SEC: u32 = 21;
pub const STS_STATE: u32 = 0;
pub const STS_POST: u32 = 1;
pub const STS_FW: u32 = 2;
pub const STS_LOGIC: u32 = 3;
pub const STS_STATE_TS_SH: u32 = 8;
pub const STS_STATE_STICKY: u32 = 0;
pub const STS_LOGIC_DC_OOR: u32 = 1;
pub const STS_LOGIC_DC_FAILED: u32 = 2;
pub const STS_LOGIC_TRIG_START: u32 = 4;
pub const STS_LOGIC_TRIG_STOP: u32 = 8;
pub const STS_LOGIC_CLO_NOT_RUNNING: u32 = 16;
pub const STS_LOGIC_CLI_NOT_RUNNING: u32 = 32;
pub const STS_LOGIC_CVCLK_CLO_ERR: u32 = 64;
pub const STS_LOGIC_CVCLK_CLI_ERR: u32 = 128;
pub const STS_LOGIC_CLCLK_CLO_ERR: u32 = 256;
pub const STS_LOGIC_CLCLK_CLI_ERR: u32 = 512;
pub const STS_LOGIC_NIC1_1000: u32 = 16384;
pub const STS_LOGIC_NIC1_100: u32 = 32768;
pub const STS_LOGIC_NIC2_1000: u32 = 65536;
pub const STS_LOGIC_NIC2_100: u32 = 131072;
pub const STS_LOGIC_CALIBRATING: u32 = 1073741824;
pub const STS_LOGIC_NO_REPORTING: u32 = 2147483648;
pub const STS_LOGIC_STICKY: u32 = 3221225472;
pub const STS_FW_CLK_OOR: u32 = 1;
pub const STS_FW_SYNC_ERR: u32 = 2;
pub const STS_FW_CHNL_ERR: u32 = 4;
pub const STS_FW_BUF_SCANS_PER_INT: u32 = 8;
pub const STS_FW_BUF_SAMPS_PER_PKT: u32 = 16;
pub const STS_FW_BUF_RING_SZ: u32 = 32;
pub const STS_FW_BUF_PREBUF_SZ: u32 = 64;
pub const STS_FW_BAD_CONFIG: u32 = 128;
pub const STS_FW_BUF_OVER: u32 = 256;
pub const STS_FW_BUF_UNDER: u32 = 512;
pub const STS_FW_LYR_FIFO_OVER: u32 = 1024;
pub const STS_FW_LYR_FIFO_UNDER: u32 = 2048;
pub const STS_FW_EEPROM_FAIL: u32 = 4096;
pub const STS_FW_GENERAL_FAIL: u32 = 8192;
pub const STS_FW_ISO_TIMEOUT: u32 = 16384;
pub const STS_FW_FIR_GAIN_ERR: u32 = 32768;
pub const STS_FW_OUT_FAIL: u32 = 65536;
pub const STS_FW_IO_FAIL: u32 = 131072;
pub const STS_FW_NO_MEMORY: u32 = 262144;
pub const STS_FW_BAD_OPER: u32 = 524288;
pub const STS_FW_LAYER_ERR: u32 = 1048576;
pub const STS_FW_OVERLOAD: u32 = 2097152;
pub const STS_FW_RES22: u32 = 4194304;
pub const STS_FW_RES23: u32 = 8388608;
pub const STS_FW_RES24: u32 = 16777216;
pub const STS_FW_RES25: u32 = 33554432;
pub const STS_FW_RES26: u32 = 67108864;
pub const STS_FW_RES27: u32 = 134217728;
pub const STS_FW_RES28: u32 = 268435456;
pub const STS_FW_SD_CARD_BUSY: u32 = 536870912;
pub const STS_FW_CONFIG_DONE: u32 = 1073741824;
pub const STS_FW_OPER_MODE: u32 = 2147483648;
pub const STS_FW_DIAG_0: u32 = 8;
pub const STS_FW_DIAG_1: u32 = 16;
pub const STS_POST_MEM_FAIL: u32 = 1;
pub const STS_POST_EEPROM_FAIL: u32 = 2;
pub const STS_POST_LAYER_FAILED: u32 = 4;
pub const STS_POST_FLASH_FAILED: u32 = 8;
pub const STS_POST_SDCARD_FAILED: u32 = 16;
pub const STS_POST_DC24: u32 = 32;
pub const STS_POST_DCCORE: u32 = 64;
pub const STS_POST_BUSTEST_FAILED: u32 = 128;
pub const STS_POST_BUSFAIL_DATA: u32 = 256;
pub const STS_POST_BUSFAIL_ADDR: u32 = 512;
pub const STS_POST_OVERHEAT: u32 = 1024;
pub const STS_POST_OVERCURRENT: u32 = 2048;
pub const STS_POST_RESET_FAILED: u32 = 4096;
pub const STS_POST_UNRECOG_LAYER: u32 = 8192;
pub const STS_POST_STICKY: u32 = 897;
pub const STS_FW_STICKY: u32 = 12288;
pub const STS_FW_BAD_CONFIG_MASK: u32 = 121;
pub const STS_LOGIC_BAD_MASK: u32 = 963;
pub const DQEVENT_SETUP: u32 = 1;
pub const DQEVENT_DISPATCH: u32 = 2;
pub const DQEVENT_ENABLE: u32 = 3;
pub const DQEVENT_INTERNAL: u32 = 4;
pub const DQEVENT_WAIT: u32 = 5;
pub const DQEVENT_NOREPLY: u32 = 2147483648;
pub const DQEVENT_ONCE: u32 = 1073741824;
pub const DQEVENT_NOSTORE: u32 = 536870912;
pub const DQEVENT_LAYER: u32 = 4096;
pub const DQAXMAP_CLEAR: u32 = 1;
pub const DQAXMAP_TEST: u32 = 2;
pub const DQAXMAP_SET_TIMING: u32 = 3;
pub const DQAXMAP_SET_SLOT: u32 = 4;
pub const DQAXMAP_ENABLE: u32 = 5;
pub const DQAXMAP_SET_WATERMARK: u32 = 6;
pub const DQAXMAP_SET_EXT_CLK_SRC: u32 = 7;
pub const DQ_VMAP_REREQUEST: u32 = 1;
pub const DQ_VMAP_ALT_PROC: u32 = 2;
pub const DQ_VMAP_RESENT: u32 = 2;
pub const DQ_VMAP_NOACK: u32 = 4;
pub const DQ_VMAP_OUTACK: u32 = 8;
pub const DQ_VMAP_CONTROL: u32 = 16;
pub const DQ_VMAP_SET_OUT_CTR: u32 = 32;
pub const DQ_VMAP_SET_IN_CTR: u32 = 64;
pub const DQ_VMAP_FLAG_MASK: u32 = 127;
pub const DQ_FLSHBUF_PKT_MAX: u32 = 512;
pub const DQ_PC104_CHAN: u32 = 2;
pub const DQ_PC104_CALDACS: u32 = 2;
pub const DQ_PC104_NAMELEN: u32 = 32;
pub const DQ_PC104_INFOSZ: u32 = 4096;
pub const DQ_PC104_BASE: u32 = 66000000;
pub const DQ_PC104_MAXCLFRQ: u32 = 2000;
pub const DQ_PC104_MAXCVFRQ: u32 = 2000;
pub const DQ_PC104_MAXWAIT: u32 = 20;
pub const DQ_PC104_LCR_DPEN: u32 = 4;
pub const DQ_PC104_LCR_LED: u32 = 2;
pub const DQ_PC104_IER_AE: u32 = 512;
pub const DQ_PC104_IER_TO: u32 = 256;
pub const DQ_PC104_IER_WBD: u32 = 128;
pub const DQ_PC104_IER_RBD: u32 = 64;
pub const DQ_PC104_IER_WIOD: u32 = 32;
pub const DQ_PC104_IER_RIOD: u32 = 16;
pub const DQ_PC104_IER_WMD: u32 = 8;
pub const DQ_PC104_IER_RMD: u32 = 4;
pub const DQ_PC104_IER_IRQB: u32 = 2;
pub const DQ_PC104_IER_IRQA: u32 = 1;
pub const DQ_PC104_DC12N_2: u32 = 128;
pub const DQ_PC104_DC12N_1: u32 = 16;
pub const DQ_PC104_DC12_5: u32 = 64;
pub const DQ_PC104_DC12_4: u32 = 32;
pub const DQ_PC104_DC12_3: u32 = 8;
pub const DQ_PC104_DC12_2: u32 = 4;
pub const DQ_PC104_DC12_1: u32 = 2;
pub const DQ_PC104_DC5N: u32 = 1;
pub const DQ_PC104_CFG: u32 = 8192;
pub const DQ_PC104_STS: u32 = 8196;
pub const DQ_PC104_BA0: u32 = 8200;
pub const DQ_PC104_BA1: u32 = 8204;
pub const DQ_PC104_IRQA: u32 = 8208;
pub const DQ_PC104_IRQB: u32 = 8212;
pub const DQ_PC104_LNEN: u32 = 8216;
pub const DQ_PC104_IRQPINS: u32 = 8220;
pub const DQ_PC104_MEMRD: u32 = 8224;
pub const DQ_PC104_MRADDR: u32 = 8224;
pub const DQ_PC104_IORD: u32 = 8228;
pub const DQ_PC104_IORADDR: u32 = 8228;
pub const DQ_PC104_MWADDR: u32 = 8232;
pub const DQ_PC104_MEMWR: u32 = 8236;
pub const DQ_PC104_IOWADDR: u32 = 8240;
pub const DQ_PC104_IOWR: u32 = 8244;
pub const DQ_PC104_BCMD0: u32 = 8248;
pub const DQ_PC104_BCMD1: u32 = 8252;
pub const DQ_PC104_DP0: u32 = 32768;
pub const DQ_PC104_EN_MC: u32 = 128;
pub const DQ_PC104_IRQP: u32 = 0;
pub const DQ_PC104_IRQN: u32 = 64;
pub const DQ_PC104_BUSCLOCK_5_5MHz: u32 = 16;
pub const DQ_PC104_BUSCLOCK_6_6MHz: u32 = 32;
pub const DQ_PC104_BUSCLOCK_8MHz: u32 = 48;
pub const DQ_PC104_OSC_14MHz: u32 = 8;
pub const DQ_PC104_BE: u32 = 4;
pub const DQ_PC104_WE: u32 = 2;
pub const DQ_PC104_ASSERT_RESET: u32 = 1;
pub const DQ_PC104_BUSCLOCK_0: u32 = 0;
pub const DQ_PC104_STS_BTB: u32 = 2147483648;
pub const DQ_PC104_STS_IOCHK: u32 = 1073741824;
pub const DQ_PC104_STS_STAE: u32 = 524288;
pub const DQ_PC104_STS_STTO: u32 = 262144;
pub const DQ_PC104_STS_IO16TO: u32 = 131072;
pub const DQ_PC104_STS_M16TO: u32 = 65536;
pub const DQ_PC104_STS_MIO8TO: u32 = 32768;
pub const DQ_PC104_STS_IRQ14_15S: u32 = 16384;
pub const DQ_PC104_STS_IRQ12S: u32 = 8192;
pub const DQ_PC104_STS_IRQ11S: u32 = 4096;
pub const DQ_PC104_STS_IRQ10S: u32 = 2048;
pub const DQ_PC104_STS_IRQ7_9S: u32 = 1024;
pub const DQ_PC104_STS_IRQ6S: u32 = 512;
pub const DQ_PC104_STS_IRQ5S: u32 = 256;
pub const DQ_PC104_STS_IRQ4S: u32 = 128;
pub const DQ_PC104_STS_IRQ3S: u32 = 64;
pub const DQ_PC104_STS_BWD: u32 = 32;
pub const DQ_PC104_STS_BRD: u32 = 16;
pub const DQ_PC104_STS_IOWD: u32 = 8;
pub const DQ_PC104_STS_IORD: u32 = 4;
pub const DQ_PC104_STS_MWD: u32 = 2;
pub const DQ_PC104_STS_MRD: u32 = 1;
pub const DQ_PC104_STS_IRQ3S_SH: u32 = 6;
pub const DQ_PC104_BA_SELECT: u32 = 2147483648;
pub const DQ_PC104_BA_IOSPACE: u32 = 0;
pub const DQ_PC104_BA_MEMIO: u32 = 1073741824;
pub const DQ_PC104_BA_IOCHKRDY: u32 = 536870912;
pub const DQ_PC104_BA_IOCS16: u32 = 268435456;
pub const DQ_PC104_BA_MEMCS16: u32 = 134217728;
pub const DQ_PC104_BA_AEN_A17: u32 = 67108864;
pub const DQ_PC104_BA_ACCESS_16: u32 = 33554432;
pub const DQ_PC104_BA_ALL: u32 = 4278190080;
pub const DQ_PC104_IRQ14_15S: u32 = 256;
pub const DQ_PC104_IRQ12S: u32 = 128;
pub const DQ_PC104_IRQ11S: u32 = 64;
pub const DQ_PC104_IRQ10S: u32 = 32;
pub const DQ_PC104_IRQ7_9S: u32 = 16;
pub const DQ_PC104_IRQ6S: u32 = 8;
pub const DQ_PC104_IRQ5S: u32 = 4;
pub const DQ_PC104_IRQ4S: u32 = 2;
pub const DQ_PC104_IRQ3S: u32 = 1;
pub const DQ_PC104_DACK: u32 = 8192;
pub const DQ_PC104_SHBE: u32 = 4096;
pub const DQ_PC104_BALE: u32 = 2048;
pub const DQ_PC104_AEN: u32 = 1024;
pub const DQ_PC104_BCLK: u32 = 512;
pub const DQ_PC104_OSC: u32 = 256;
pub const DQ_PC104_TC: u32 = 128;
pub const DQ_PC104_REFRESH: u32 = 64;
pub const DQ_PC104_IOW: u32 = 32;
pub const DQ_PC104_IOR: u32 = 16;
pub const DQ_PC104_SMEMW: u32 = 8;
pub const DQ_PC104_SMEMR: u32 = 4;
pub const DQ_PC104_MEMW: u32 = 2;
pub const DQ_PC104_MEMR: u32 = 1;
pub const DQ_PC104_CDO_ENDIRQ: u32 = 268435456;
pub const DQ_PC104_CDO_ACC16BIT: u32 = 0;
pub const DQ_PC104_CDO_ACC8BIT: u32 = 134217728;
pub const DQ_PC104_CDO_IMMDATA: u32 = 67108864;
pub const DQ_PC104_CDO_DIR: u32 = 33554432;
pub const DQ_PC104_CDO_READ: u32 = 0;
pub const DQ_PC104_CDO_WRITE: u32 = 33554432;
pub const DQ_PC104_CDO_IOSPCSEL: u32 = 0;
pub const DQ_PC104_CDO_MEMSPCSEL: u32 = 16777216;
pub const DQ_PC104_CL_CLK: u32 = 536870912;
pub const DQ_PC104_SPACESIZE_MASK: u32 = 150994944;
pub const DQ_PC104_SCRIPT_MASK: u32 = 268435455;
pub const DQ_PC104_SCRIPTDATA_MASK: u32 = 4294905855;
pub const DQ_PC104_CL_SW: u32 = 0;
pub const DQ_PC104_CL_TIMER: u32 = 1;
pub const DQ_PC104_CL_IRQA: u32 = 2;
pub const DQ_PC104_CL_IRQB: u32 = 3;
pub const DQ_PC104_CL_IRQEN: u32 = 8;
pub const DQL_IOCTL104_SETCFG: u32 = 8;
pub const DQL_IOCTL104_SETDCDC: u32 = 9;
pub const DQL_IOCTL104_MEMIOWRRD: u32 = 10;
pub const DQL_IOCTL104_START: u32 = 11;
pub const DQL_IOCTL104_BLOCKWRRD: u32 = 12;
pub const DQL_IOCTL104_MEMORYWRRD: u32 = 13;
pub const DQL_IOCTL104_CUSTOMPROC: u32 = 14;
pub const DQ_PC104_READBUS: u32 = 1;
pub const DQ_PC104_WRITEBUS: u32 = 2;
pub const DQ_PC104_READMEM: u32 = 3;
pub const DQ_PC104_WRITEMEM: u32 = 4;
pub const DQ_PC104_WRITESCRIPT: u32 = 5;
pub const DQ_PC104_READSTATUS: u32 = 6;
pub const DQ_PC104_CONFIGURE_BUS: u32 = 7;
pub const DQ_PC104_CONFIGURE_INTCLK: u32 = 8;
pub const DQ_PC104_SET_CUSTOM_PROC: u32 = 1;
pub const DQ_PC104_SET_CUSTOM_PARAM: u32 = 2;
pub const DQ_PC104_ISR_DEFAULT: u32 = 0;
pub const DQ_PC104_ISR_SIMA_ICB: u32 = 1;
pub const DQ_PC104_ISR_SIMA_RSB: u32 = 2;
pub const DQ_PC104_ISR_SIMA_ASCBA: u32 = 4;
pub const DQ_PC104_ISR_SIMA_ASCBB: u32 = 5;
pub const DQ_PC104_ISR_SIMA_ASCBC: u32 = 6;
pub const DQ_PC104_ISR_IVP: u32 = 16;
pub const DQ_PC104_SIMA_FRAME: u32 = 1088;
pub const DQ_PC104_SIMA_MSLOT: u32 = 1090;
pub const DQ_PC104_SIMA_BCM: u32 = 1092;
pub const DQ_PC104_SIMA_DCNT: u32 = 1094;
pub const DQ_PC104_SIMA_ECNT: u32 = 1096;
pub const DQ_PC104_SIMA_ERRVLD: u32 = 1104;
pub const DQ_PC104_SIMA_ACK: u32 = 32766;
pub const DQ_PC104_SIMA_MCTRL: u32 = 2304;
pub const DQ_PC104_SIMA_MCTRL_STAT: u32 = 2318;
pub const DQ_PC104_SIMA_CLO_ENTRIES: u32 = 32;
pub const DQ_PC104_CHNUM: u32 = 1;
pub const DQ_PC104_CHTYPE: u32 = 14;
pub const DQ_SIMA_RDBLK0: u32 = 32768;
pub const DQ_SIMA_RDBLK1: u32 = 36864;
pub const DQ_SIMA_WRBLK0: u32 = 40960;
pub const DQ_SIMA_WRBLK1: u32 = 45056;
pub const DQ_SIMA_RX_BUFSEL: u32 = 0;
pub const DQ_SIMA_TX_BUFSEL: u32 = 1;
pub const DQ_SIMA_RDBLK0i: u32 = 8192;
pub const DQ_SIMA_RDBLK1i: u32 = 9216;
pub const DQ_SIMA_WRBLK0i: u32 = 10240;
pub const DQ_SIMA_WRBLK1i: u32 = 11264;
pub const DQ_PC104_BLKMEM0: u32 = 61440;
pub const DQ_PC104_BLKMEM1: u32 = 63488;
pub const DQ_PC104_BLKSCRATCH: u32 = 65472;
pub const DQ_PC104_BLKMEM0i: u32 = 7168;
pub const DQ_PC104_BLKMEM1i: u32 = 7680;
pub const DQ_PC104_BLKSCRATCHi: u32 = 8176;
pub const DQ_PC104_VMAP_SIMA_CTRL: u32 = 0;
pub const DQ_PC104_VMAP_SIMA_STS: u32 = 0;
pub const DQ_PC104_VMAP_SIMA_R90E: u32 = 64;
pub const DQ_PC104_MAXWAIT_BUF: u32 = 5;
pub const DQ_PC104_SIMA_FRMSZ_RD: u32 = 1;
pub const DQ_PC104_SIMA_FRMSZ_WR: u32 = 2;
pub const DQ_PC105_CHAN: u32 = 1;
pub const DQ_PC105_NAMELEN: u32 = 32;
pub const DQ_PC105_INFOSZ: u32 = 4096;
pub const DQ_PC105_BASE: u32 = 66000000;
pub const DQ_PC105_MAXCLFRQ: u32 = 2000;
pub const DQ_PC105_MAXCVFRQ: u32 = 2000;
pub const DQ_PC105_MAXWAIT: u32 = 20;
pub const DQ_PC105_MAXCLSIZE: u32 = 65536;
pub const DQ_PC105_CALDACS: u32 = 4;
pub const DQL_PC105_LED: u32 = 2;
pub const DQ_PC105_CFG: u32 = 8192;
pub const DQ_PC105_STS: u32 = 8196;
pub const DQ_PC105_RDWR: u32 = 8200;
pub const DQ_PC105_DATARD: u32 = 8204;
pub const DQ_PC105_CFG_EN: u32 = 2147483648;
pub const DQ_PC105_WCLK_E: u32 = 134217728;
pub const DQ_PC105_WCLK_S: u32 = 16777216;
pub const DQ_PC105_CFG_R41: u32 = 8388608;
pub const DQ_PC105_CFG_AAI: u32 = 2097152;
pub const DQ_PC105_CFG_A20: u32 = 1048576;
pub const DQ_PC105_CFG_A0: u32 = 1;
pub const DQ_PC105_STS_WBUSY: u32 = 4;
pub const DQ_PC105_STS_RBUSY: u32 = 2;
pub const DQ_PC105_STS_BUSY_N: u32 = 1;
pub const DQ_DNF_I_MEASURE_LOGIC_VER: u32 = 4264;
pub const DQ_L2_CHAN: u32 = 16;
pub const DQ_L2_CHAN_MESR: u32 = 13;
pub const DQ_L2_CHAN_MAX: u32 = 64;
pub const DQ_L2_INFOSZ: u32 = 4096;
pub const DQ_L2_BASE: u32 = 66000000;
pub const DQ_L2_MAXCLFRQ: u32 = 10;
pub const DQ_L2_MAXCVFRQ: u32 = 10;
pub const DQ_L2_DNRP_OL_CH: u32 = 16;
pub const DQ_L2_DNRP_UL_CH: u32 = 32;
pub const DQ_L2_DNRP_LED_CH: u32 = 48;
pub const DQ_L2_DNRP_FAN_CH: u32 = 49;
pub const DQ_L2_DNRP_LED_MNGD: u32 = 50;
pub const DQ_L2_DNRP_FAN_MNGD: u32 = 51;
pub const DQ_L2_DNRP_SCRATCH_PAD: u32 = 52;
pub const DQ_L2_DNRP_LAYER_STATUS: u32 = 53;
pub const DQ_L4_DNRP_HOURS: u32 = 54;
pub const DQ_L4_DNRP_GETSPEED1: u32 = 55;
pub const DQ_L4_DNRP_GETSPEED2: u32 = 56;
pub const DQ_L2_SET_CONFIG: u32 = 1;
pub const DQ_L2_SET_LED: u32 = 2;
pub const DQ_L2_SET_LIMITS: u32 = 4;
pub const DQ_L2_SET_SYNC_SW_TIMEOUT: u32 = 8;
pub const DQ_L2_SET_HR_MTR: u32 = 16;
pub const DQ_L4_SET_CONFIG: u32 = 1;
pub const DQ_L4_SET_LED: u32 = 2;
pub const DQ_L4_SET_LIMITS: u32 = 4;
pub const DQ_L4_SET_HR_MTR: u32 = 16;
pub const DQ_L2_ADC_TEMP2: u32 = 12;
pub const DQ_L2_ADC_TEMP1: u32 = 11;
pub const DQ_L2_ADC_I_IN: u32 = 10;
pub const DQ_L2_ADC_V_FAN: u32 = 9;
pub const DQ_L2_ADC_V_1_2: u32 = 8;
pub const DQ_L2_ADC_V_1_5: u32 = 7;
pub const DQ_L2_ADC_V_IN: u32 = 6;
pub const DQ_L2_ADC_V_24NIC: u32 = 5;
pub const DQ_L2_ADC_V_24DNR: u32 = 4;
pub const DQ_L2_ADC_V_3_3NIC: u32 = 3;
pub const DQ_L2_ADC_V_3_3DNR: u32 = 2;
pub const DQ_L2_ADC_V_2_5NIC: u32 = 1;
pub const DQ_L2_ADC_V_2_5DNR: u32 = 0;
pub const DQ_L4_ADC_TEMP2: u32 = 15;
pub const DQ_L4_ADC_I_1_5: u32 = 14;
pub const DQ_L4_ADC_TEMP1: u32 = 13;
pub const DQ_L4_ADC_I_3_3: u32 = 12;
pub const DQ_L4_ADC_GND_3: u32 = 11;
pub const DQ_L4_ADC_I_IN: u32 = 10;
pub const DQ_L4_ADC_V_FAN: u32 = 9;
pub const DQ_L4_ADC_V_1_2: u32 = 8;
pub const DQ_L4_ADC_V_1_5: u32 = 7;
pub const DQ_L4_ADC_V_IN: u32 = 6;
pub const DQ_L4_ADC_GND_2: u32 = 5;
pub const DQ_L4_ADC_V_24DNR: u32 = 4;
pub const DQ_L4_ADC_V_CAP: u32 = 3;
pub const DQ_L4_ADC_V_3_3DNR: u32 = 2;
pub const DQ_L4_ADC_GND: u32 = 1;
pub const DQ_L4_ADC_V_2_5DNR: u32 = 0;
pub const DQ_L4F_ADC_GND_3: u32 = 11;
pub const DQ_L4F_ADC_I_IN: u32 = 10;
pub const DQ_L4F_ADC_V_FAN: u32 = 9;
pub const DQ_L4F_ADC_V_1_2: u32 = 8;
pub const DQ_L4F_ADC_V_1_5: u32 = 7;
pub const DQ_L4F_ADC_V_IN: u32 = 6;
pub const DQ_L4F_ADC_V_3_3DNR: u32 = 1;
pub const DQ_L4M_ADC_I_1_2: u32 = 14;
pub const DQ_L4M_ADC_I_1_5: u32 = 12;
pub const DQ_L4M_ADC_I_3_3: u32 = 10;
pub const DQ_L4M_ADC_GND: u32 = 9;
pub const DQ_L4M_ADC_I_IN: u32 = 8;
pub const DQ_L4M_ADC_I_24: u32 = 7;
pub const DQ_L4M_ADC_V_1_2: u32 = 6;
pub const DQ_L4M_ADC_V_1_5: u32 = 5;
pub const DQ_L4M_ADC_V_IN: u32 = 4;
pub const DQ_L4M_ADC_V_24DNR: u32 = 3;
pub const DQ_L4M_ADC_V_HOLD: u32 = 2;
pub const DQ_L4M_ADC_V_3_3DNR: u32 = 1;
pub const DQ_L4M_ADC_V_2_5DNR: u32 = 0;
pub const DQ_LDIAG_ADC_TEMP2: u32 = 15;
pub const DQ_LDIAG_ADC_GND_8: u32 = 14;
pub const DQ_LDIAG_ADC_TEMP1: u32 = 13;
pub const DQ_LDIAG_ADC_GND_7: u32 = 12;
pub const DQ_LDIAG_ADC_GND_6: u32 = 11;
pub const DQ_LDIAG_ADC_GND_5: u32 = 10;
pub const DQ_LDIAG_ADC_GND_4: u32 = 9;
pub const DQ_LDIAG_ADC_V_1_2: u32 = 8;
pub const DQ_LDIAG_ADC_V_1_5: u32 = 7;
pub const DQ_LDIAG_ADC_V_IN: u32 = 6;
pub const DQ_LDIAG_ADC_GND_3: u32 = 5;
pub const DQ_LDIAG_ADC_V_24: u32 = 4;
pub const DQ_LDIAG_ADC_GND_2: u32 = 3;
pub const DQ_LDIAG_ADC_V_3_3: u32 = 2;
pub const DQ_LDIAG_ADC_GND: u32 = 1;
pub const DQ_LDIAG_ADC_V_2_5: u32 = 0;
pub const DQ_L2_SAFE_TEMP_HIGH: u32 = 313;
pub const DQ_L2_SAFE_TEMP_LOW: u32 = 308;
pub const DQ_L2_SAFE_TEMP_REDUCTION: u32 = 10;
pub const DQ_C4_SAFE_TEMP_HIGH: u32 = 323;
pub const DQ_C4_SAFE_TEMP_LOW: u32 = 320;
pub const DQ_L4_CVT_R_VIN: f64 = 0.54;
pub const DQ_L4_SAFE_TEMP_HI: u32 = 313;
pub const DQ_L4_SAFE_TEMP_LO: u32 = 308;
pub const DQ_L2_LED_VIN: u32 = 1;
pub const DQ_L2_LED_IIN: u32 = 2;
pub const DQ_L2_LED_1_5: u32 = 4;
pub const DQ_L2_LED_FAN: u32 = 8;
pub const DQ_L2_LED_USR: u32 = 16;
pub const DQ_L2_LED_IO: u32 = 32;
pub const DQ_L2_LED_OVRT: u32 = 64;
pub const DQ_L2_LED_ATT: u32 = 128;
pub const DQ_L2_LED_24_DNR: u32 = 256;
pub const DQ_L2_LED_24_NIC: u32 = 512;
pub const DQ_L2_LED_3_3_DNR: u32 = 1024;
pub const DQ_L2_LED_3_3_NIC: u32 = 2048;
pub const DQ_L2_LED_STOP_UPDATE: u32 = 2147483648;
pub const DQ_L2_LED_USR_: u32 = 176;
pub const DQ_L2_LED_MASK: u32 = 11534512;
pub const DQ_L2_OVERHEAT_IGNORE: u32 = 10;
pub const DQ_L4_LED_OVRT: u32 = 1;
pub const DQ_L4_LED_ATT: u32 = 2;
pub const DQ_L4_LED_RW: u32 = 4;
pub const DQ_L4_LED_USR: u32 = 8;
pub const DQ_L4_LED_IO: u32 = 16;
pub const DQ_L4_LED_3_3_DNR: u32 = 32;
pub const DQ_L4_LED_PG: u32 = 64;
pub const DQ_L4_LED_24_DNR: u32 = 128;
pub const DQ_L4_LED_STOP_UPDATE: u32 = 2147483648;
pub const DQ_L4_LED_USR_: u32 = 26;
pub const DQ_L4_LED_MASK: u32 = 1703962;
pub const DQ_L2_DNRP_CHECK_us: u32 = 100000;
pub const DQ_L2_CFG_UONLY: u32 = 2147483648;
pub const DQ_L2_CFG_24BIT: u32 = 1073741824;
pub const DQ_L2_CFG_ADCFE: u32 = 536870912;
pub const DQ_L2_CFG_ADCDIV: u32 = 1048576;
pub const DQ_L2_STS_FAN1STS: u32 = 524288;
pub const DQ_L2_STS_FAN0STS: u32 = 262144;
pub const DQ_L2_STS_DC24OFF: u32 = 131072;
pub const DQ_L2_STS_FANOFF: u32 = 65536;
pub const DQ_L2_STS_WDRSTEN: u32 = 32768;
pub const DQ_L2_CFG_MASK: u32 = 229376;
pub const DQ_L2_LED_BLINK0: u32 = 65536;
pub const DQ_L2_LED_LEDON0: u32 = 1;
pub const DQ_L2_EST_ESTS0: u32 = 65536;
pub const DQ_L2_EST_CURSTS0: u32 = 1;
pub const DQL_IOCTL2000_GETPASS: u32 = 10;
pub const DQL_IOCTL2000_SETPASS: u32 = 11;
pub const DQ_L4_STS_UONLY: u32 = 2147483648;
pub const DQ_L4_STS_24BIT: u32 = 1073741824;
pub const DQ_L4_STS_ADCFE: u32 = 536870912;
pub const DQ_L4_STS_ASL1BIT: u32 = 268435456;
pub const DQ_L4_STS_DIV_SH: u32 = 20;
pub const DQ_L4_STS_FAN12STS: u32 = 262144;
pub const DQ_L4_STS_DC24OFF: u32 = 131072;
pub const DQ_L4_STS_FANOFF: u32 = 65536;
pub const DQ_L4_STS_WDRSTEN: u32 = 32768;
pub const DQ_L4_STS_PBRSTDIS: u32 = 16384;
pub const DQ_L4_STS_WD: u32 = 8192;
pub const DQ_L4_STS_PBRST: u32 = 4096;
pub const DQ_L4_STS_BUZZDIS: u32 = 0;
pub const DQ_L4_STS_BUZZ0: u32 = 1024;
pub const DQ_L4_STS_BUZZ1: u32 = 2048;
pub const DQ_L4_STS_BUZZTMR1: u32 = 3072;
pub const DQ_L4_STS_AUTO24OFF: u32 = 512;
pub const DQ_L4_STS_FLENSTS: u32 = 256;
pub const DQ_L2_NAMELEN: u32 = 20;
pub const DQ_L2_NO_IP: u32 = 1;
pub const DQ_L2_PROGRAM_IP: u32 = 2;
pub const DQ_AI201_CHAN: u32 = 24;
pub const DQ_AI201_CHANSVC: u32 = 32;
pub const DQ_AI201_INFOSZ: u32 = 4096;
pub const DQ_AI201_BASE: u32 = 66000000;
pub const DQ_AI201_GAINS: u32 = 4;
pub const DQ_AI201_SPAN: f64 = 30.0;
pub const DQ_AI201_OFFSET: f64 = 15.0;
pub const DQ_AI201_STEP: f64 = 0.00045777065690089265;
pub const DQ_AI201_STEP_10: f64 = 0.000045777065690089265;
pub const DQ_AI201_STEP_100: f64 = 0.000004577706569008927;
pub const DQ_AI201_STEP_1000: f64 = 0.00000045777065690089265;
pub const DQ_AI201_STEP_2: f64 = 0.00022888532845044633;
pub const DQ_AI201_STEP_5: f64 = 0.00009155413138017853;
pub const DQ_AI201_OFFSET_10: f64 = 1.5;
pub const DQ_AI201_OFFSET_100: f64 = 0.15;
pub const DQ_AI201_OFFSET_1000: f64 = 0.015;
pub const DQ_AI201_OFFSET_2: f64 = 7.5;
pub const DQ_AI201_OFFSET_5: f64 = 3.0;
pub const DQ_AI201_GAIN_1: u32 = 0;
pub const DQ_AI201_GAIN_10: u32 = 1;
pub const DQ_AI201_GAIN_100: u32 = 2;
pub const DQ_AI201_GAIN_1000: u32 = 3;
pub const DQ_AI201_GAIN_1_100: u32 = 0;
pub const DQ_AI201_GAIN_2_100: u32 = 1;
pub const DQ_AI201_GAIN_5_100: u32 = 2;
pub const DQ_AI201_GAIN_10_100: u32 = 3;
pub const DQ_AI202_GAIN_10: u32 = 1;
pub const DQ_AI202_GAIN_100: u32 = 2;
pub const DQ_AI202_GAIN_1000: u32 = 3;
pub const DQ_AI201_GAINV_0: u32 = 1;
pub const DQ_AI201_GAINV_1: u32 = 10;
pub const DQ_AI201_GAINV_2: u32 = 100;
pub const DQ_AI201_GAINV_3: u32 = 1000;
pub const DQ_AI201_MAXCLFRQ: u32 = 120000;
pub const DQ_AI201_MAXCVFRQ: u32 = 120000;
pub const DQ_AI201_CALDACS: u32 = 4;
pub const DQ_AI201_VREFS: u32 = 2;
pub const DQ_AI201_CL_TIMES: u32 = 2;
pub const DQ_AI201_FIFO_CH: u32 = 128;
pub const DQ_AI201_MODESCAN: u32 = 0;
pub const DQ_AI201_MODEFIFO: u32 = 131072;
pub const DQ_AI201_MODECONT: u32 = 196608;
pub const DQ_AI201_FIFO_GET_DATA: u32 = 16;
pub const DQ_AI201_NAMELEN: u32 = 20;
pub const DQ_ONESTEP201: u32 = 45776;
pub const DQ_OFFSETD201: u32 = 1500000000;
pub const DQ_ONESTEP201_10: u32 = 30518;
pub const DQ_OFFSETD201_10: u32 = 1000000000;
pub const DQ_AI204_CHAN: u32 = 24;
pub const DQ_AI204_AUX_CHANS: u32 = 7;
pub const DQ_AI204_CHAN_TOTAL: u32 = 31;
pub const DQ_AI204_USER_CHANS: u32 = 29;
pub const DQ_AI204_MAX_CL_SIZE: u32 = 30;
pub const DQ_AI204_INFOSZ: u32 = 4096;
pub const DQ_AI204_BASE: u32 = 66000000;
pub const DQ_AI204_MAXRATE: u32 = 1000;
pub const DQ_AI204_GAINS: u32 = 4;
pub const DQL_AI204_CH_RESERVED_1: u32 = 24;
pub const DQL_AI204_CH_RESERVED_2: u32 = 25;
pub const DQL_AI204_VREF: u32 = 26;
pub const DQL_AI204_GND_G1: u32 = 27;
pub const DQL_AI204_GND_G2: u32 = 28;
pub const DQL_AI204_GND_G5: u32 = 29;
pub const DQL_AI204_GND_G10: u32 = 30;
pub const DQ_AI204_SPAN: f64 = 5.0;
pub const DQ_AI204_OFFSET: f64 = 2.5;
pub const DQ_AI204_OFFSET_2: f64 = 1.25;
pub const DQ_AI204_OFFSET_5: f64 = 0.5;
pub const DQ_AI204_OFFSET_10: f64 = 0.25;
pub const DQ_AI204_ADC_DATA_MASK: u32 = 262143;
pub const DQ_AI204_GAIN_1: u32 = 0;
pub const DQ_AI204_GAIN_2: u32 = 1;
pub const DQ_AI204_GAIN_5: u32 = 2;
pub const DQ_AI204_GAIN_10: u32 = 3;
pub const DQ_AI204_R: f64 = 100.0;
pub const DQ_AI204_MILLIAMPS_AMP: f64 = 1000.0;
pub const DQ_AI204_DEF_OFFS_CAL: u32 = 72;
pub const DQ_AI204_DEF_GAIN_CAL: u32 = 131064;
pub const DQ_AI204_LIMIT_OFFS: u32 = 4096;
pub const DQ_AI204_LIMIT_GAIN: u32 = 8192;
pub const DQ_AI204_SET_CB_LIMITS: u32 = 16;
pub const DQ_AI204_SET_CB: u32 = 17;
pub const DQ_AI204_SEL_ALL_CHAN: u32 = 16777215;
pub const DQ_AI204_GET_CB_STATE: u32 = 32;
pub const DQ_AI204_ENABLE_CB_OFF: u32 = 262143;
pub const DQ_AI204_ENABLE_CB_ON: u32 = 262142;
pub const DQ_AI204_ENABLE_CB_TRIP: u32 = 131072;
pub const DQ_AI204_SET_MOV_AVG: u32 = 18;
pub const DQ_AI204_SET_MOV_AVG_OFF: u32 = 16;
pub const DQ_AI204_SET_MOV_AVG_ON_128: u32 = 7;
pub const DQ_AI204IS_SWFAULT: u32 = 6;
pub const DQ_AI204IS_CURSW_FF: u32 = 5;
pub const DQ_AI204IS_CURMUX_SF: u32 = 4;
pub const DQ_AI204IS_CURMUX_FF: u32 = 3;
pub const DQ_AI204IS_NEXTSW_FF: u32 = 2;
pub const DQ_AI204IS_NEXTMUX_SF: u32 = 1;
pub const DQ_AI204IS_NEXTMUX_FF: u32 = 0;
pub const DQ_AI204IS_NEW_DATA: u32 = 2147483648;
pub const DQ_AI204IS_DIO1: u32 = 19;
pub const DQ_AI204IS_DIO0: u32 = 18;
pub const DQ_AI204IS_ADCDATAE: u32 = 17;
pub const DQ_AI204IS_ADCDATAS: u32 = 0;
pub const DQIOCTL_DIO_SIGROUTING: u32 = 10;
pub const DQIOCTL_DIO_READ_DI_ONLY: u32 = 11;
pub const DQ_AI204_CL_TIMES: u32 = 2;
pub const DQ_AI204_FIFO_CH: u32 = 128;
pub const DQ_AI204_FIFO_BUFSZ: u32 = 16;
pub const DQ_AI204_MODESCAN: u32 = 0;
pub const DQ_AI204_MODEFIFO: u32 = 131072;
pub const DQ_AI204_MODECONT: u32 = 196608;
pub const DQ_AI204_NAMELEN: u32 = 16;
pub const DQ_AI205_CHAN: u32 = 4;
pub const DQ_AI205_CHANSVC: u32 = 4;
pub const DQ_AI205_INFOSZ: u32 = 4096;
pub const DQ_AI205_BASE: u32 = 66000000;
pub const DQ_AI205_FIRNUM: u32 = 3;
pub const DQ_AI205_DEFDECR: u32 = 5;
pub const DQ_AI205_MAXDECR: u32 = 32;
pub const DQ_AI205_MAXTAPS: u32 = 128;
pub const DQ_AI205_COEFF_WIDTH: u32 = 16;
pub const DQ_AI205_FIR_TOTAL: u32 = 32768;
pub const DQ_AI205_SPAN: f64 = 200.0;
pub const DQ_AI205_OFFSET: f64 = 100.0;
pub const DQ_AI205_STEP: f64 = 0.0007629423635191479;
pub const DQ_AI205_STEP16: f64 = 0.0030518043793392844;
pub const DQ_AI205_STEP_10: f64 = 0.00007629423635191479;
pub const DQ_AI205_STEP_100: f64 = 0.000007629423635191479;
pub const DQ_AI205_STEP_1000: f64 = 0.0000007629423635191479;
pub const DQ_AI205_OFFSET_10: f64 = 10.0;
pub const DQ_AI205_OFFSET_100: f64 = 1.0;
pub const DQ_AI205_OFFSET_1000: f64 = 0.1;
pub const DQ_AI205_SPAN_801: f64 = 8.192;
pub const DQ_AI205_OFFSET_801: f64 = 4.096;
pub const DQ_AI205_STEP_801: f64 = 0.000031250119209744304;
pub const DQ_AI205_STEP16_801: f64 = 0.0001250019073777371;
pub const DQ_AI205_STEP_10_801: f64 = 0.0000031250119209744303;
pub const DQ_AI205_STEP_100_801: f64 = 0.00000031250119209744305;
pub const DQ_AI205_STEP_1000_801: f64 = 0.000000031250119209744304;
pub const DQ_AI205_OFFSET_10_801: f64 = 0.4096;
pub const DQ_AI205_OFFSET_100_801: f64 = 0.04096;
pub const DQ_AI205_OFFSET_1000_801: f64 = 0.004096;
pub const DQ_AI205_CALDACS: u32 = 8;
pub const DQ_AI205_CL_TIMES: u32 = 2;
pub const DQ_AI205_FIFO_CH: u32 = 128;
pub const DQ_AI205_FIFO_BUFSZ: u32 = 256;
pub const DQ_AI205_GAIN_1: u32 = 0;
pub const DQ_AI205_GAIN_10: u32 = 1;
pub const DQ_AI205_GAIN_100: u32 = 2;
pub const DQ_AI205_GAIN_1000: u32 = 3;
pub const DQ_AI205_GAINV_0: u32 = 1;
pub const DQ_AI205_GAINV_1: u32 = 10;
pub const DQ_AI205_GAINV_2: u32 = 100;
pub const DQ_AI205_GAINV_3: u32 = 1000;
pub const DQ_AI205_MODESCAN: u32 = 0;
pub const DQ_AI205_MODEFIFO: u32 = 131072;
pub const DQ_AI205_MODECONT: u32 = 196608;
pub const DQ_AI205_TSCOPY: u32 = 262144;
pub const DQ_AI205_FIFO_COEF: u32 = 32;
pub const DQ_AI205_FIFO_DATA: u32 = 16;
pub const DQ_AI205_FIFO_MODE: u32 = 48;
pub const DQ_AI205_FIFO_GET_DATA: u32 = 16;
pub const DQ_AI205_CFILTMINENT: u32 = 3;
pub const DQ_AI205_CFILT00: u32 = 0;
pub const DQ_AI205_CFILT01: u32 = 1;
pub const DQ_AI205_CFILT02: u32 = 2;
pub const DQ_AI205_CFILT10: u32 = 16;
pub const DQ_AI205_CFILT11: u32 = 17;
pub const DQ_AI205_CFILT12: u32 = 18;
pub const DQ_AI205_CFILT20: u32 = 32;
pub const DQ_AI205_CFILT21: u32 = 33;
pub const DQ_AI205_CFILT22: u32 = 34;
pub const DQ_AI205_CFILT30: u32 = 48;
pub const DQ_AI205_CFILT31: u32 = 49;
pub const DQ_AI205_CFILT32: u32 = 50;
pub const DQ_AI205_DATAFIFO: u32 = 1;
pub const DQ_AI205_NAMELEN: u32 = 32;
pub const DQ_ONESTEP205: u32 = 7629;
pub const DQ_OFFSETD205: u32 = 1000000000;
pub const DQ_AI208_CHAN: u32 = 8;
pub const DQ_AI208_INFOSZ: u32 = 4096;
pub const DQ_AI208_BASE: u32 = 66000000;
pub const DQ_AI208_GAINS: u32 = 12;
pub const DQ_AI208_18_BIT_DATA_MASK: u32 = 262143;
pub const DQ_AI248_CHAN: u32 = 24;
pub const DQ_AI248_GAINS: u32 = 4;
pub const DQ_AI248_MAXCLFRQ: u32 = 7250;
pub const DQ_AI248_MAXCVFRQ: u32 = 7250;
pub const DQ_AI208_MAXCLFRQ: u32 = 20000;
pub const DQ_AI208_MAXCVFRQ: u32 = 20000;
pub const DQ_AI207_MAXCLFRQ: u32 = 16000;
pub const DQ_AI207_MAXCVFRQ: u32 = 16000;
pub const DQ_AI208_RS: u32 = 4990;
pub const DQ_AI208_SHUNT_NOMINAL: u32 = 200000;
pub const DQ_AI208_SHUNT_STEPS: u32 = 256;
pub const DQ_AI208_CALDACS: u32 = 4;
pub const DQ_AI208_VREFS: u32 = 2;
pub const DQ_AI208_MAX_CH_LIST: u32 = 32;
pub const DQ_AI248_MAX_CH_LIST: u32 = 32;
pub const DQ_AI208_SPAN: f64 = 20.0;
pub const DQ_AI208_OFFSET: f64 = 10.0;
pub const DQ_AI208_STEP: f64 = 0.00030518043793392844;
pub const DQ_AI208_STEP18: f64 = 0.00007629423635191479;
pub const DQ_AI208_GAINV: u32 = 1;
pub const DQ_AI208_GAINV_2: u32 = 2;
pub const DQ_AI208_GAINV_4: u32 = 4;
pub const DQ_AI208_GAINV_8: u32 = 8;
pub const DQ_AI208_GAINV_10: u32 = 10;
pub const DQ_AI208_GAINV_20: u32 = 20;
pub const DQ_AI208_GAINV_40: u32 = 40;
pub const DQ_AI208_GAINV_80: u32 = 80;
pub const DQ_AI208_GAINV_100: u32 = 100;
pub const DQ_AI208_GAINV_200: u32 = 200;
pub const DQ_AI208_GAINV_400: u32 = 400;
pub const DQ_AI208_GAINV_800: u32 = 800;
pub const DQ_AI208_STEP_2: f64 = 0.00015259021896696422;
pub const DQ_AI208_STEP_4: f64 = 0.00007629510948348211;
pub const DQ_AI208_STEP_8: f64 = 0.000038147554741741054;
pub const DQ_AI208_STEP_10: f64 = 0.000030518043793392844;
pub const DQ_AI208_STEP_20: f64 = 0.000015259021896696422;
pub const DQ_AI208_STEP_40: f64 = 0.000007629510948348211;
pub const DQ_AI208_STEP_80: f64 = 0.0000038147554741741054;
pub const DQ_AI208_STEP_100: f64 = 0.000003051804379339284;
pub const DQ_AI208_STEP_200: f64 = 0.000001525902189669642;
pub const DQ_AI208_STEP_400: f64 = 0.000000762951094834821;
pub const DQ_AI208_STEP_800: f64 = 0.0000003814755474174105;
pub const DQ_AI208_STEP18_2: f64 = 0.000038147118175957395;
pub const DQ_AI208_STEP18_4: f64 = 0.000019073559087978698;
pub const DQ_AI208_STEP18_8: f64 = 0.000009536779543989349;
pub const DQ_AI208_STEP18_10: f64 = 0.000007629423635191479;
pub const DQ_AI208_STEP18_20: f64 = 0.0000038147118175957395;
pub const DQ_AI208_STEP18_40: f64 = 0.0000019073559087978698;
pub const DQ_AI208_STEP18_80: f64 = 0.0000009536779543989349;
pub const DQ_AI208_STEP18_100: f64 = 0.0000007629423635191479;
pub const DQ_AI208_STEP18_200: f64 = 0.00000038147118175957397;
pub const DQ_AI208_STEP18_400: f64 = 0.00000019073559087978699;
pub const DQ_AI208_STEP18_800: f64 = 0.00000009536779543989349;
pub const DQ_AI208_OFFSET_2: f64 = 5.0;
pub const DQ_AI208_OFFSET_4: f64 = 2.5;
pub const DQ_AI208_OFFSET_8: f64 = 1.25;
pub const DQ_AI208_OFFSET_10: f64 = 1.0;
pub const DQ_AI208_OFFSET_20: f64 = 0.5;
pub const DQ_AI208_OFFSET_40: f64 = 0.25;
pub const DQ_AI208_OFFSET_80: f64 = 0.125;
pub const DQ_AI208_OFFSET_100: f64 = 0.1;
pub const DQ_AI208_OFFSET_200: f64 = 0.05;
pub const DQ_AI208_OFFSET_400: f64 = 0.025;
pub const DQ_AI208_OFFSET_800: f64 = 0.0125;
pub const DQ_AI248_SPAN: f64 = 36.0;
pub const DQ_AI248_OFFSET: f64 = 18.0;
pub const DQ_AI248_STEP18: f64 = 0.00013732962543344662;
pub const DQ_AI248_STEP18_10: f64 = 0.000013732962543344663;
pub const DQ_AI248_STEP18_100: f64 = 0.0000013732962543344662;
pub const DQ_AI248_STEP18_1000: f64 = 0.00000013732962543344663;
pub const DQ_AI248_OFFSET_10: f64 = 1.8;
pub const DQ_AI248_OFFSET_100: f64 = 0.18;
pub const DQ_AI248_OFFSET_1000: f64 = 0.018;
pub const DQ_AI248_230_SPAN: f64 = 64.0;
pub const DQ_AI248_230_OFFSET: f64 = 32.0;
pub const DQ_AI248_230_STEP18: f64 = 0.00024414155632612733;
pub const DQ_AI248_230_STEP18_10: f64 = 0.000024414155632612734;
pub const DQ_AI248_230_STEP18_100: f64 = 0.000002441415563261273;
pub const DQ_AI248_230_STEP18_1000: f64 = 0.0000002441415563261273;
pub const DQ_AI248_230_OFFSET_10: f64 = 3.2;
pub const DQ_AI248_230_OFFSET_100: f64 = 0.32;
pub const DQ_AI248_230_OFFSET_1000: f64 = 0.032;
pub const DQ_AI208_GAIN_1: u32 = 0;
pub const DQ_AI208_GAIN_2: u32 = 1;
pub const DQ_AI208_GAIN_4: u32 = 2;
pub const DQ_AI208_GAIN_8: u32 = 3;
pub const DQ_AI208_GAIN_10: u32 = 4;
pub const DQ_AI208_GAIN_20: u32 = 5;
pub const DQ_AI208_GAIN_40: u32 = 6;
pub const DQ_AI208_GAIN_80: u32 = 7;
pub const DQ_AI208_GAIN_100: u32 = 8;
pub const DQ_AI208_GAIN_200: u32 = 9;
pub const DQ_AI208_GAIN_400: u32 = 10;
pub const DQ_AI208_GAIN_800: u32 = 11;
pub const DQ_AI248_GAIN_1: u32 = 0;
pub const DQ_AI248_GAIN_10: u32 = 1;
pub const DQ_AI248_GAIN_100: u32 = 2;
pub const DQ_AI248_GAIN_1000: u32 = 3;
pub const DQ_AI248_DEFAULT_OFFS: u32 = 131072;
pub const DQ_AI248_DEFAULT_GAIN: u32 = 255590;
pub const DQ_AI248_LIMIT_OFFS: u32 = 4096;
pub const DQ_AI248_LIMIT_GAIN: u32 = 8192;
pub const DQ_AI208_DEFAULT_OFFS: u32 = 131072;
pub const DQ_AI208_DEFAULT_GAIN: u32 = 255590;
pub const DQ_AI207_CHAN: u32 = 16;
pub const DQL_FE207_AGND: u32 = 32;
pub const DQL_FE207_CJC: u32 = 33;
pub const DQL_FE207_REF: u32 = 34;
pub const DQL_FE248_CJC: u32 = 24;
pub const DQL_FE248_USER_AGND: u32 = 25;
pub const DQL_FE248_VREF: u32 = 26;
pub const DQL_FE248_NULL_AGND: u32 = 27;
pub const DQL_FE208_SPSM: u32 = 0;
pub const DQL_FE208_PPG: u32 = 16;
pub const DQL_FE208_PSPG: u32 = 32;
pub const DQL_FE208_PSSM: u32 = 48;
pub const DQL_FE208_REF_A: u32 = 62;
pub const DQL_FE208_AGND_A: u32 = 63;
pub const DQL_FE208_SCUR: u32 = 64;
pub const DQL_FE208_AGND: u32 = 80;
pub const DQL_FE208_REF: u32 = 81;
pub const DQL_ISTR208_GEN7: u32 = 32768;
pub const DQL_ISTR208_GEN6: u32 = 16384;
pub const DQL_ISTR208_GEN5: u32 = 8192;
pub const DQL_ISTR208_GEN4: u32 = 4096;
pub const DQL_ISTR208_GEN3: u32 = 2048;
pub const DQL_ISTR208_GEN2: u32 = 1024;
pub const DQL_ISTR208_GEN1: u32 = 512;
pub const DQL_ISTR208_GEN0: u32 = 256;
pub const DQL_ISTR208_18BIT: u32 = 32;
pub const DQL_ISTR208_PD: u32 = 16;
pub const DQL_ISTR208_RESET: u32 = 8;
pub const DQL_ISTR208_LED: u32 = 4;
pub const DQL_ISTR208_ADCEN: u32 = 2;
pub const DQL_ISTR208_RSV0: u32 = 1;
pub const DQ_AI208_ALL_EXCITED: u32 = 524288;
pub const DQ_AI208_MODESCAN: u32 = 0;
pub const DQ_AI208_MODEFIFO: u32 = 131072;
pub const DQ_AI208_MODECONT: u32 = 196608;
pub const DQ_AI208_FIFO_GET_DATA: u32 = 16;
pub const DQL_IOCTL208_SET_SSPERCHAN: u32 = 1;
pub const DQL_IOCTL208_SET_EXC_A: u32 = 2;
pub const DQL_IOCTL208_SET_EXC_B: u32 = 3;
pub const DQL_IOCTL208_SET_EXC_CH: u32 = 4;
pub const DQL_IOCTL208_SET_Ra: u32 = 5;
pub const DQL_IOCTL208_SET_Rb: u32 = 6;
pub const DQIOCTL_248_AUTOZERO: u32 = 8;
pub const DQL_IOCTL208_READ_SS: u32 = 10;
pub const DQL_IOCTL208_READ_PP: u32 = 11;
pub const DQL_IOCTL208_READ_PS: u32 = 12;
pub const DQL_IOCTL208_READ_AGND: u32 = 13;
pub const DQL_IOCTL208_READ_REF: u32 = 14;
pub const DQL_IOCTL208_READ_Rs: u32 = 15;
pub const DQL_IOCTL208_READ_Rx: u32 = 16;
pub const DQL_IOCTL208_READ_Ra: u32 = 17;
pub const DQL_IOCTL208_READ_Rb: u32 = 18;
pub const DQL_IOCTL208_READ_5k: u32 = 19;
pub const DQL_IOCTL208_READ_PSM: u32 = 20;
pub const DQL_IOCTL208_READ_5kB: u32 = 21;
pub const DQ_AI208_NAMELEN: u32 = 20;
pub const DQ_AI207_NAMELEN: u32 = 14;
pub const DQ_AI248_NAMELEN: u32 = 14;
pub const DQ_AI211_CHAN: u32 = 4;
pub const DQ_AI211_INFOSZ: u32 = 4096;
pub const DQ_AI211_BASE: u32 = 66000000;
pub const DQ_AI211_BASE_24MHZ: u32 = 24000000;
pub const DQ_AI211_BASE_30MHZ: u32 = 30720000;
pub const DQ_AI211_DEFDECR: u32 = 0;
pub const DQ_AI211_DEFTAPS: u32 = 254;
pub const DQ_AI211_MAXDECR: u32 = 65536;
pub const DQ_AI211_MAXTAPS: u32 = 256;
pub const DQ_AI211_COEFF_WIDTH: u32 = 20;
pub const DQ_AI211_FIR_TOTAL: u32 = 524288;
pub const DQ_AI211_ADC_CLOCK_FACTOR: u32 = 8;
pub const DQ_AI211_MAX_EXTERNAL_CLOCK: u32 = 1000000;
pub const DQ_AI211_PLL_CLKDIV: u32 = 31;
pub const DQ_AI211_SPAN_V: f64 = 50.0;
pub const DQ_AI211_SPAN_H: u32 = 16777215;
pub const DQ_AI211_STEP: f64 = 0.0000029802324164052258;
pub const DQ_AI211_CALDACS: u32 = 8;
pub const DQ_AI211_SEL_CHAN_0: u32 = 1;
pub const DQ_AI211_SEL_CHAN_1: u32 = 2;
pub const DQ_AI211_SEL_CHAN_2: u32 = 4;
pub const DQ_AI211_SEL_CHAN_3: u32 = 8;
pub const DQ_AI211_SEL_CHAN_ALL: u32 = 15;
pub const DQ_AI211_MODESCAN: u32 = 0;
pub const DQ_AI211_MODEFIFO: u32 = 131072;
pub const DQ_AI211_MODECONT: u32 = 196608;
pub const DQ_AI211_FIR_SET_DEFAULT: u32 = 8;
pub const DQ_AI211_FIR_COEFF_LOAD: u32 = 4;
pub const DQ_AI211_FIR_SET_DECIMATION_RATE: u32 = 2;
pub const DQ_AI211_FIR_ENABLE: u32 = 1;
pub const DQ_AI211_FIR_DISABLE: u32 = 0;
pub const DQ_AI211_FIRFIRST_DISABLE: u32 = 16;
pub const DQ_AI211_FIRFIRST_ENABLE: u32 = 0;
pub const DQ_AI211_FIR_SET_SKIP: u32 = 32;
pub const DQAI211_CFGCH_DEFAULTSET: u32 = 2048;
pub const DQAI211_BIASDRIVESET: u32 = 1;
pub const DQAI211_BIASONOFFSET: u32 = 2;
pub const DQAI211_COMPHISET: u32 = 4;
pub const DQAI211_COMPLOSET: u32 = 8;
pub const DQAI211_ALARMCTRLSET: u32 = 16;
pub const DQAI211_HPFSET: u32 = 32;
pub const DQAI211_OFFSETSET: u32 = 64;
pub const DQAI211_ANAFILTSET: u32 = 128;
pub const DQAI211_MAINENBSET: u32 = 256;
pub const DQAI211_SECENBSSET: u32 = 512;
pub const DQAI211_SECNSET: u32 = 1024;
pub const DQ_211_BIAS_ON: u32 = 1;
pub const DQ_211_BIAS_OFF: u32 = 0;
pub const DQ_211_MAX_BIAS: u32 = 255;
pub const DQ_211_BIAS_NO_CAL: u32 = 65024;
pub const DQ_211_BIAS_NO_CAL_MAX: u32 = 65279;
pub const DQ_211_COMP_HI_STD: u32 = 4000;
pub const DQ_211_COMP_HI_DEFAULT: u32 = 4095;
pub const DQ_211_COMP_LO_STD: u32 = 192;
pub const DQ_211_COMP_LO_DEFAULT: u32 = 0;
pub const DQ_211_ALARM_ON: u32 = 3;
pub const DQ_211_ALARM_OFF: u32 = 0;
pub const DQ_211_ALARM_RED: u32 = 4;
pub const DQ_211_ALARM_GREEN: u32 = 8;
pub const DQ_211_ALARM_ORANGE: u32 = 12;
pub const DQ_211_HPF_DC: u32 = 1;
pub const DQ_211_HPF_POINT1_HZ: u32 = 2;
pub const DQ_211_HPF_1_HZ: u32 = 4;
pub const DQ_211_HPF_10_HZ: u32 = 8;
pub const DQ_211_OFFSET_TEST_ON: u32 = 1;
pub const DQ_211_OFFSET_TEST_OFF: u32 = 0;
pub const DQ_211_ANALOG_FILTER_ON: u32 = 1;
pub const DQ_211_ANALOG_FILTER_OFF: u32 = 0;
pub const DQ_211_MAIN_FLOW_OFF: u32 = 0;
pub const DQ_211_MAIN_FLOW_ON: u32 = 1;
pub const DQ_211_SEC_ENB_OFF: u32 = 0;
pub const DQ_211_SEC_ENB_LED: u32 = 1;
pub const DQ_211_SEC_N_STD: u32 = 6000;
pub const DQ_211_SEC_N_MIN: u32 = 2400;
pub const DQAI211_CFGLAYER_DEFAULTSET: u32 = 1;
pub const DQAI211_CLKSRCSET: u32 = 2;
pub const DQAI211_CLKDIVSET: u32 = 4;
pub const DQAI211_FMTRSET: u32 = 8;
pub const DQAI211_AVGFACTORSET: u32 = 16;
pub const DQAI211_DECFACTORSET: u32 = 256;
pub const DQAI211_FIR_BY_DECFACTOR: u32 = 32;
pub const DQAI211_DC_DC_ON: u32 = 64;
pub const DQAI211_DC_DC_OFF: u32 = 128;
pub const DQ_211_CLK_66MHZ: u32 = 0;
pub const DQ_211_CLK_24MHZ: u32 = 16;
pub const DQ_211_CLK_30_72MHZ: u32 = 32;
pub const DQ_211_CLK_SYNC2: u32 = 24;
pub const DQ_211_CLK_SYNC0_BUS: u32 = 8;
pub const DQ_211_CLK_SYNC1_BUS: u32 = 9;
pub const DQ_211_CLK_SYNC2_BUS: u32 = 10;
pub const DQ_211_CLK_SYNC3_BUS: u32 = 11;
pub const DQ_211_CLK_DIV_MAX: u32 = 1023;
pub const DQ_211_FMTR_NORMAL: u32 = 0;
pub const DQ_211_FMTR_REDUCED: u32 = 1;
pub const DQ_AI211_SPAN: f64 = 50.0;
pub const DQ_AI211_OFFSET: f64 = 25.0;
pub const DQ_AI211_STEP16: f64 = 0.0007629510948348211;
pub const DQ_AI211_STEP_2: f64 = 0.0000014901162082026129;
pub const DQ_AI211_STEP_5: f64 = 0.0000005960464832810452;
pub const DQ_AI211_STEP_10: f64 = 0.0000002980232416405226;
pub const DQ_AI211_OFFSET_2: f64 = 12.5;
pub const DQ_AI211_OFFSET_5: f64 = 5.0;
pub const DQ_AI211_OFFSET_10: f64 = 2.5;
pub const DQIOCTL_SET211CHANNEL: u32 = 8;
pub const DQIOCTL_SET211LAYER: u32 = 9;
pub const DQIOCTL_GET211_CFGAMG: u32 = 16;
pub const DQ_AI211_MAXAVG: u32 = 15;
pub const DQ_AI211_MAXDEC: u32 = 16;
pub const DQ_AI211_MAXCVFRQ: u32 = 125000;
pub const DQ_AI211_ONE_PER_SCAN_CVFRQ: u32 = 120000;
pub const DQ_AI211_MINCVFRQ_AVG: u32 = 62500;
pub const DQ_AI211_MIN_SAMPLE_RATE: f64 = 1.0;
pub const DQ_AI211_DMAP_FREQ: f64 = 3900.0;
pub const DQ_AI211_CLID_FMTR0_CHN0: u32 = 805306368;
pub const DQ_AI211_CLID_FMTR0_INFOO: u32 = 134217728;
pub const DQ_AI211_CLID_FMTR0_INFOU: u32 = 67108864;
pub const DQ_AI211_CLID_FMTR0_SMSB0: u32 = 50331648;
pub const DQ_AI211_CLID_FMTR0_ADCD0: u32 = 1;
pub const DQ_AI211_CFGAMG_DEFAULT_STATE: u32 = 522;
pub const DQ_AI211_CFGAMG_FMTR: u32 = 65536;
pub const DQ_AI211_CFGAMG_L1COMP: u32 = 32768;
pub const DQ_AI211_CFGAMG_L1STATE: u32 = 16384;
pub const DQ_AI211_CFGAMG_L0COMP: u32 = 8192;
pub const DQ_AI211_CFGAMG_L0STATE: u32 = 4096;
pub const DQ_AI211_CFGAMG_GAIN_MASK: u32 = 3072;
pub const DQ_AI211_CFGAMG_BW_10HZ: u32 = 512;
pub const DQ_AI211_CFGAMG_BW_1HZ: u32 = 256;
pub const DQ_AI211_CFGAMG_BW_0_1HZ: u32 = 128;
pub const DQ_AI211_CFGAMG_BW_DC: u32 = 64;
pub const DQ_AI211_CFGAMG_OFFSET: u32 = 32;
pub const DQ_AI211_CFGAMG_FLOFF: u32 = 16;
pub const DQ_AI211_CFGAMG_IDIS: u32 = 8;
pub const DQ_AI211_CFGAMG_S_ADCEN: u32 = 4;
pub const DQ_AI211_CFGAMG_M_ADCENFEN: u32 = 2;
pub const DQ_AI211_GAINS: u32 = 4;
pub const DQ_AI211_GAIN_1: u32 = 0;
pub const DQ_AI211_GAIN_2: u32 = 1;
pub const DQ_AI211_GAIN_5: u32 = 2;
pub const DQ_AI211_GAIN_10: u32 = 3;
pub const DQ_AI211_CAL_SETS: u32 = 8;
pub const DQ_AI211_SETS: u32 = 4;
pub const DQ_AI211_SETS1: u32 = 4;
pub const DQ_AI211_CAL_SETS1: u32 = 4;
pub const DQ_AI211_CAL_SET_0: u32 = 0;
pub const DQ_AI211_CAL_SET_1: u32 = 1;
pub const DQ_AI211_CAL_SET_2: u32 = 2;
pub const DQ_AI211_CAL_SET_3: u32 = 3;
pub const DQ_AI211_CAL_SET_4: u32 = 4;
pub const DQ_AI211_CAL_SET_5: u32 = 5;
pub const DQ_AI211_CAL_SET_6: u32 = 6;
pub const DQ_AI211_CAL_SET_7: u32 = 7;
pub const DQ_AI211_NAMELEN: u32 = 32;
pub const DQ_AI212_CHAN: u32 = 12;
pub const DQ_AI222_CHAN: u32 = 12;
pub const DQ_AI222_CL_MAX_SIZE: u32 = 13;
pub const DQ_AI212_CHANSVC: u32 = 32;
pub const DQ_AI212_INFOSZ: u32 = 4096;
pub const DQ_AI212_BASE: u32 = 66000000;
pub const DQ_AI212_GAINS: u32 = 7;
pub const DQ_AI222_GAINS: u32 = 4;
pub const DQ_AI212_BIAS_ON_FLAG: u32 = 64;
pub const DQ_AI212_BURNOUT_ON_FLAG: u32 = 128;
pub const DQ_AI212_CL_GAIN_MASK: u32 = 1792;
pub const DQ_AI212_SEL_CHAN_ALL: u32 = 4095;
pub const DQ_AI222_CL_MUX_MASK: u32 = 30720;
pub const DQ_AI212_SPAN: f64 = 4.096;
pub const DQ_AI212_OFFSET: f64 = 2.048;
pub const DQ_AI212_STEP: f64 = 0.0000002441406395519161;
pub const DQ_AI212_STEP_64: f64 = 0.000000003814697492998689;
pub const DQ_AI212_STEP_32: f64 = 0.000000007629394985997378;
pub const DQ_AI212_STEP_16: f64 = 0.000000015258789971994755;
pub const DQ_AI212_STEP_8: f64 = 0.00000003051757994398951;
pub const DQ_AI212_STEP_4: f64 = 0.00000006103515988797902;
pub const DQ_AI212_STEP_2: f64 = 0.00000012207031977595804;
pub const DQ_AI212_OFFSET_64: f64 = 0.032;
pub const DQ_AI212_OFFSET_32: f64 = 0.064;
pub const DQ_AI212_OFFSET_16: f64 = 0.128;
pub const DQ_AI212_OFFSET_8: f64 = 0.256;
pub const DQ_AI212_OFFSET_4: f64 = 0.512;
pub const DQ_AI212_OFFSET_2: f64 = 1.024;
pub const DQ_AI212_AIN1_OFFSET: u32 = 12;
pub const DQ_AI212_I2C_CJC_CHANS: u32 = 6;
pub const DQ_AI212_DCJC_FIRST: u32 = 24;
pub const DQ_AI212_DCJC_LAST: u32 = 29;
pub const DQ_AI212_I2CCJC_STEPS_PER_DEGREE: f64 = 128.0;
pub const DQ_AI212_DCJC_NO_DATA: f64 = -999.0;
pub const DQ_AI212_DCJC_NO_DATA_HEX: u32 = 4294959304;
pub const DQ_AI212_STP_U1: u32 = 24;
pub const DQ_AI212_STP_U2: u32 = 25;
pub const DQ_AI212_GAIN_1: u32 = 0;
pub const DQ_AI212_GAIN_2: u32 = 1;
pub const DQ_AI212_GAIN_4: u32 = 2;
pub const DQ_AI212_GAIN_8: u32 = 3;
pub const DQ_AI212_GAIN_16: u32 = 4;
pub const DQ_AI212_GAIN_32: u32 = 5;
pub const DQ_AI212_GAIN_64: u32 = 6;
pub const DQ_AI222_GAIN_1: u32 = 0;
pub const DQ_AI222_GAIN_4: u32 = 1;
pub const DQ_AI222_GAIN_16: u32 = 2;
pub const DQ_AI222_GAIN_32: u32 = 3;
pub const DQ_AI212_FAIL_FLAG: u32 = 16777216;
pub const DQ_AI212_FAIL_VALUE: f64 = -999.9;
pub const DQ_AI212_SWITCHTO_10SPS: f64 = 4.9;
pub const DQ_AI212_SWITCHTO_20SPS: f64 = 9.9;
pub const DQ_AI212_SWITCHTO_40SPS: f64 = 19.7;
pub const DQ_AI212_SWITCHTO_80SPS: f64 = 39.4;
pub const DQ_AI212_SWITCHTO_160SPS: f64 = 78.3;
pub const DQ_AI212_SWITCHTO_320SPS: f64 = 140.1;
pub const DQ_AI212_SWITCHTO_640SPS: f64 = 302.3;
pub const DQ_AI212_SWITCHTO_1000SPS: f64 = 578.1;
pub const DQ_AI212_SWITCHTO_2000SPS: f64 = 860.9;
pub const DQ_AI212_MAXCLFRQ: u32 = 1800;
pub const DQ_AI212_MAXCVFRQ: u32 = 1800;
pub const DQ_AI222_MAXCLFRQ: u32 = 150;
pub const DQ_AI222_MAXCVFRQ: u32 = 150;
pub const DQ_AI212_CALDACS: u32 = 168;
pub const DQ_AI212_VREFS: u32 = 2;
pub const DQL_IOCTL212_SET_DCJC_RATE: u32 = 1;
pub const DQ_AI212_DCJC_MIN_RATE: f64 = 0.25;
pub const DQ_AI212_DCJC_DEFAULT_RATE: f64 = 4.0;
pub const DQ_AI212_DCJC_MAX_RATE: f64 = 1500.0;
pub const DQL_IOCTL212_SET_DCJC_AVERAGE: u32 = 2;
pub const DQL_IOCTL212_SET_BURNOUT: u32 = 4;
pub const DQ_AI212_BURNOUT_SRC_OFF: u32 = 0;
pub const DQ_AI212_BURNOUT_SRC_HALFUA: u32 = 64;
pub const DQ_AI212_BURNOUT_SRC_2UA: u32 = 128;
pub const DQ_AI212_BURNOUT_SRC_10UA: u32 = 192;
pub const DQ_AI212_BURNOUT_MASK: u32 = 192;
pub const DQL_IOCTL222_SET_PARAMS: u32 = 3;
pub const DQ_AI222_MUX_C_D: u32 = 1;
pub const DQ_AI222_MUX_B_D: u32 = 2;
pub const DQ_AI222_MUX_A_D: u32 = 3;
pub const DQ_AI222_MUX_D_C: u32 = 4;
pub const DQ_AI222_MUX_B_C: u32 = 6;
pub const DQ_AI222_MUX_A_C: u32 = 7;
pub const DQ_AI222_MUX_D_B: u32 = 8;
pub const DQ_AI222_MUX_C_B: u32 = 9;
pub const DQ_AI222_MUX_A_B: u32 = 11;
pub const DQ_AI222_MUX_D_A: u32 = 12;
pub const DQ_AI222_MUX_C_A: u32 = 13;
pub const DQ_AI222_MUX_B_A: u32 = 14;
pub const DQ_AI222_MUX_B_B: u32 = 15;
pub const DQ_AI222_EXC_OFF: u32 = 204;
pub const DQ_AI222_EXC_A_B_ON: u32 = 50;
pub const DQ_AI222_EXC_B_ON: u32 = 194;
pub const DQ_AI222_EXC_C_ON: u32 = 193;
pub const DQ_AI222_IMAG_OFF: u32 = 8;
pub const DQ_AI222_IMAG_50U: u32 = 9;
pub const DQ_AI222_IMAG_100U: u32 = 10;
pub const DQ_AI222_IMAG_250U: u32 = 11;
pub const DQ_AI222_IMAG_500U: u32 = 12;
pub const DQ_AI222_IMAG_750U: u32 = 13;
pub const DQ_AI222_IMAG_1000U: u32 = 14;
pub const DQ_AI222_IMAG_1500U: u32 = 15;
pub const DQ_AI222_IMAG: u32 = 8;
pub const DQ_AI222_IMAG_CAL: u32 = 128;
pub const DQ_AI222_IMAG_DEF_OFF: u32 = 0;
pub const DQ_AI222_IMAG_DEF_50U: u32 = 50;
pub const DQ_AI222_IMAG_DEF_100U: u32 = 100;
pub const DQ_AI222_IMAG_DEF_250U: u32 = 250;
pub const DQ_AI222_IMAG_DEF_500U: u32 = 500;
pub const DQ_AI222_IMAG_DEF_750U: u32 = 750;
pub const DQ_AI222_IMAG_DEF_1000U: u32 = 1000;
pub const DQ_AI222_IMAG_DEF_1500U: u32 = 1500;
pub const DQ_AI222_VREF_ON_REF0: u32 = 32;
pub const DQ_AI222_VREF_ON_ONBD_SEL: u32 = 48;
pub const DQ_AI222_RTD_2_WIRE_40K: u32 = 4194306;
pub const DQ_AI222_RTD_3_WIRE_40K: u32 = 4194307;
pub const DQ_AI222_RTD_4_WIRE_40K: u32 = 4194308;
pub const DQ_AI222_RTD_2_WIRE_5K: u32 = 327682;
pub const DQ_AI222_RTD_3_WIRE_5K: u32 = 327683;
pub const DQ_AI222_RTD_4_WIRE_5K: u32 = 327684;
pub const DQ_AI222_RTD_2_WIRE_1_25K: u32 = 75010;
pub const DQ_AI222_RTD_3_WIRE_1_25K: u32 = 75011;
pub const DQ_AI222_RTD_4_WIRE_1_25K: u32 = 75012;
pub const DQ_AI222_RTD_2_WIRE_312: u32 = 12578;
pub const DQ_AI222_RTD_3_WIRE_312: u32 = 12579;
pub const DQ_AI222_RTD_4_WIRE_312: u32 = 12580;
pub const DQ_AI222_RTD_2_WIRE_156: u32 = 5474;
pub const DQ_AI222_RTD_3_WIRE_156: u32 = 5475;
pub const DQ_AI222_RTD_4_WIRE_156: u32 = 5476;
pub const DQ_AI222_FULL_SCALE: f64 = 16777215.0;
pub const DQ_AI212_DEFAULT_OFFS_CAL: u32 = 0;
pub const DQ_AI212_DEFAULT_GAIN_CAL: u32 = 4194304;
pub const DQ_AI222_DEFAULT_OFFS_CAL: u32 = 0;
pub const DQ_AI222_DEFAULT_GAIN1_CAL: u32 = 4194304;
pub const DQ_AI222_DEFAULT_GAIN2_CAL: u32 = 4325376;
pub const DQ_AI222_DEFAULT_RREF_CAL: f64 = 4990.0;
pub const DQ_AI222_DEFAULT_VREF_CAL: f64 = 2.048;
pub const DQ_AI212_MODESCAN: u32 = 0;
pub const DQ_AI212_MODEFIFO: u32 = 131072;
pub const DQ_AI212_MODECONT: u32 = 196608;
pub const DQ_AI212_FIFO_GET_DATA: u32 = 16;
pub const DQ_AI212_NAMELEN: u32 = 16;
pub const DQ_AI217_CHAN: u32 = 16;
pub const DQ_AI218_CHAN: u32 = 8;
pub const DQ_AI228_CHAN: u32 = 8;
pub const DQ_AI217_CJC_CHAN: u32 = 1;
pub const DQ_AI218_CJC_CHAN: u32 = 0;
pub const DQ_AI228_CJC_CHAN: u32 = 0;
pub const DQ_AI217_CJC_OFFSET: u32 = 16;
pub const DQ_AI217_CJC_NON_AVG: u32 = 16;
pub const DQ_AI217_CJC_AVG: u32 = 32;
pub const DQ_AI217_PGA_STATUS_OFFSET: u32 = 46;
pub const DQ_AI217_PGA_DATA_OFFSET: u32 = 48;
pub const DQ_AI217_PLL_LOGIC_VER: u32 = 4272;
pub const DQ_AI217_FIR_BANKS: u32 = 4;
pub const DQ_AI217_INFOSZ: u32 = 4096;
pub const DQ_AI217_BASE: u32 = 66000000;
pub const DQ_AI217_MODESCAN: u32 = 0;
pub const DQ_AI217_MODEFIFO: u32 = 131072;
pub const DQ_AI218_MODEFIFO: u32 = 131072;
pub const DQ_AI219_MODEFIFO: u32 = 131072;
pub const DQ_AI217_MODECONT: u32 = 196608;
pub const DQ_AI217_DEFTAPS: u32 = 128;
pub const DQ_AI217_MAXDECR: u32 = 65536;
pub const DQ_AI217_MAXTAPS: u32 = 512;
pub const DQ_AI217_1_MAXTAPS: u32 = 128;
pub const DQ_AI217_803_MAXTAPS: u32 = 512;
pub const DQ_AI218_1_MAXTAPS: u32 = 256;
pub const DQ_AI219_1_LE120K_MAXTAPS: u32 = 256;
pub const DQ_AI219_1_GT120K_MAXTAPS: u32 = 128;
pub const DQ_AI228_300_MAXTAPS: u32 = 256;
pub const DQ_AI217_NEW_BDATA: u32 = 2147483648;
pub const DQ_AI218_DIO_0: u32 = 268435456;
pub const DQ_AI217_ADCDATAE: u32 = 23;
pub const DQ_AI217_ADCDATAS: u32 = 0;
pub const DQ_AI217_COEFF_WIDTH: u32 = 24;
pub const DQ_AI217_FIR_TOTAL: u32 = 8388608;
pub const DQ_AI217_FIR_MOV_AVG_TAPS: u32 = 128;
pub const DQ_AI218_FIR_MOV_AVG_TAPS: u32 = 256;
pub const DQ_AI217_ADC_CLOCK_FACTOR: f64 = 8.0;
pub const DQ_AI217_PLL_CLKDIV: u32 = 33;
pub const DQ_AI217_804_CLOCK_FACTOR: f64 = 32.0;
pub const DQ_AI217_804_PLL_CLKDIV: u32 = 33;
pub const DQ_AI219_ADC_CLOCK_FACTOR: f64 = 1.0;
pub const DQ_AI219_PLL_CLKDIV: u32 = 264;
pub const DQ_AI217_SPAN_V: f64 = 20.0;
pub const DQ_AI217_SPAN_H: u32 = 16777215;
pub const DQ_AI217_STEP: f64 = 0.0000011920929665620903;
pub const DQ_AI217_020_SPAN_I: f64 = 0.2;
pub const DQ_AI217_020_STEP: f64 = 0.000000011920929665620903;
pub const DQ_AI228_SPAN_V: f64 = 280.0;
pub const DQ_AI228_SPAN_H: u32 = 16777215;
pub const DQ_AI228_STEP: f64 = 0.000016689301531869266;
pub const DQ_AI228_300_SPAN_V: f64 = 600.0;
pub const DQ_AI228_300_SPAN_H: u32 = 16777215;
pub const DQ_AI228_300_STEP: f64 = 0.00003576278899686271;
pub const DQ_AI217_SEL_QFIR_A: u32 = 1;
pub const DQ_AI217_SEL_QFIR_B: u32 = 2;
pub const DQ_AI217_SEL_QFIR_C: u32 = 4;
pub const DQ_AI217_SEL_QFIR_D: u32 = 8;
pub const DQ_AI217_SEL_QFIR_ALL: u32 = 15;
pub const DQ_AI218_SEL_DFIR_A: u32 = 1;
pub const DQ_AI218_SEL_DFIR_B: u32 = 2;
pub const DQ_AI218_SEL_DFIR_C: u32 = 4;
pub const DQ_AI218_SEL_DFIR_D: u32 = 8;
pub const DQ_AI218_SEL_DFIR_ALL: u32 = 15;
pub const DQ_AI217_FIR_SET_INDEX: u32 = 128;
pub const DQ_AI217_FIR_MAX_INDEX: u32 = 9;
pub const DQ_AI217_FIR_SET_DEFAULT: u32 = 8;
pub const DQ_AI217_FIR_COEFF_LOAD: u32 = 4;
pub const DQ_AI217_FIR_SET_DECIMATION_RATE: u32 = 2;
pub const DQ_AI217_FIR_ENABLE: u32 = 1;
pub const DQ_AI217_FIR_DISABLE: u32 = 0;
pub const DQ_AI217_FIR_CAL_ON: u32 = 512;
pub const DQ_AI217_FIR_CAL_OFF: u32 = 1024;
pub const DQ_AI217_SPAN: f64 = 20.0;
pub const DQ_AI217_OFFSET: f64 = 10.0;
pub const DQ_AI217_STEP_2: f64 = 0.0000005960464832810452;
pub const DQ_AI217_STEP_4: f64 = 0.0000002980232416405226;
pub const DQ_AI217_STEP_4_CJC: f64 = 0.0000002980232416405226;
pub const DQ_AI217_STEP_8: f64 = 0.0000001490116208202613;
pub const DQ_AI217_STEP_16: f64 = 0.00000007450581041013064;
pub const DQ_AI217_STEP_32: f64 = 0.00000003725290520506532;
pub const DQ_AI217_STEP_64: f64 = 0.00000001862645260253266;
pub const DQ_AI217_OFFSET_2: f64 = 5.0;
pub const DQ_AI217_OFFSET_4: f64 = 2.5;
pub const DQ_AI217_OFFSET_4_CJC: f64 = 0.0;
pub const DQ_AI217_OFFSET_8: f64 = 1.25;
pub const DQ_AI217_OFFSET_16: f64 = 0.625;
pub const DQ_AI217_OFFSET_32: f64 = 0.3125;
pub const DQ_AI217_OFFSET_64: f64 = 0.15625;
pub const DQ_AI217_020_SPAN: f64 = 0.2;
pub const DQ_AI217_020_OFFSET: f64 = 0.1;
pub const DQ_AI217_020_STEP_2: f64 = 0.000000005960464832810452;
pub const DQ_AI217_020_STEP_4: f64 = 0.000000002980232416405226;
pub const DQ_AI217_020_STEP_8: f64 = 0.000000001490116208202613;
pub const DQ_AI217_020_STEP_16: f64 = 0.0000000007450581041013065;
pub const DQ_AI217_020_STEP_32: f64 = 0.00000000037252905205065323;
pub const DQ_AI217_020_STEP_64: f64 = 0.00000000018626452602532662;
pub const DQ_AI217_020_OFFSET_2: f64 = 0.05;
pub const DQ_AI217_020_OFFSET_4: f64 = 0.025;
pub const DQ_AI217_020_OFFSET_8: f64 = 0.0125;
pub const DQ_AI217_020_OFFSET_16: f64 = 0.00625;
pub const DQ_AI217_020_OFFSET_32: f64 = 0.003125;
pub const DQ_AI217_020_OFFSET_64: f64 = 0.0015625;
pub const DQ_AI228_SPAN: f64 = 280.0;
pub const DQ_AI228_OFFSET: f64 = 140.0;
pub const DQ_AI228_STEP_2: f64 = 0.000008344650765934633;
pub const DQ_AI228_STEP_4: f64 = 0.0000041723253829673165;
pub const DQ_AI228_STEP_8: f64 = 0.0000020861626914836583;
pub const DQ_AI228_STEP_16: f64 = 0.0000010430813457418291;
pub const DQ_AI228_STEP_32: f64 = 0.0000005215406728709146;
pub const DQ_AI228_STEP_64: f64 = 0.0000002607703364354573;
pub const DQ_AI228_OFFSET_2: f64 = 70.0;
pub const DQ_AI228_OFFSET_4: f64 = 35.0;
pub const DQ_AI228_OFFSET_8: f64 = 17.5;
pub const DQ_AI228_OFFSET_16: f64 = 8.75;
pub const DQ_AI228_OFFSET_32: f64 = 4.375;
pub const DQ_AI228_OFFSET_64: f64 = 2.1875;
pub const DQ_AI228_300_SPAN: f64 = 600.0;
pub const DQ_AI228_300_OFFSET: f64 = 300.0;
pub const DQ_AI228_300_STEP_2: f64 = 0.000017881394498431356;
pub const DQ_AI228_300_STEP_4: f64 = 0.000008940697249215678;
pub const DQ_AI228_300_STEP_8: f64 = 0.000004470348624607839;
pub const DQ_AI228_300_STEP_16: f64 = 0.0000022351743123039194;
pub const DQ_AI228_300_STEP_32: f64 = 0.0000011175871561519597;
pub const DQ_AI228_300_STEP_64: f64 = 0.0000005587935780759799;
pub const DQ_AI228_300_OFFSET_2: f64 = 150.0;
pub const DQ_AI228_300_OFFSET_4: f64 = 75.0;
pub const DQ_AI228_300_OFFSET_8: f64 = 37.5;
pub const DQ_AI228_300_OFFSET_16: f64 = 18.75;
pub const DQ_AI228_300_OFFSET_32: f64 = 9.375;
pub const DQ_AI228_300_OFFSET_64: f64 = 4.6875;
pub const DQ_AI218_828_SPAN_V: f64 = 600.0;
pub const DQ_AI218_828_SPAN_H: f64 = 16777215.0;
pub const DQ_AI218_828_STEP: f64 = 0.00003576278899686271;
pub const DQ_AI218_828_SPAN: f64 = 600.0;
pub const DQ_AI218_828_OFFSET: f64 = 300.0;
pub const DQ_AI218_828_STEP_2: f64 = 0.000017881394498431356;
pub const DQ_AI218_828_STEP_4: f64 = 0.000008940697249215678;
pub const DQ_AI218_828_STEP_8: f64 = 0.000004470348624607839;
pub const DQ_AI218_828_STEP_16: f64 = 0.0000022351743123039194;
pub const DQ_AI218_828_STEP_32: f64 = 0.0000011175871561519597;
pub const DQ_AI218_828_STEP_64: f64 = 0.0000005587935780759799;
pub const DQ_AI218_828_OFFSET_2: f64 = 150.0;
pub const DQ_AI218_828_OFFSET_4: f64 = 75.0;
pub const DQ_AI218_828_OFFSET_8: f64 = 37.5;
pub const DQ_AI218_828_OFFSET_16: f64 = 18.75;
pub const DQ_AI218_828_OFFSET_32: f64 = 9.375;
pub const DQ_AI218_828_OFFSET_64: f64 = 4.6875;
pub const DQ_AI217_MAXPLLCLFRQ: f64 = 120000.0;
pub const DQ_AI217_MAXFRQ_REDUCE_INL: f64 = 30000.0;
pub const DQ_AI217_804MAXFRQ: f64 = 30000.0;
pub const DQ_AI217_SNAP_FREQ: f64 = 7500.0;
pub const DQ_AI218_SNAP_FREQ: f64 = 8000.0;
pub const DQ_AI218_PT_PT_FIR_INDEX: u32 = 6;
pub const DQ_AI217_SNAP_FREQ_803: f64 = 30000.0;
pub const DQ_AI217_MINPLLCLFRQ: f64 = 1.0;
pub const DQ_AI217_MAXCLFRQ: f64 = 119565.2;
pub const DQ_AI217_MAXCLOCL: f64 = 3826086.4;
pub const DQ_AI217_MINCLOCL: f64 = 1913043.2;
pub const DQ_AI217_STARTRATE: u32 = 2199;
pub const DQ_AI217_MAX_AVG: u32 = 20;
pub const DQ_AI217_SET_CJC_AVG: u32 = 256;
pub const DQ_AI217_803_DEF_AVG: u32 = 6;
pub const DQ_AI219_MAXPLLCLFRQ16: f64 = 180000.0;
pub const DQ_AI219_MAXPLLCLFRQ: f64 = 120000.0;
pub const DQ_AI219_SNAP_FREQ: f64 = 7500.0;
pub const DQ_AI217_DEFAULT_GAIN_CAL: u32 = 12201611;
pub const DQ_AI217_DEFAULT_OFFS_CAL: u32 = 0;
pub const DQ_AI217_DEFAULT_CJC_GAIN_CAL: u32 = 8388608;
pub const DQ_AI217_DEFAULT_CJC_OFFS_CAL: u32 = 16740352;
pub const DQ_AI217_GAIN_1: u32 = 0;
pub const DQ_AI217_GAIN_2: u32 = 1;
pub const DQ_AI217_GAIN_4: u32 = 2;
pub const DQ_AI217_GAIN_8: u32 = 3;
pub const DQ_AI217_GAIN_16: u32 = 4;
pub const DQ_AI217_GAIN_32: u32 = 5;
pub const DQ_AI217_GAIN_64: u32 = 6;
pub const DQ_AI217_GAIN_4_CJC: u32 = 7;
pub const DQ_AI217_GAINS: u32 = 8;
pub const DQ_AI217_GAINS_NORM: u32 = 7;
pub const DQ_AI218_GAIN_1: u32 = 0;
pub const DQ_AI218_GAIN_2: u32 = 1;
pub const DQ_AI218_GAIN_4: u32 = 2;
pub const DQ_AI218_GAIN_8: u32 = 3;
pub const DQ_AI218_GAIN_16: u32 = 4;
pub const DQ_AI218_GAIN_32: u32 = 5;
pub const DQ_AI218_GAIN_64: u32 = 6;
pub const DQ_AI228_GAIN_1: u32 = 0;
pub const DQ_AI228_GAIN_2: u32 = 1;
pub const DQ_AI228_GAIN_4: u32 = 2;
pub const DQ_AI228_GAIN_8: u32 = 3;
pub const DQ_AI228_GAIN_16: u32 = 4;
pub const DQ_AI228_GAIN_32: u32 = 5;
pub const DQ_AI228_GAIN_64: u32 = 6;
pub const DQ_AI217_PGAERR_CHKERR: u32 = 128;
pub const DQ_AI217_PGAERR_IARERR: u32 = 64;
pub const DQ_AI217_PGAERR_BUFA: u32 = 32;
pub const DQ_AI217_PGAERR_ICAERR: u32 = 16;
pub const DQ_AI217_PGAERR_ERRFLAG: u32 = 8;
pub const DQ_AI217_PGAERR_OUTERR: u32 = 4;
pub const DQ_AI217_PGAERR_GAINERR: u32 = 2;
pub const DQ_AI217_PGAERR_IOVERR: u32 = 1;
pub const DQ_AI217_PGASR_DATA_READY_MASK: u32 = 255;
pub const DQ_AI217_PGASR_ERROR_REPORTED_MASK: u32 = 65280;
pub const DQ_AI217_GET_PARAM_PGA: u32 = 0;
pub const DQ_AI218_GET_IS_REG: u32 = 5;
pub const DQ_AI218_GET_DIO_READ: u32 = 6;
pub const DQ_AI217_SET_CFG_LAYER: u32 = 1;
pub const DQ_AI217_SET_CFG_LAYER_PGA: u32 = 16;
pub const DQ_AI217_SETCFG_ALL_CHAN: u32 = 65535;
pub const DQ_AI217_SET_CFG_LAYER_ADC: u32 = 17;
pub const DQ_AI217_SET_ADC_DEFAULT: u32 = 0;
pub const DQ_AI217_SET_ADC_ENH: u32 = 1;
pub const DQ_AI218_DIO_CONFIG: u32 = 2;
pub const DQ_AI218_DIO_WRITE: u32 = 3;
pub const DQ_AI218_PGA_CONFIG: u32 = 4;
pub const DQ_AI218_SET_IS_REG: u32 = 5;
pub const DQ_AI218_SET_BIT_MUX: u32 = 6;
pub const DQ_AI218_BIT_ALL_CHAN: u32 = 255;
pub const DQ_AI218_BIT_OFF: u32 = 2;
pub const DQ_AI218_BIT_ALT_5V: u32 = 3;
pub const DQ_AI218_BIT_5V_IN: u32 = 4;
pub const DQ_AI217_PDWR_PGA_I_SRC_ON: u32 = 18188;
pub const DQ_AI217_PDWR_PGA_I_SRC_OFF: u32 = 18176;
pub const DQ_AI217_PDWR_RESET_ERR_FL: u32 = 17663;
pub const DQ_UNUSED: u32 = 0;
pub const DQ_AI217_NAMELEN: u32 = 32;
pub const DQ_AI224_CHAN: u32 = 4;
pub const DQ_AI224_DACS: u32 = 4;
pub const DQ_AI224_DAC_CAL_MULTIPLIER: u32 = 53687;
pub const DQ_AI224_DAC_CAL_SHIFT: u32 = 14;
pub const DQ_AI224_INFOSZ: u32 = 4096;
pub const DQ_AI224_BASE: u32 = 66000000;
pub const DQ_AI224_BASE_28MHZ: u32 = 28160000;
pub const DQ_AI224_MAXCLFRQ: u32 = 300000;
pub const DQ_AI224_MAXCVFRQ: u32 = 300000;
pub const DQ_AI224_PT_PT_ADC_RATE: f64 = 100000.0;
pub const DQ_AI224_CALDACS: u32 = 0;
pub const DQ_AI224_VREFS: u32 = 0;
pub const DQ_AI224_RS: u32 = 4990;
pub const DQ_AI224_SHUNT_NOMINAL: u32 = 200000;
pub const DQ_AI224_SHUNT_STEPS: u32 = 255;
pub const DQ_AI224_SHUNT_FREQ: u32 = 100000;
pub const DQ_AI224_MAX_EXC: f64 = 10.0;
pub const DQ_AI224_MIN_EXC: f64 = -10.0;
pub const DQ_AI224_FIR_STAGES: u32 = 2;
pub const DQ_AI224_CUST_FIR0: u32 = 0;
pub const DQ_AI224_CUST_FIR1: u32 = 1;
pub const DQ_AI224_DEF_FIR0: u32 = 14;
pub const DQ_AI224_DEF_FIR1: u32 = 15;
pub const DQ_AI224_SELECT_FIR0: u32 = 0;
pub const DQ_AI224_SELECT_FIR1: u32 = 1;
pub const DQ_AI224_MAXDECR: u32 = 2047;
pub const DQ_AI224_MAXTAPS0: u32 = 128;
pub const DQ_AI224_MAXTAPS1: u32 = 512;
pub const DQ_AI224_TAPMASK0: u32 = 127;
pub const DQ_AI224_TAPMASK1: u32 = 511;
pub const DQ_AI224_COEFF_WIDTH: u32 = 16;
pub const DQ_AI224_FIR_TOTAL: u32 = 32768;
pub const DQ_AI224_MAX_CH_LIST: u32 = 9;
pub const DQ_AI224_SPAN: f64 = 40.0;
pub const DQ_AI224_OFFSET: f64 = 20.0;
pub const DQ_AI224_STEP: f64 = 0.0006103608758678569;
pub const DQ_AI224_STEP18: f64 = 0.00015258847270382958;
pub const DQ_AI224_GAIN_1: u32 = 0;
pub const DQ_AI224_GAIN_2: u32 = 1;
pub const DQ_AI224_GAIN_4: u32 = 2;
pub const DQ_AI224_GAIN_8: u32 = 3;
pub const DQ_AI224_GAIN_16: u32 = 4;
pub const DQ_AI224_GAIN_32: u32 = 5;
pub const DQ_AI224_GAIN_64: u32 = 6;
pub const DQ_AI224_GAIN_128: u32 = 7;
pub const DQ_AI224_GAIN_256: u32 = 8;
pub const DQ_AI224_GAIN_512: u32 = 9;
pub const DQ_AI224_DEFAULT_GAIN: u32 = 0;
pub const DQ_AI224_GAINV_0: u32 = 1;
pub const DQ_AI224_GAINV_1: u32 = 2;
pub const DQ_AI224_GAINV_2: u32 = 4;
pub const DQ_AI224_GAINV_3: u32 = 8;
pub const DQ_AI224_GAINV_4: u32 = 16;
pub const DQ_AI224_GAINV_5: u32 = 32;
pub const DQ_AI224_GAINV_6: u32 = 64;
pub const DQ_AI224_GAINV_7: u32 = 128;
pub const DQ_AI224_GAINV_8: u32 = 256;
pub const DQ_AI224_GAINV_9: u32 = 512;
pub const DQ_AI224_STEP18_2: f64 = 0.00007629423635191479;
pub const DQ_AI224_STEP18_4: f64 = 0.000038147118175957395;
pub const DQ_AI224_STEP18_8: f64 = 0.000019073559087978698;
pub const DQ_AI224_STEP18_16: f64 = 0.000009536779543989349;
pub const DQ_AI224_STEP18_32: f64 = 0.000004768389771994674;
pub const DQ_AI224_STEP18_64: f64 = 0.000002384194885997337;
pub const DQ_AI224_STEP18_128: f64 = 0.0000011920974429986686;
pub const DQ_AI224_STEP18_256: f64 = 0.0000005960487214993343;
pub const DQ_AI224_STEP18_512: f64 = 0.00000029802436074966715;
pub const DQ_AI224_OFFSET_2: f64 = 10.0;
pub const DQ_AI224_OFFSET_4: f64 = 5.0;
pub const DQ_AI224_OFFSET_8: f64 = 2.5;
pub const DQ_AI224_OFFSET_16: f64 = 1.25;
pub const DQ_AI224_OFFSET_32: f64 = 0.625;
pub const DQ_AI224_OFFSET_64: f64 = 0.3125;
pub const DQ_AI224_OFFSET_128: f64 = 0.15625;
pub const DQ_AI224_OFFSET_256: f64 = 0.078125;
pub const DQ_AI224_OFFSET_512: f64 = 0.0390625;
pub const DQ_AI224_MUX_SS: u32 = 0;
pub const DQ_AI224_MUX_CS: u32 = 16;
pub const DQ_AI224_MUX_EXCP: u32 = 32;
pub const DQ_AI224_MUX_PPS: u32 = 48;
pub const DQ_AI224_MUX_NULL: u32 = 64;
pub const DQ_AI224_MUX_PS: u32 = 80;
pub const DQ_AI224_MUX_EXCN: u32 = 96;
pub const DQ_AI224_MUX_5K: u32 = 112;
pub const DQ_AI224_AVG_FLAG: u32 = 4;
pub const DQL_IOCTL224_SETCFG: u32 = 8;
pub const DQL_IOCTL224_SETEXC: u32 = 9;
pub const DQL_IOCTL224_SETSHUNT: u32 = 10;
pub const DQL_IOCTL224_MEASSHUNT: u32 = 11;
pub const DQL_IOCTL224_SETAVG: u32 = 12;
pub const DQ_AI224_SHUNT_DISABLED: u32 = 0;
pub const DQ_AI224_SHUNT_A: u32 = 2;
pub const DQ_AI224_SHUNT_B: u32 = 3;
pub const DQ_AI224_SET_DC_EXC: u32 = 1;
pub const DQ_AI224_SET_AC_EXC: u32 = 2;
pub const DQ_AI224_SET_BCOMP: u32 = 3;
pub const DQ_AI224_SET_NULL: u32 = 4;
pub const DQ_AI224_SET_NULLING_OFF: f64 = 500.0;
pub const DQ_AI224_NULLING_OFF_INT: u32 = 500000;
pub const DQ_AI224_FIR_DISABLE: u32 = 0;
pub const DQ_AI224_FIR_ENABLE: u32 = 1;
pub const DQ_AI224_FIR_SET_DECRATE: u32 = 2;
pub const DQ_AI224_FIR_COEFF_LOAD: u32 = 4;
pub const DQ_AI224_FIR_SET_DEFAULT: u32 = 8;
pub const DQ_AI224_FIR_SET_SKIP_COUNT: u32 = 32;
pub const DQ_AI224_V_SHUNT_A: u32 = 1;
pub const DQ_AI224_V_SHUNT_B: u32 = 2;
pub const DQ_AI224_V_R5K: u32 = 3;
pub const DQ_AI224_SEL_CHAN_0: u32 = 1;
pub const DQ_AI224_SEL_CHAN_1: u32 = 2;
pub const DQ_AI224_SEL_CHAN_2: u32 = 4;
pub const DQ_AI224_SEL_CHAN_3: u32 = 8;
pub const DQ_AI224_SEL_CHAN_ALL: u32 = 15;
pub const DQ_AI224_MAXAVG: u32 = 20;
pub const DQ_AI224_MIN_SAMPLE_RATE: f64 = 391.0;
pub const DQ_AI224_EXCA_DAC: u32 = 0;
pub const DQ_AI224_EXCB_DAC: u32 = 1;
pub const DQ_AI224_NULL_DAC: u32 = 2;
pub const DQ_AI224_BCOMPL_DAC: u32 = 3;
pub const DQ_AI224_MUX_MASK: u32 = 112;
pub const DQ_AI224_CHTYPE: u32 = 248;
pub const DQ_AI224_AVG_8: u32 = 3;
pub const DQ_AI224_AVG_16: u32 = 4;
pub const DQ_AI224_AVG_32: u32 = 5;
pub const DQ_AI224_AVG_64: u32 = 6;
pub const DQ_AI224_AVG_128: u32 = 7;
pub const DQ_AI224_AVG_256: u32 = 8;
pub const DQ_AI224_AVG_512: u32 = 9;
pub const DQ_AI224_AVG_1024: u32 = 10;
pub const DQ_AI224_AVG_2048: u32 = 11;
pub const DQ_AI224_MODESCAN: u32 = 0;
pub const DQ_AI224_MODEFIFO: u32 = 131072;
pub const DQ_AI224_MODECONT: u32 = 196608;
pub const DQ_AI224_MAX_PTS_PERIOD: u32 = 256;
pub const DQ_AI224_ZERO_LEVEL: u32 = 32768;
pub const DQ_AI224_EXC_RMS_DEFAULT: u32 = 2031616;
pub const DQ_AI224_MAX_DIV: u32 = 99;
pub const DQ_AI224_MAX_DIV2: u32 = 199;
pub const DQ_AI224_MAX_DIV3: u32 = 329;
pub const DQ_AI224_MAX_FRQ: u32 = 600000;
pub const DQ_AI224_FIFO_GET_DATA: u32 = 16;
pub const DQ_AI224_ENABLE_EXC_A: u32 = 1;
pub const DQ_AI224_ENABLE_EXC_B: u32 = 2;
pub const DQ_AI224_CALCHAN: u32 = 8;
pub const DQ_AI224_NAMELEN: u32 = 20;
pub const DQ_AI224_WFAVG: u32 = 16;
pub const DQ_AI225_CHAN: u32 = 26;
pub const DQ_AI225_CHANNELS: u32 = 25;
pub const DQ_AI225_INFOSZ: u32 = 4096;
pub const DQ_AI225_BASE: u32 = 66000000;
pub const DQ_AI225_CALLEVEL: u32 = 1024000000;
pub const DQ_AI225_MAXCHAN: u32 = 128;
pub const DQ_AI225_MAXRATE: u32 = 3200;
pub const DQ_AI225_CLPERINT: u32 = 16;
pub const DQ_AI225_FIFO_GET_DATA: u32 = 16;
pub const DQ_AI225_FIFO_GET_CAL: u32 = 32;
pub const DQ_AI225_CLENTRIES_DEF: u32 = 1;
pub const DQ_AI225_TS_CHAN: u32 = 26;
pub const DQ_AI225RANGE: f64 = 2.5;
pub const DQ_AI225BINRANGE: u32 = 16777215;
pub const DQ_AI225HALFRANGE: f64 = 1.25;
pub const DQ_AI225ONEVOLTNV: u32 = 1000000000;
pub const DQ_AI225_GAIN_1: u32 = 0;
pub const DQ_AI225_SPAN: f64 = 2.5;
pub const DQ_AI225_OFFSET: f64 = 1.25;
pub const DQ_ACCESS_DIO_CFG_DIO1_IN: u32 = 2;
pub const DQ_ACCESS_DIO_CFG_DIO1_OUT: u32 = 1;
pub const DQ_ACCESS_DIO_CFG_READ_DI_ONLY: u32 = 0;
pub const DQ_ACCESS_DIO2_OUT: u32 = 1;
pub const DQ_ACCESS_DIO1_OUT: u32 = 2;
pub const DQ_ACCESS_DIO_STATUS_DIO2_OUT: u32 = 1;
pub const DQ_ACCESS_DIO_STATUS_DIO1_OUT: u32 = 2;
pub const DQ_ACCESS_DIO_STATUS_DIO0_IN: u32 = 4;
pub const DQ_ACCESS_DIO_STATUS_DIO1_IN: u32 = 8;
pub const DQ_AI225_CLSPDMASK: u32 = 61440;
pub const DQ_LT2440_6_9S: u32 = 6875;
pub const DQ_LT2440_13_7S: u32 = 13750;
pub const DQ_LT2440_27_5S: u32 = 27500;
pub const DQ_LT2440_55S: u32 = 55000;
pub const DQ_LT2440_110S: u32 = 110000;
pub const DQ_LT2440_220S: u32 = 220000;
pub const DQ_LT2440_440S: u32 = 440000;
pub const DQ_LT2440_880S: u32 = 880000;
pub const DQ_LT2440_1760S: u32 = 1760000;
pub const DQ_LT2440_3520S: u32 = 3520000;
pub const DQ_AI225_CL_TIMES: u32 = 2;
pub const DQ_AI225_FIFO_CH: u32 = 128;
pub const DQ_AI225_FIFO_BUFSZ: u32 = 16;
pub const DQ_AI225_MODESCAN: u32 = 0;
pub const DQ_AI225_MODEFIFO: u32 = 131072;
pub const DQ_AI225_MODECONT: u32 = 196608;
pub const DQ_AI225_NAMELEN: u32 = 16;
pub const DQ_AI254_CHAN: u32 = 4;
pub const DQ_AI254_DACS: u32 = 4;
pub const DQ_AI254_ADCS: u32 = 2;
pub const DQ_AI254_AIN_CHAN: u32 = 8;
pub const DQ_AI254_AOUT_CHAN: u32 = 16;
pub const DQ_AI254_AIN_CL_SIZE: u32 = 9;
pub const DQ_AI254_AOUT_CL_SIZE: u32 = 16;
pub const DQ_AI254_INFOSZ: u32 = 4096;
pub const DQ_AI254_BASE: u32 = 66000000;
pub const DQ_AI254_GAINS: u32 = 4;
pub const DQ_AI254_CLOCK33: u32 = 33000000;
pub const DQ_AI254_CLOCK24: u32 = 24000000;
pub const DQ_AI254_STARTDELAY: u32 = 2000;
pub const DQ_AI254_MINCLFRQ: u32 = 400;
pub const DQ_AI254_MAXCLFRQ: u32 = 20000;
pub const DQ_AI254_MAXCVFRQ4: u32 = 320000;
pub const DQ_AI254_MAXCVFRQ2: u32 = 640000;
pub const DQ_AI254_CALDACS: u32 = 0;
pub const DQ_AI254_VREFS: u32 = 0;
pub const DQ_AI254_MAX_CH_LIST: u32 = 32;
pub const DQ_AI254_SPAN: f64 = 80.0;
pub const DQ_AI254_OFFSET: f64 = 40.0;
pub const DQ_AI254_STEP: f64 = 0.0012207217517357137;
pub const DQ_AI254_STEP16: f64 = 0.0012207217517357137;
pub const DQ_AI254_SUM2RMS: f64 = 1.114303027;
pub const DQ_AI254_AMP2RMS: f64 = 1.414213562;
pub const DQ_AI254_MIN_FRQ_SMOKE_TEST: f64 = 350.0;
pub const DQ_AI254_MAX_FRQ_SMOKE_TEST: f64 = 22000.0;
pub const DQ_AI254_EXC_SPAN: f64 = 20.0;
pub const DQ_AI254_EXC_OFFSET: f64 = 10.0;
pub const DQ_AI254_EXC_STEP: f64 = 0.00030518043793392844;
pub const DQ_AI254_GAINV: u32 = 1;
pub const DQ_AI254_GAINV_2: u32 = 2;
pub const DQ_AI254_GAINV_5: u32 = 5;
pub const DQ_AI254_GAINV_10: u32 = 10;
pub const DQ_AI254_STEP_2: f64 = 0.0006103608758678569;
pub const DQ_AI254_STEP_5: f64 = 0.00024414435034714275;
pub const DQ_AI254_STEP_10: f64 = 0.00012207217517357137;
pub const DQ_AO254_OFFSET: f64 = 5.0;
pub const DQ_AI254_GAIN_1: u32 = 0;
pub const DQ_AI254_GAIN_2: u32 = 1;
pub const DQ_AI254_GAIN_4: u32 = 2;
pub const DQ_AI254_GAIN_8: u32 = 3;
pub const DQ_AI254_GAIN_5: u32 = 2;
pub const DQ_AI254_GAIN_10: u32 = 3;
pub const DQ_AI254_DIV_CAL: u32 = 0;
pub const DQ_AI254_DIV_RAW: u32 = 16;
pub const DQ_AI254_AVG: u32 = 32;
pub const DQ_AI254_ZC: u32 = 48;
pub const DQ_AI254_ZC0: u32 = 48;
pub const DQ_AI254_ZC1: u32 = 56;
pub const DQ_AI254_LAST_A: u32 = 64;
pub const DQ_AI254_MAX_A: u32 = 72;
pub const DQ_AI254_LAST_B: u32 = 80;
pub const DQ_AI254_MAX_B: u32 = 88;
pub const DQ_AI254_LAST_Sa: u32 = 96;
pub const DQ_AI254_MIN_A: u32 = 104;
pub const DQ_AI254_LAST_Sb: u32 = 112;
pub const DQ_AI254_MIN_B: u32 = 120;
pub const DQ_AI254_STATUS: u32 = 24;
pub const DQ_AI254_CHTYPE: u32 = 248;
pub const DQ_AI254_CHNUM: u32 = 3;
pub const DQ_AI254_GAIN_A: u32 = 0;
pub const DQ_AI254_GAIN_B: u32 = 16;
pub const DQ_AI254_PHASE_A: u32 = 32;
pub const DQ_AI254_PHASE_B: u32 = 48;
pub const DQ_AI254_PHASE_AUTO: u32 = 64;
pub const DQ_AI254_FFIFO: u32 = 80;
pub const DQ_AI254_AOUT0_WR: u32 = 96;
pub const DQ_AI254_AOUT1_WR: u32 = 112;
pub const DQ_AI254_AOUT2_WR: u32 = 128;
pub const DQ_AI254_AOUT3_WR: u32 = 144;
pub const DQL_IOCTL254_SETCFG: u32 = 8;
pub const DQL_IOCTL254_SETEXC: u32 = 9;
pub const DQL_IOCTL254_GETEXC: u32 = 10;
pub const DQL_IOCTL254_START: u32 = 11;
pub const DQL_IOCTL254_SETWF: u32 = 12;
pub const DQL_IOCTL254_DIO: u32 = 13;
pub const DQL_IOCTL254_GETWF: u32 = 14;
pub const DQL_IOCTL254_SETEXT: u32 = 15;
pub const DQ_AI254_MODE_INT_5: u32 = 0;
pub const DQ_AI254_MODE_INT_4: u32 = 1;
pub const DQ_AI254_MODE_EXT_5: u32 = 2;
pub const DQ_AI254_MODE_EXT_4: u32 = 3;
pub const DQ_AI254_MODE_SIM_5: u32 = 4;
pub const DQ_AI254_MODE_SIM_4: u32 = 5;
pub const DQ_AI254_MODE_SIM_5_INT: u32 = 6;
pub const DQ_AI254_MODE_SIM_4_INT: u32 = 7;
pub const DQ_AI254_MODE_SETAVG: u32 = 1;
pub const DQ_AI254_MODE_SETMMAVG: u32 = 2;
pub const DQ_AI254_MODE_SETZEROC: u32 = 4;
pub const DQ_AI254_MODE_SETZCLEVEL: u32 = 8;
pub const DQ_AI254_MODE_SET_SINE_SQR: u32 = 65536;
pub const DQ_AI254_MODE_USE_SXAVG: u32 = 1073741824;
pub const DQ_AI254_MODE_USEREFB: u32 = 65536;
pub const DQ_AI254_MODESCAN: u32 = 0;
pub const DQ_AI254_MODEFIFO: u32 = 131072;
pub const DQ_AI254_MODECONT: u32 = 196608;
pub const DQ_AI254_MAX_PTS_PERIOD: u32 = 256;
pub const DQ_AI254_ZERO_LEVEL: u32 = 32768;
pub const DQ_AI254_EXC_RMS_DEFAULT: u32 = 2031616;
pub const DQ_AI254_MAX_DIV: u32 = 99;
pub const DQ_AI254_MAX_DIV2: u32 = 199;
pub const DQ_AI254_MAX_DIV3: u32 = 329;
pub const DQ_AI254_MAX_FRQ: u32 = 330000;
pub const DQ_AI254_FIFO_GET_DATA: u32 = 16;
pub const DQ_AI254_ENABLE_EXC_A: u32 = 1;
pub const DQ_AI254_ENABLE_EXC_B: u32 = 2;
pub const DQ_AI256_LVDT_CHANONLY_MASK: u32 = 1;
pub const DQ_AI254_USROFFS_1: u32 = 0;
pub const DQ_AI254_USRGAIN_1: u32 = 8388608;
pub const DQ_AI254_CALCHAN: u32 = 8;
pub const DQ_AI254_NAMELEN: u32 = 20;
pub const DQ_AI254_WFAVG: u32 = 16;
pub const DQ_AI255_CHAN: u32 = 2;
pub const DQ_AI256_CHAN: u32 = 2;
pub const DQ_AI255_DACS: u32 = 4;
pub const DQ_AI255_ADCS: u32 = 4;
pub const DQ_AI256_PADC_CHAN: u32 = 4;
pub const DQ_AI256_PADC_CHAN_MASK: u32 = 3;
pub const DQ_AI255_STARTDELAY: u32 = 5000;
pub const DQ_AI255_AIN_CL_SIZE: u32 = 9;
pub const DQ_AI255_AIN_CHAN: u32 = 8;
pub const DQ_AI255_AOUT_CHAN: u32 = 8;
pub const DQ_AI255_CHANNEL_A: u32 = 0;
pub const DQ_AI255_CHANNEL_B: u32 = 1;
pub const DQ_AI255_CHANNEL_C: u32 = 2;
pub const DQ_AI255_CHANNEL_D: u32 = 3;
pub const DQ_AI255_INFOSZ: u32 = 4096;
pub const DQ_AI255_BASE: u32 = 66000000;
pub const DQ_AI255_GAINS: u32 = 4;
pub const DQ_AI255_CLOCK33: u32 = 33000000;
pub const DQ_AI255_CLOCK24: u32 = 24000000;
pub const DQ_AI255_MAXCLFRQ: u32 = 20000;
pub const DQ_AI255_MAXCVFRQ: u32 = 330000;
pub const DQ_AI255_MAXCVFRQ4: u32 = 330000;
pub const DQ_AI255_MAXCVFRQ3: u32 = 440000;
pub const DQ_AI255_MAXCVFRQ2: u32 = 660000;
pub const DQ_AI255_MAXCVFRQ1: u32 = 1000000;
pub const DQ_AI256_MAXCVFRQ: u32 = 434210;
pub const DQ_AI256_MAXCVFRQ4: u32 = 434210;
pub const DQ_AI256_MAXCVFRQ3: u32 = 578000;
pub const DQ_AI256_MAXCVFRQ2: u32 = 850000;
pub const DQ_AI255_CALDACS: u32 = 0;
pub const DQ_AI255_VREFS: u32 = 0;
pub const DQ_AI255_MAX_CH_LIST: u32 = 32;
pub const DQ_AI255_SPAN: f64 = 80.0;
pub const DQ_AI255_AMPL: f64 = 40.0;
pub const DQ_AI255_OFFSET: f64 = 40.0;
pub const DQ_AI255_STEP: f64 = 0.0012207217517357137;
pub const DQ_AI255_STEP18: f64 = 0.00030517694540765916;
pub const DQ_AI255_815_SPAN: f64 = 370.0;
pub const DQ_AI255_815_AMPL: f64 = 185.0;
pub const DQ_AI255_815_OFFSET: f64 = 185.0;
pub const DQ_AI255_815_STEP: f64 = 0.005645838101777676;
pub const DQ_AI255_815_STEP18: f64 = 0.0014114433725104236;
pub const DQ_AI255_815_STEP_2: f64 = 0.002822919050888838;
pub const DQ_AI255_815_STEP_5: f64 = 0.001129167620355535;
pub const DQ_AI255_815_STEP_10: f64 = 0.0005645838101777676;
pub const DQ_AI255_815_OFFSET_2: f64 = 92.5;
pub const DQ_AI255_815_OFFSET_5: f64 = 37.0;
pub const DQ_AI255_815_OFFSET_10: f64 = 18.5;
pub const DQ_AI256_AO_SPAN: f64 = 57.831;
pub const DQ_AI256_AO_STEP: f64 = 0.0008824444953078509;
pub const DQ_AI256_AO_AMPL: f64 = 28.9155;
pub const DQ_AI256_AO_OFFSET: f64 = 28.9155;
pub const DQ_AI255_360: u32 = 102952;
pub const DQ_AI255_ACC_LIM: u32 = 51476;
pub const DQ_AI255_GAINV: u32 = 1;
pub const DQ_AI255_GAINV_2: u32 = 2;
pub const DQ_AI255_GAINV_5: u32 = 5;
pub const DQ_AI255_GAINV_10: u32 = 10;
pub const DQ_AI255_STEP_2: f64 = 0.0006103608758678569;
pub const DQ_AI255_STEP_5: f64 = 0.00024414435034714275;
pub const DQ_AI255_STEP_10: f64 = 0.00012207217517357137;
pub const DQ_AI255_GAIN_1: u32 = 0;
pub const DQ_AI255_GAIN_2: u32 = 1;
pub const DQ_AI255_GAIN_5: u32 = 2;
pub const DQ_AI255_GAIN_10: u32 = 3;
pub const DQ_AI255_OFFSET_2: f64 = 20.0;
pub const DQ_AI255_OFFSET_5: f64 = 8.0;
pub const DQ_AI255_OFFSET_10: f64 = 4.0;
pub const DQ_AI255_ANGLE_CAL: u32 = 0;
pub const DQ_AI255_ACCEL_CAL: u32 = 16;
pub const DQ_AI255_STATUS: u32 = 24;
pub const DQ_AI255_RAW_DATA: u32 = 32;
pub const DQ_AI255_ZC: u32 = 48;
pub const DQ_AI255_LAST_A: u32 = 64;
pub const DQ_AI255_LAST_B: u32 = 68;
pub const DQ_AI255_LAST_C: u32 = 72;
pub const DQ_AI255_LAST_D: u32 = 76;
pub const DQ_AI255_LAST_SxA: u32 = 80;
pub const DQ_AI255_LAST_SxB: u32 = 84;
pub const DQ_AI255_LAST_SxC: u32 = 88;
pub const DQ_AI255_LAST_SxD: u32 = 92;
pub const DQ_AI255_MIN_A: u32 = 96;
pub const DQ_AI255_MIN_B: u32 = 100;
pub const DQ_AI255_MIN_C: u32 = 104;
pub const DQ_AI255_MIN_D: u32 = 108;
pub const DQ_AI255_MAX_A: u32 = 112;
pub const DQ_AI255_MAX_B: u32 = 116;
pub const DQ_AI255_MAX_C: u32 = 120;
pub const DQ_AI255_MAX_D: u32 = 124;
pub const DQ_AI255_PHASE_DET: u32 = 128;
pub const DQ_AI255_LAST_SxA_AVG: u32 = 136;
pub const DQ_AI255_LAST_SxB_AVG: u32 = 140;
pub const DQ_AI255_CHTYPE: u32 = 252;
pub const DQ_AI255_GAIN_A: u32 = 0;
pub const DQ_AI255_GAIN_B: u32 = 4;
pub const DQ_AI255_GAIN_C: u32 = 8;
pub const DQ_AI255_GAIN_D: u32 = 12;
pub const DQ_AI255_PHASE_A: u32 = 16;
pub const DQ_AI255_PHASE_B: u32 = 20;
pub const DQ_AI255_PHASE_C: u32 = 24;
pub const DQ_AI255_PHASE_D: u32 = 28;
pub const DQ_AI255_FFIFO: u32 = 32;
pub const DQ_AI255_AOUT0_WR: u32 = 48;
pub const DQ_AI255_AOUT1_WR: u32 = 64;
pub const DQ_AI255_AOUT2_WR: u32 = 80;
pub const DQ_AI255_AOUT3_WR: u32 = 96;
pub const DQL_IOCTL255_SETCFG: u32 = 8;
pub const DQL_IOCTL255_SETEXC: u32 = 9;
pub const DQL_IOCTL255_GETEXC: u32 = 10;
pub const DQL_IOCTL255_START: u32 = 11;
pub const DQL_IOCTL255_SETWF: u32 = 12;
pub const DQL_IOCTL255_DIO: u32 = 13;
pub const DQL_IOCTL255_GETWF: u32 = 14;
pub const DQL_IOCTL255_SETEXT: u32 = 15;
pub const DQL_IOCTL256_GET_PADC: u32 = 4097;
pub const DQL_IOCTL256_CVTCHNL_254: u32 = 4098;
pub const DQL_IOCTL256_START_254: u32 = 4099;
pub const DQL_IOCTL256_SETCFG_254: u32 = 4100;
pub const DQAI256_GETPARAM_GET: u32 = 16;
pub const DQAI256_SETPARAM_SET: u32 = 16;
pub const DQ_AI256_UNCALFLAG: u32 = 128;
pub const DQ_AI255_MODE_SI_INT: u32 = 0;
pub const DQ_AI255_MODE_RI_INT: u32 = 1;
pub const DQ_AI255_MODE_SI_EXT: u32 = 2;
pub const DQ_AI255_MODE_RI_EXT: u32 = 3;
pub const DQ_AI255_MODE_SS_INT: u32 = 4;
pub const DQ_AI255_MODE_RS_INT: u32 = 5;
pub const DQ_AI255_MODE_SS_EXT: u32 = 6;
pub const DQ_AI255_MODE_RS_EXT: u32 = 7;
pub const DQ_AI255_MODE_EN_AOUT: u32 = 8;
pub const DQ_AI255_MODE_EN_AIN: u32 = 9;
pub const DQ_AI255_MODE_SI_INTZ: u32 = 10;
pub const DQ_AI255_MODE_SI_EXTZ: u32 = 11;
pub const DQ_AI255_MODE_SS_INTZ: u32 = 12;
pub const DQ_AI255_MODE_SS_EXTZ: u32 = 13;
pub const DQ_AI256_MODE_SIM_5_EXT: u32 = 16;
pub const DQ_AI256_MODE_SIM_4_EXT: u32 = 17;
pub const DQ_AI256_MODE_SIM_5_INT: u32 = 18;
pub const DQ_AI256_MODE_SIM_4_INT: u32 = 19;
pub const DQ_AI255_MODE_DISABLE: u32 = 15;
pub const DQ_AI255_MODE_SETAVG: u32 = 1;
pub const DQ_AI255_MODE_SETZEROC: u32 = 2;
pub const DQ_AI256_SUBCH_NEGV: u32 = 0;
pub const DQ_AI256_SUBCH_POSV: u32 = 1;
pub const DQ_AI256_SUBCH_I_DC: u32 = 2;
pub const DQ_AI256_SUBCH_THERM: u32 = 3;
pub const DQ_AI256_SUBCH_NEGV_0: u32 = 0;
pub const DQ_AI256_SUBCH_POSV_0: u32 = 1;
pub const DQ_AI256_SUBCH_I_DC_0: u32 = 2;
pub const DQ_AI256_SUBCH_THERM_0: u32 = 3;
pub const DQ_AI256_SUBCH_NEGV_1: u32 = 4;
pub const DQ_AI256_SUBCH_POSV_1: u32 = 5;
pub const DQ_AI256_SUBCH_I_DC_1: u32 = 6;
pub const DQ_AI256_SUBCH_THERM_1: u32 = 7;
pub const DQ_AI255_AIN_STS_DR: u32 = 65536;
pub const DQ_AI255_AIN_IR_TR: u32 = 128;
pub const DQ_AI255_AIN_IR_FE: u32 = 64;
pub const DQ_AI255_AIN_IR_FHF: u32 = 32;
pub const DQ_AI255_AIN_IR_FF: u32 = 16;
pub const DQ_AI255_AIN_IR_ZLH: u32 = 8;
pub const DQ_AI255_AIN_IR_ZHL: u32 = 4;
pub const DQ_AI255_AIN_IR_AR: u32 = 2;
pub const DQ_AI255_AIN_IR_ACC: u32 = 1;
pub const DQ_AI255_MODESCAN: u32 = 0;
pub const DQ_AI255_MODEFIFO: u32 = 131072;
pub const DQ_AI255_MODECONT: u32 = 196608;
pub const DQ_AI255_MAX_PTS_PERIOD: u32 = 256;
pub const DQ_AI255_ZERO_LEVEL: u32 = 32768;
pub const DQ_AI255_EXC_RMS_DEFAULT: u32 = 2031616;
pub const DQ_AI255_MAX_DIV: u32 = 99;
pub const DQ_AI255_MAX_DIV2: u32 = 199;
pub const DQ_AI255_MAX_DIV3: u32 = 329;
pub const DQ_AI255_MAX_FRQ: u32 = 330000;
pub const DQ_AI256_MAX_FRQ: u32 = 660000;
pub const DQ_AI255_FIFO_GET_DATA: u32 = 16;
pub const DQ_AI255_ENABLE_EXC_A: u32 = 1;
pub const DQ_AI255_ENABLE_EXC_B: u32 = 2;
pub const DQ_AI255_ENABLE_EXC_C: u32 = 4;
pub const DQ_AI255_ENABLE_EXC_D: u32 = 8;
pub const DQ_AI255_FL_SIM_SYNC: u32 = 8;
pub const DQ_AI255_FL_NOAOUT: u32 = 4;
pub const DQ_AI255_FL_HWLOOP: u32 = 2;
pub const DQ_AI255_AOUT_FFCMD_WZ: u32 = 2147483648;
pub const DQ_AI255_AOUT_FFCMD_PHA: u32 = 0;
pub const DQ_AI255_AOUT_FFCMD_PHB: u32 = 268435456;
pub const DQ_AI255_AOUT_FFCMD_PHC: u32 = 536870912;
pub const DQ_AI255_AOUT_FFCMD_PHD: u32 = 805306368;
pub const DQ_AI255_AOUT_FFCMD_GA: u32 = 1073741824;
pub const DQ_AI255_AOUT_FFCMD_GB: u32 = 1342177280;
pub const DQ_AI255_AOUT_FFCMD_GC: u32 = 1610612736;
pub const DQ_AI255_AOUT_FFCMD_GD: u32 = 1879048192;
pub const DQ_AI255_AOUT_CMD_MASK: u32 = 1879048192;
pub const DQ_AI255_CHANONLY_MASK: u32 = 1;
pub const DQ_AI255_GAIN_MASK: u32 = 3;
pub const DQ_AI255_CALCHAN: u32 = 8;
pub const DQ_AI255_NAMELEN: u32 = 20;
pub const DQ_AI255_WFAVG: u32 = 16;
pub const DQAI256_CFGSET: u32 = 1;
pub const DQAI256_PORTOCMSET: u32 = 2;
pub const DQAI256_PORTOCV0SET: u32 = 4;
pub const DQAI256_PORTOCV1SET: u32 = 8;
pub const DQAI256_RDCNTSET: u32 = 16;
pub const DQAI256_ADCCFG0SET: u32 = 32;
pub const DQAI256_ADCCFG1SET: u32 = 64;
pub const DQAI256_ADCCFG2SET: u32 = 128;
pub const DQAI256_ADCCFG3SET: u32 = 256;
pub const DQ_DMM261_CHAN: u32 = 16;
pub const DQ_DMM261_GUARDIAN_CHAN: u32 = 5;
pub const DQ_DMM261_PGA_STATUS_OFFSET: u32 = 46;
pub const DQ_DMM261_PGA_DATA_OFFSET: u32 = 48;
pub const DQ_DMM261_CL_SIZE: u32 = 27;
pub const DQ_DMM261_INFOSZ: u32 = 4096;
pub const DQ_DMM261_BASE: u32 = 66000000;
pub const DQ_DMM261_MODESCAN: u32 = 0;
pub const DQ_DMM261_MODEFIFO: u32 = 131072;
pub const DQ_DMM261_MODECONT: u32 = 196608;
pub const DQ_DMM261_VDC_CAL_CH: u32 = 0;
pub const DQ_DMM261_VDC_RAW_CH: u32 = 1;
pub const DQ_DMM261_VDC_AVG_PER_CH: u32 = 2;
pub const DQ_DMM261_VDC_AVG_DCS_CH: u32 = 3;
pub const DQ_DMM261_VDC_VREF_CH: u32 = 4;
pub const DQ_DMM261_VAC_RMS_CH: u32 = 5;
pub const DQ_DMM261_VAC_MIN_CH: u32 = 6;
pub const DQ_DMM261_VAC_MAX_CH: u32 = 7;
pub const DQ_DMM261_VAC_FREQ_CH: u32 = 10;
pub const DQ_DMM261_IDC_CAL_CH: u32 = 16;
pub const DQ_DMM261_IDC_RAW_CH: u32 = 17;
pub const DQ_DMM261_IDC_AVG_PER_CH: u32 = 18;
pub const DQ_DMM261_IDC_AVG_DCS_CH: u32 = 19;
pub const DQ_DMM261_IDC_VREF_CH: u32 = 20;
pub const DQ_DMM261_IAC_RMS_CH: u32 = 21;
pub const DQ_DMM261_IAC_MIN_CH: u32 = 22;
pub const DQ_DMM261_IAC_MAX_CH: u32 = 23;
pub const DQ_DMM261_IAC_FREQ_CH: u32 = 26;
pub const DQ_DMM261_GIDC_CH: u32 = 32;
pub const DQ_DMM261_GIAC_CH: u32 = 33;
pub const DQ_DMM261_GV0_CH: u32 = 34;
pub const DQ_DMM261_GV1_CH: u32 = 35;
pub const DQ_DMM261_GV2_CH: u32 = 36;
pub const DQ_DMM261_GV3_CH: u32 = 37;
pub const DQ_DMM261_TEMP_CH: u32 = 38;
pub const DQ_DMM261_GIAC_MIN_CH: u32 = 39;
pub const DQ_DMM261_GIAC_MAX_CH: u32 = 40;
pub const DQ_DMM261_RES_CH: u32 = 48;
pub const DQ_DMM261_RREF_CH: u32 = 49;
pub const DQ_DMM261_R_IEXC_CH: u32 = 50;
pub const DQ_DMM261_VREF_5V: u32 = 56;
pub const DQ_DMM261_VREF_25MV: u32 = 57;
pub const DQ_DMM261_READY_STATUS: u32 = 63;
pub const DQ_DMM261_R_RANGES: u32 = 8;
pub const DQ_DMM261_R_2W_10: u32 = 32;
pub const DQ_DMM261_R_2W_100: u32 = 33;
pub const DQ_DMM261_R_2W_1K: u32 = 34;
pub const DQ_DMM261_R_2W_10K: u32 = 35;
pub const DQ_DMM261_R_2W_100K: u32 = 36;
pub const DQ_DMM261_R_2W_1M: u32 = 37;
pub const DQ_DMM261_R_2W_10M: u32 = 38;
pub const DQ_DMM261_R_2W_100M: u32 = 39;
pub const DQ_DMM261_R_4W_10: u32 = 64;
pub const DQ_DMM261_R_4W_100: u32 = 65;
pub const DQ_DMM261_R_4W_1K: u32 = 66;
pub const DQ_DMM261_R_4W_10K: u32 = 67;
pub const DQ_DMM261_R_4W_100K: u32 = 68;
pub const DQ_DMM261_R_4W_1M: u32 = 69;
pub const DQ_DMM261_R_4W_10M: u32 = 70;
pub const DQ_DMM261_R_4W_100M: u32 = 39;
pub const DQ_DMM261_GI_ILIMIT: u32 = 80;
pub const DQ_DMM261_GI_HYST: u32 = 20;
pub const DQ_DMM261_GI_ILIMIT_AC: u32 = 95;
pub const DQ_DMM261_GI_HYST_AC: u32 = 15;
pub const DQ_DMM261_DEF_10K_REF_X100: u32 = 1000000;
pub const DQ_DMM261_DEF_10K: f64 = 10000.0;
pub const DQ_DMM261_DEF_100M: f64 = 10000000.0;
pub const DQ_DMM261_DEF_RN1_RES: u32 = 10000000;
pub const DQ_DMM261_NEW_BDATA: u32 = 2147483648;
pub const DQ_DMM261_OVER_RANGE: u32 = 67108864;
pub const DQ_DMM261_AC_CLIP: u32 = 67108864;
pub const DQ_DMM261_RMS_VALID: u32 = 33554432;
pub const DQ_DMM261_V_X100_RANGE: u32 = 16777216;
pub const DQ_DMM261_I_2A_RANGE: u32 = 16777216;
pub const DQ_DMM261_ADCDATAE: u32 = 23;
pub const DQ_DMM261_ADCDATAS: u32 = 0;
pub const DQ_DMM261_V_X100_MULT: f64 = 100.0;
pub const DQ_DMM261_I_A_RANGE_R: f64 = 0.1;
pub const DQ_DMM261_I_MA_RANGE_R: f64 = 10.1;
pub const DQ_DMM261_RATIO_IEXC: f64 = 100.99999999999999;
pub const DQ_DMM261_ACV_SCALER: f64 = 31.242424242424242;
pub const DQ_DMM261_ADDL_SCALE_FACTOR: f64 = 1.375;
pub const DQ_DMM261_SPAN_V: f64 = 40.0;
pub const DQ_DMM261_SPAN_H_24: u32 = 16777215;
pub const DQ_DMM261_STEP_V: f64 = 0.0000023841859331241806;
pub const DQ_DMM261_STEP_2_V: f64 = 0.0000011920929665620903;
pub const DQ_DMM261_STEP_4_V: f64 = 0.0000005960464832810452;
pub const DQ_DMM261_STEP_8_V: f64 = 0.0000002980232416405226;
pub const DQ_DMM261_STEP_16_V: f64 = 0.0000001490116208202613;
pub const DQ_DMM261_STEP_32_V: f64 = 0.00000007450581041013064;
pub const DQ_DMM261_STEP_64_V: f64 = 0.00000003725290520506532;
pub const DQ_DMM261_STEP_128_V: f64 = 0.00000001862645260253266;
pub const DQ_DMM261_STEP_256_V: f64 = 0.00000000931322630126633;
pub const DQ_DMM261_STEP_512_V: f64 = 0.000000004656613150633165;
pub const DQ_DMM261_OFFSET_V: f64 = 20.0;
pub const DQ_DMM261_OFFSET_2_V: f64 = 10.0;
pub const DQ_DMM261_OFFSET_4_V: f64 = 5.0;
pub const DQ_DMM261_OFFSET_8_V: f64 = 2.5;
pub const DQ_DMM261_OFFSET_16_V: f64 = 1.25;
pub const DQ_DMM261_OFFSET_32_V: f64 = 0.625;
pub const DQ_DMM261_OFFSET_64_V: f64 = 0.3125;
pub const DQ_DMM261_OFFSET_128_V: f64 = 0.15625;
pub const DQ_DMM261_OFFSET_256_V: f64 = 0.078125;
pub const DQ_DMM261_OFFSET_512_V: f64 = 0.0390625;
pub const DQ_DMM261_I_MIN_GAIN_A: f64 = 16.0;
pub const DQ_DMM261_I_MIN_GAIN_MA: f64 = 2.0;
pub const DQ_DMM261_IRANGE_3_12: u32 = 0;
pub const DQ_DMM261_IRANGE_1_56: u32 = 1;
pub const DQ_DMM261_IRANGE_0_28: u32 = 2;
pub const DQ_DMM261_IRANGE_0_017: u32 = 3;
pub const DQ_DMM261_IRANGE_0_002: u32 = 4;
pub const DQ_DMM261_IRANGE_VREF_25MV: u32 = 5;
pub const DQ_DMM261_IRANGE_NO_I: u32 = 15;
pub const DQ_DMM261_IRANGE_0: u32 = 0;
pub const DQ_DMM261_IRANGE_1: u32 = 1;
pub const DQ_DMM261_IRANGE_2: u32 = 2;
pub const DQ_DMM261_IRANGE_3: u32 = 3;
pub const DQ_DMM261_IRANGE_4: u32 = 4;
pub const DQ_DMM261_IDC_RANGES: u32 = 11;
pub const DQ_DMM261_IAC_RANGES: u32 = 10;
pub const DQ_DMM261_VRANGES: u32 = 17;
pub const DQ_DMM261_RES_RANGES: u32 = 8;
pub const DQ_DMM261_RDRANGES: u32 = 8;
pub const DQ_DMM261_RANGE_500: u32 = 2;
pub const DQ_DMM261_RANGE_250: u32 = 3;
pub const DQ_DMM261_RANGE_125: u32 = 4;
pub const DQ_DMM261_RANGE_62_5: u32 = 5;
pub const DQ_DMM261_RANGE_31_25: u32 = 6;
pub const DQ_DMM261_RANGE_15_625: u32 = 7;
pub const DQ_DMM261_RANGE_12_5: u32 = 16;
pub const DQ_DMM261_RANGE_10: u32 = 17;
pub const DQ_DMM261_RANGE_5: u32 = 18;
pub const DQ_DMM261_RANGE_2_5: u32 = 19;
pub const DQ_DMM261_RANGE_1_25: u32 = 20;
pub const DQ_DMM261_RANGE_0_625: u32 = 21;
pub const DQ_DMM261_RANGE_0_3125: u32 = 22;
pub const DQ_DMM261_RANGE_0_15625: u32 = 23;
pub const DQ_DMM261_RANGE_0_078125: u32 = 24;
pub const DQ_DMM261_RANGE_0_0390625: u32 = 25;
pub const DQ_DMM261_VDC_RANGES: u32 = 19;
pub const DQ_DMM261_VAC_RANGES: u32 = 12;
pub const DQ_DMM261_AC_RANGE_330: u32 = 32;
pub const DQ_DMM261_AC_RANGE_220: u32 = 33;
pub const DQ_DMM261_AC_RANGE_110: u32 = 34;
pub const DQ_DMM261_AC_RANGE_55: u32 = 35;
pub const DQ_DMM261_AC_RANGE_27: u32 = 36;
pub const DQ_DMM261_AC_RANGE_13: u32 = 37;
pub const DQ_DMM261_AC_RANGE_6: u32 = 38;
pub const DQ_DMM261_AC_RANGE_3: u32 = 39;
pub const DQ_DMM261_AC_RANGE_1_7: u32 = 40;
pub const DQ_DMM261_AC_RANGE_0_8: u32 = 41;
pub const DQ_DMM261_V_REFERENCE: f64 = 5.0;
pub const DQ_DMM261_GVT_CHAN: u32 = 5;
pub const DQ_DMM261_V_SCALER: f64 = 41.08016032064128;
pub const DQ_DMM261_T_SLOPE: f64 = 1.2255045;
pub const DQ_DMM261_T_OFFSET: f64 = 273.15;
pub const DQ_DMM261_DEF_24_OFFSET_CAL: u32 = 0;
pub const DQ_DMM261_DEF_24_GAIN_CAL: u32 = 8388608;
pub const DQ_DMM261_DEF_24_CAL_LIMIT: u32 = 16384;
pub const DQ_DMM261_DEF_24_MSB: u32 = 8388608;
pub const DQ_DMM261_DEF_24_LSBS: u32 = 8388607;
pub const DQ_DMM261_DEF_16_OFFSET_CAL: u32 = 0;
pub const DQ_DMM261_DEF_16_GAIN_CAL: u32 = 32768;
pub const DQ_DMM261_DEF_16_CAL_LIMIT: u32 = 1024;
pub const DQ_DMM261_DEF_12_OFFSET_CAL: u32 = 0;
pub const DQ_DMM261_DEF_12_GAIN_CAL: u32 = 2048;
pub const DQ_DMM261_DEF_12_CAL_LIMIT: u32 = 64;
pub const DQ_DMM261_GMAX_OFF_CAL_DEV: u32 = 4096;
pub const DQ_DMM261_GMAX_GAIN_CAL_DEV: u32 = 3277;
pub const DQ_DMM261_MIN_ADC_WAIT: u32 = 160;
pub const DQ_DMM261_ADC_EOC: u32 = 262144;
pub const DQ_DMM261_ADC_SIG: u32 = 65536;
pub const DQ_DMM261_ADC_MSB: u32 = 32768;
pub const DQ_DMM261_DEF_LIMIT_1247: u32 = 32768;
pub const DQ_DMM261_GI_SPAN: f64 = 0.99206;
pub const DQ_DMM261_GI_OFFSET: f64 = 0.49603;
pub const DQ_DMM261_MODE_R_MEAS: u32 = 48;
pub const DQ_DMM261_MODE_GUARDIAN: u32 = 49;
pub const DQ_DMM261_MODE_STANDBY: u32 = 50;
pub const DQ_DMM261_MODE_DCV_MEAS: u32 = 51;
pub const DQ_DMM261_MODE_ACV_MEAS: u32 = 52;
pub const DQ_DMM261_MODE_DCI_MEAS: u32 = 53;
pub const DQ_DMM261_MODE_ACI_MEAS: u32 = 54;
pub const DQ_DMM261_MODE_RES_MEAS: u32 = 55;
pub const DQ_DMM261_MODE_DCV_LO: u32 = 56;
pub const DQ_DMM261_MODE_DCV_HI: u32 = 57;
pub const DQ_DMM261_CONFIG_RIDAC: u32 = 81;
pub const DQ_DMM261_CONFIG_V_AVG: u32 = 82;
pub const DQ_DMM261_CONFIG_I_AVG: u32 = 83;
pub const DQ_DMM261_CONFIG_V_ZC: u32 = 84;
pub const DQ_DMM261_CONFIG_V_ZL: u32 = 85;
pub const DQ_DMM261_CONFIG_V_ZC_MODE: u32 = 91;
pub const DQ_DMM261_CONFIG_I_ZC: u32 = 86;
pub const DQ_DMM261_CONFIG_I_ZL: u32 = 87;
pub const DQ_DMM261_CONFIG_I_ZC_MODE: u32 = 92;
pub const DQ_DMM261_CONFIG_VREF_OVEN: u32 = 88;
pub const DQ_DMM261_CONFIG_LINE_HZ: u32 = 89;
pub const DQ_DMM261_CONFIG_RD_CYCLES: u32 = 90;
pub const DQ_DMM261_CONFIG_V_FIR: u32 = 93;
pub const DQ_DMM261_CONFIG_V_FIR_DEC: u32 = 94;
pub const DQ_DMM261_CONFIG_I_FIR: u32 = 95;
pub const DQ_DMM261_CONFIG_I_FIR_DEC: u32 = 96;
pub const DQ_DMM261_CONFIG_FIR_CUTOFF: u32 = 97;
pub const DQ_DMM261_CONFIG_I_RESET: u32 = 98;
pub const DQ_DMM261_MEAS_NORM: u32 = 0;
pub const DQ_DMM261_MEAS_AZERO: u32 = 1;
pub const DQ_DMM261_ZCC_1_SAMPL: u32 = 0;
pub const DQ_DMM261_ZCC_2_SAMPL: u32 = 1;
pub const DQ_DMM261_ZCC_4_SAMPL: u32 = 2;
pub const DQ_DMM261_ZCC_8_SAMPL: u32 = 3;
pub const DQ_DMM261_ZCC_16_SAMPL: u32 = 4;
pub const DQ_DMM261_ZCC_32_SAMPL: u32 = 5;
pub const DQ_DMM261_ZCC_64_SAMPL: u32 = 6;
pub const DQ_DMM261_ZCC_128_SAMPL: u32 = 7;
pub const DQ_DMM261_ZCC_256_SAMPL: u32 = 8;
pub const DQ_DMM261_GET_STATUS_LIST: u32 = 32;
pub const DQ_DMM261_GET_STATUS_SZ_MAX: u32 = 10;
pub const DQ_DMM261_GET_ST_GSTS: u32 = 0;
pub const DQ_DMM261_GET_ST_INT: u32 = 1;
pub const DQ_DMM261_GET_ST_HEAT: u32 = 2;
pub const DQ_DMM261_GET_ST_ADCR: u32 = 3;
pub const DQ_DMM261_GET_ST_GIMON: u32 = 4;
pub const DQ_DMM261_GET_ST_G_ADC: u32 = 5;
pub const DQ_DMM261_GET_ST_PGA: u32 = 6;
pub const DQ_DMM261_GSTS_ADCI_OVR: u32 = 1073741824;
pub const DQ_DMM261_GSTS_ADCV_OVR: u32 = 536870912;
pub const DQ_DMM261_GSTS_ADCI_DCR: u32 = 268435456;
pub const DQ_DMM261_GSTS_ADCI_ACR: u32 = 134217728;
pub const DQ_DMM261_GSTS_ADCI_MMR: u32 = 67108864;
pub const DQ_DMM261_GSTS_ADCI_DR: u32 = 33554432;
pub const DQ_DMM261_GSTS_ADCV_DCR: u32 = 16777216;
pub const DQ_DMM261_GSTS_ADCV_ACR: u32 = 8388608;
pub const DQ_DMM261_GSTS_ADCV_MMR: u32 = 4194304;
pub const DQ_DMM261_GSTS_ADCV_DR: u32 = 2097152;
pub const DQ_DMM261_GSTS_ADCR_CLR: u32 = 1048576;
pub const DQ_DMM261_GSTS_ADCR_DR: u32 = 524288;
pub const DQ_DMM261_GSTS_ADCG_DR: u32 = 262144;
pub const DQ_DMM261_GSTS_ADCT_ERR: u32 = 131072;
pub const DQ_DMM261_GSTS_ADCT_DR: u32 = 65536;
pub const DQ_DMM261_GSTS_ADCR_HF: u32 = 32768;
pub const DQ_DMM261_GSTS_ADCR_FF: u32 = 16384;
pub const DQ_DMM261_GSTS_ADCV_HF: u32 = 8192;
pub const DQ_DMM261_GSTS_ADCV_FF: u32 = 4096;
pub const DQ_DMM261_GSTS_ADCI_HF: u32 = 2048;
pub const DQ_DMM261_GSTS_ADCI_FF: u32 = 1024;
pub const DQ_DMM261_GSTS_WDE: u32 = 512;
pub const DQ_DMM261_GSTS_ADCV_ACI: u32 = 256;
pub const DQ_DMM261_GSTS_ADCV_ACV: u32 = 128;
pub const DQ_DMM261_GSTS_RL_ACDC: u32 = 64;
pub const DQ_DMM261_GSTS_RL_VIN: u32 = 32;
pub const DQ_DMM261_GSTS_RL_LR: u32 = 16;
pub const DQ_DMM261_GSTS_RL_AZ: u32 = 8;
pub const DQ_DMM261_GSTS_RL_4W: u32 = 4;
pub const DQ_DMM261_GSTS_RL_IEXC: u32 = 2;
pub const DQ_DMM261_GSTS_RL_FLT: u32 = 1;
pub const DQ_DMM261_PGAERR_CHKERR: u32 = 128;
pub const DQ_DMM261_PGAERR_IARERR: u32 = 64;
pub const DQ_DMM261_PGAERR_BUFA: u32 = 32;
pub const DQ_DMM261_PGAERR_ICAERR: u32 = 16;
pub const DQ_DMM261_PGAERR_ERRFLAG: u32 = 8;
pub const DQ_DMM261_PGAERR_OUTERR: u32 = 4;
pub const DQ_DMM261_PGAERR_GAINERR: u32 = 2;
pub const DQ_DMM261_PGAERR_IOVERR: u32 = 1;
pub const DQ_DMM261_PDWR_GPIO_R8_CFG: u32 = 7;
pub const DQ_DMM261_NAMELEN: u32 = 16;
pub const DQCAL_RESERVED: u32 = 4;
pub const DQ_AO301_CHAN: u32 = 8;
pub const DQ_AO308_CHAN: u32 = 8;
pub const DQ_AO301_CHANSVC: u32 = 32;
pub const DQ_AO301_INFOSZ: u32 = 4096;
pub const DQ_AO301_BASE: u32 = 66000000;
pub const DQ_AO301_DMAPCV: u32 = 411;
pub const DQ_AO301_STARTRATE: u32 = 411;
pub const DQ_AO301_MAXCLFRQ: u32 = 100000;
pub const DQ_AO301_MAXCVFRQ: u32 = 800000;
pub const DQ_AO301_MIDSCALE: u32 = 32768;
pub const DQ_AO301_SPAN: f64 = 20.0;
pub const DQ_AO301_OFFSET: f64 = 10.0;
pub const DQ_AO301_STEP: f64 = 0.00030518043793392844;
pub const DQ_AO308_352_SPAN: f64 = 27.034;
pub const DQ_AO308_352_OFFSET: f64 = 13.517;
pub const DQ_AO308_352_STEP: f64 = 0.00041251239795529103;
pub const DQ_AO308_353_SPAN: f64 = 80.0;
pub const DQ_AO308_353_OFFSET: f64 = 40.0;
pub const DQ_AO308_353_STEP: f64 = 0.0012207217517357137;
pub const DQ_AO332_CHAN: u32 = 32;
pub const DQ_AO333_ADC_CHAN: u32 = 32;
pub const DQ_AO332_CHANMASK: u32 = 31;
pub const DQ_AO332_CL_CH_MASK: u32 = 2031616;
pub const DQ_AO332_CHANSVC: u32 = 32;
pub const DQ_AO332_INFOSZ: u32 = 4096;
pub const DQ_AO332_BASE: u32 = 66000000;
pub const DQ_AO332_DMAPCV: u32 = 8249;
pub const DQ_AO332_STARTRATE: u32 = 8249;
pub const DQ_AO332_MAXCLFRQ: u32 = 100000;
pub const DQ_AO332_MAXCVFRQ: u32 = 800000;
pub const DQ_AO332_MIDSCALE: u32 = 32768;
pub const DQ_AO332_SPAN: f64 = 20.0;
pub const DQ_AO332_OFFSET: f64 = 10.0;
pub const DQ_AO332_STEP: f64 = 0.00030518043793392844;
pub const DQ_AO333_ADC_SPAN: f64 = 20.0;
pub const DQ_AO333_ADC_OFFSET: f64 = 10.0;
pub const DQIOCTL_AO333_CALIBRATE: u32 = 8;
pub const DQIOCTL_AO333_CALIBRATE_RESULT: u32 = 9;
pub const DQ_AO333_DEF_OFFSET_CAL: u32 = 105;
pub const DQ_AO333_MAX_OFFSET_CAL_DEV: u32 = 288;
pub const DQ_AO333_DEF_GAIN_CAL: u32 = 31840;
pub const DQ_AO333_MAX_GAIN_CAL_DEV: u32 = 1536;
pub const DQ_AO333_DEF_GAIN_SF_CAL: u32 = 11;
pub const DQ_AO333_CAL_READINGS_AVGD: u32 = 12;
pub const DQ_AO333_ADC_RESULT: u32 = 8448;
pub const DQ_AO333_I2C_NEW_DATA: u32 = 8216;
pub const DQ_AO333_I2C_CTRL: u32 = 8192;
pub const DQ_AO333_I2C_CTRL_RDY_ALL: u32 = 2;
pub const DQ_AO333_CAL_P9_5V: u32 = 63896;
pub const DQ_AO333_CAL_N9_5V: u32 = 1638;
pub const DQ_AO333_CAL_0V: u32 = 32767;
pub const DQ_AO333_MAX_N9_5V_DEV: u32 = 42;
pub const DQL_AO308_EXT_REDGE: u32 = 128;
pub const DQL_AO308_LDACEXT1: u32 = 64;
pub const DQL_AO308_LDACEXT0: u32 = 32;
pub const DQL_AO308_MASK_800: u32 = 224;
pub const DQL_EXT_DEV_PREAMBLE: u32 = 2734686208;
pub const DQL_EXT_DEV_CMDMASK: u32 = 7;
pub const DQL_EXT_DEV_CMDMASK_SHFT: u32 = 21;
pub const DQL_EXT_DEV_DATAMASK: u32 = 1048575;
pub const DQL_EXT_DEV_DATAMASK_SHFT: u32 = 1;
pub const DQL_EXT_DEV_RETURN_PREABLE_MASK: u32 = 3758096384;
pub const DQL_EXT_DEV_RETURN_PREABLE: u32 = 2684354560;
pub const DQ_AI301_CL_TIMES: u32 = 2;
pub const DQ_AI301_FIFO_CH: u32 = 128;
pub const DQ_AI301_FIFO_BUFSZ: u32 = 16;
pub const DQ_AO301_POS10: u32 = 8388608;
pub const DQ_AO301_NEG10: u32 = 16777216;
pub const DQ_AO301_BI10: u32 = 25165824;
pub const DQ_AO301_OFF: u32 = 0;
pub const DQ_AO301_ENCOUT: u32 = 4194304;
pub const DQ_AO301_MODESCAN: u32 = 0;
pub const DQ_AO301_MODEFIFO: u32 = 131072;
pub const DQ_AO301_MODECONT: u32 = 196608;
pub const DQ_AO301_MODEWFGEN: u32 = 196608;
pub const DQ_AO301_FIFO_SET_DATA: u32 = 16;
pub const DQL_ISTR301_DIO0INV: u32 = 128;
pub const DQL_ISTR301_DIO0MODE: u32 = 5;
pub const DQL_ISTR301_DIO0DEF: u32 = 0;
pub const DQL_ISTR301_DIO0OUT: u32 = 32;
pub const DQL_ISTR301_DIO0GPIN: u32 = 64;
pub const DQL_ISTR301_DIO0GPOUT: u32 = 96;
pub const DQL_ISTR301_DIO0VAL: u32 = 16;
pub const DQL_ISTR301_DIO0SRC: u32 = 0;
pub const DQL_ISTR301_DIO0INT0: u32 = 0;
pub const DQL_ISTR301_DIO0INT1: u32 = 1;
pub const DQL_ISTR301_DIO0SRC2: u32 = 2;
pub const DQL_ISTR301_DIO0SRC3: u32 = 3;
pub const DQL_ISTR301_DIO1INV: u32 = 32768;
pub const DQL_ISTR301_DIO1MODE: u32 = 13;
pub const DQL_ISTR301_DIO1DEF: u32 = 0;
pub const DQL_ISTR301_DIO1OUT: u32 = 8192;
pub const DQL_ISTR301_DIO1GPIN: u32 = 16384;
pub const DQL_ISTR301_DIO1GPOUT: u32 = 24576;
pub const DQL_ISTR301_DIO1VAL: u32 = 4096;
pub const DQL_ISTR301_DIO1SRC: u32 = 8;
pub const DQL_ISTR301_DIO1INT0: u32 = 0;
pub const DQL_ISTR301_DIO1INT1: u32 = 256;
pub const DQL_ISTR301_DIO1SRC2: u32 = 512;
pub const DQL_ISTR301_DIO1SRC3: u32 = 768;
pub const DQL_ISTR301_DIO2INV: u32 = 8388608;
pub const DQL_ISTR301_DIO2MODE: u32 = 21;
pub const DQL_ISTR301_DIO2DEF: u32 = 0;
pub const DQL_ISTR301_DIO2OUT: u32 = 2097152;
pub const DQL_ISTR301_DIO2GPIN: u32 = 4194304;
pub const DQL_ISTR301_DIO2GPOUT: u32 = 6291456;
pub const DQL_ISTR301_DIO2VAL: u32 = 1048576;
pub const DQL_ISTR301_DIO2SRC: u32 = 16;
pub const DQL_ISTR301_DIO2INT0: u32 = 0;
pub const DQL_ISTR301_DIO2INT1: u32 = 65536;
pub const DQL_ISTR301_DIO2SRC2: u32 = 131072;
pub const DQL_ISTR301_DIO2SRC3: u32 = 196608;
pub const DQL_AO301_SYNC_WRITE: u32 = 3238002688;
pub const DQ_AO301_CALSZ: u32 = 4;
pub const DQ_AO301_DCALSZ: u32 = 16;
pub const DQ_AO301_NAMELEN: u32 = 32;
pub const DQ_AO332_CALSZ: u32 = 32;
pub const DQ_AO333_CALSZ: u32 = 32;
pub const DQ_AO332_NAMELEN: u32 = 12;
pub const DQ_ACB_EE_INIT_ON: u32 = 65536;
pub const DQ_ACB_EE_INIT_OFF: u32 = 131072;
pub const DQ_AO3XX_EEINIT_INHIBIT: u32 = 528;
pub const DQ_AO3XX_INHIBIT_EE: u32 = 1;
pub const DQ_AO3XX_ENABLE_EE: u32 = 0;
pub const DQL_IOCTL301_WRITEWF: u32 = 10;
pub const DQL_IOCTL301_CTRLWF: u32 = 11;
pub const DQL_IOCTL3XX_READ_TEST: u32 = 12;
pub const DQL_IOCTL308_WR_CFG: u32 = 13;
pub const DQ_IOCTL3XX_RD_TEST_INIT: u32 = 0;
pub const DQ_IOCTL3XX_RD_TEST_CVT: u32 = 1;
pub const DQ_IOCTL3XX_RD_TEST_END: u32 = 2;
pub const DQ_3XX_RD_TEST_SPAN: f64 = 2.5;
pub const DQ_3XX_RD_TEST_OFFSET: f64 = 1.25;
pub const DQ_308_RD_TEST_SF_350: f64 = 42.666666666666664;
pub const DQ_308_RD_TEST_SF_353: f64 = 163.5;
pub const DQ_308_RD_TEST_SF_V15: f64 = 82.66666666666667;
pub const DQ_308_RD_TEST_SF_VEX: f64 = 213.5;
pub const DQ_308_RD_TEST_CHANS: u32 = 12;
pub const DQ_332_RD_TEST_CHANS: u32 = 32;
pub const DQ_AO3xx_STOP_WF: u32 = 0;
pub const DQ_AO3xx_START_WF: u32 = 1;
pub const DQ_AO3xx_PAUSE_WF: u32 = 2;
pub const DQ_AO3xx_CONT_WF: u32 = 3;
pub const DQ_AO3xx_PROG_WF: u32 = 4;
pub const DQ_AO318_CHAN: u32 = 8;
pub const DQ_AO319_CHAN: u32 = 8;
pub const DQ_TC378_CHAN: u32 = 8;
pub const DQ_AO318_ADC_CH: u32 = 5;
pub const DQ_AO319_ADC_CH: u32 = 3;
pub const DQ_TC378_ADC_CH: u32 = 3;
pub const DQ_AO318_CHANSVC: u32 = 40;
pub const DQ_AO318_CB_CH: u32 = 3;
pub const DQ_AO318_INFOSZ: u32 = 4096;
pub const DQ_AO318_BASE: u32 = 66000000;
pub const DQ_AO318_ADC_BASE: u32 = 66000000;
pub const DQ_AO318_DMAPCL: u32 = 32999;
pub const DQ_AO318_STARTRATE: u32 = 32999;
pub const DQ_AO318_MIDSCALE: u32 = 32768;
pub const DQ_AO318_020_INIT_A: u32 = 0;
pub const DQ_AO318_020_INIT_B: u32 = 32964;
pub const DQ_AO318_024_INIT_B: u32 = 32979;
pub const DQ_AO318_420_INIT_B: u32 = 16340;
pub const DQ_AO319_420_INIT_B: u32 = 30240;
pub const DQ_AO319_DEF_GAIN_CAL_A: u32 = 32032;
pub const DQ_AO318_CB_INIT: u32 = 4294836225;
pub const DQ_AO318_CB_INIT_CONNECT: u32 = 4294901760;
pub const DQ_TC378_INIT_B: u32 = 30214;
pub const DQ_TC378_DEF_OFFS_CAL_3: u32 = 64812;
pub const DQ_TC378_DCJC_CH: u32 = 3;
pub const DQ_AO318_CH_MASK: u32 = 7;
pub const DQ_AO318_CL_CH_MASK: u32 = 458752;
pub const DQ_AO318_ADC_CHAN_MASK: u32 = 7;
pub const DQ_AO318_SEL_CHAN_ALL: u32 = 255;
pub const DQ_AO318_SPAN: f64 = 20.0;
pub const DQ_AO318_OFFSET: f64 = 10.0;
pub const DQ_AO318_STEP: f64 = 0.00030518043793392844;
pub const DQ_AO318_020_SPAN: f64 = 20.0;
pub const DQ_AO318_020_OFFSET: f64 = 0.0;
pub const DQ_AO318_020_STEP: f64 = 0.00030518043793392844;
pub const DQ_AO318_024_SPAN: f64 = 24.0;
pub const DQ_AO318_024_OFFSET: f64 = 0.0;
pub const DQ_AO318_024_STEP: f64 = 0.0003662165255207141;
pub const DQ_AO319_MIN: f64 = 4.0;
pub const DQ_AO319_MAX: f64 = 20.0;
pub const DQ_AO319_420_SPAN: f64 = 16.0;
pub const DQ_AO319_420_OFFSET: f64 = -4.0;
pub const DQ_AO319_420_STEP: f64 = 0.00024414435034714275;
pub const DQ_AO319_SPAN: f64 = 16.0;
pub const DQ_AO319_OFFSET: f64 = -4.0;
pub const DQ_AO319_STEP: f64 = 0.00024414435034714275;
pub const DQ_TC378_SPAN: f64 = 0.25;
pub const DQ_TC378_OFFSET: f64 = 0.125;
pub const DQ_TC378_STEP: f64 = 0.0000038147554741741054;
pub const DQ_AO318_ADC_INTCLK: f64 = 7.5;
pub const DQ_AO318_ADC_DEF: f64 = 20.0;
pub const DQ_AO318_ADC_SETTLE: u32 = 5;
pub const DQ_AO318_CB_DEF: u32 = 5;
pub const DQ_AO318_CHANMASK: u32 = 7;
pub const DQ_AO318_BCHAN: u32 = 16;
pub const DQ_AO318_CAL_OFFGAIN: u32 = 32;
pub const DQ_AO318_CAL_DACADC: u32 = 64;
pub const DQ_AO318_ADCCH_IIN: u32 = 0;
pub const DQ_AO318_ADCCH_AOUTAP: u32 = 1;
pub const DQ_AO318_ADCCH_AOUTBP: u32 = 2;
pub const DQ_AO318_ADCCH_AOUTA: u32 = 3;
pub const DQ_AO318_ADCCH_TEMP: u32 = 4;
pub const DQ_TC378_ADCCH_CJC: u32 = 5;
pub const DQ_AO318_ADCCH_UNUSED: u32 = 7;
pub const DQ_AO318_STS_CB7_CS: u32 = 8388608;
pub const DQ_AO318_STS_CB6_CS: u32 = 4194304;
pub const DQ_AO318_STS_CB5_CS: u32 = 2097152;
pub const DQ_AO318_STS_CB4_CS: u32 = 1048576;
pub const DQ_AO318_STS_CB3_CS: u32 = 524288;
pub const DQ_AO318_STS_CB2_CS: u32 = 262144;
pub const DQ_AO318_STS_CB1_CS: u32 = 131072;
pub const DQ_AO318_STS_CB0_CS: u32 = 65536;
pub const DQ_AO318_STS_ADC7_RDY: u32 = 32768;
pub const DQ_AO318_STS_ADC6_RDY: u32 = 16384;
pub const DQ_AO318_STS_ADC5_RDY: u32 = 8192;
pub const DQ_AO318_STS_ADC4_RDY: u32 = 4096;
pub const DQ_AO318_STS_ADC3_RDY: u32 = 2048;
pub const DQ_AO318_STS_ADC2_RDY: u32 = 1024;
pub const DQ_AO318_STS_ADC1_RDY: u32 = 512;
pub const DQ_AO318_STS_ADC0_RDY: u32 = 256;
pub const DQ_AO318_STS_CB7: u32 = 128;
pub const DQ_AO318_STS_CB6: u32 = 64;
pub const DQ_AO318_STS_CB5: u32 = 32;
pub const DQ_AO318_STS_CB4: u32 = 16;
pub const DQ_AO318_STS_CB3: u32 = 8;
pub const DQ_AO318_STS_CB2: u32 = 4;
pub const DQ_AO318_STS_CB1: u32 = 2;
pub const DQ_AO318_STS_CB0: u32 = 1;
pub const DQ_AO318_CSTS_DACBSY: u32 = 134217728;
pub const DQ_AO318_CSTS_DACFHF: u32 = 67108864;
pub const DQ_AO318_CSTS_DACFE: u32 = 33554432;
pub const DQ_AO318_CSTS_DACFF: u32 = 16777216;
pub const DQ_AO318_CSTS_DACB: u32 = 8388608;
pub const DQ_AO318_CSTS_UC2: u32 = 4194304;
pub const DQ_AO318_CSTS_UC1: u32 = 2097152;
pub const DQ_AO318_CSTS_UC0: u32 = 1048576;
pub const DQ_AO318_CSTS_DACA: u32 = 524288;
pub const DQ_AO318_CSTS_OC2: u32 = 262144;
pub const DQ_AO318_CSTS_OC1: u32 = 131072;
pub const DQ_AO318_CSTS_OC0: u32 = 65536;
pub const DQ_AO318_CSTS_DACFRLD: u32 = 256;
pub const DQ_AO318_CSTS_DACB_S: u32 = 128;
pub const DQ_AO318_CSTS_UC2_S: u32 = 64;
pub const DQ_AO318_CSTS_UC1_S: u32 = 32;
pub const DQ_AO318_CSTS_UC0_S: u32 = 16;
pub const DQ_AO318_CSTS_DACA_S: u32 = 8;
pub const DQ_AO318_CSTS_OC2_S: u32 = 4;
pub const DQ_AO318_CSTS_OC1_S: u32 = 2;
pub const DQ_AO318_CSTS_OC0_S: u32 = 1;
pub const DQ_AO318_ADC_CH_I: u32 = 0;
pub const DQ_AO318_ADC_CH_A_int: u32 = 1;
pub const DQ_AO318_ADC_CH_B_int: u32 = 2;
pub const DQ_AO318_ADC_CH_AB_ext: u32 = 3;
pub const DQ_AO318_ADC_CH_TEMP: u32 = 4;
pub const DQ_AO318_ADC_CH_UNUSED: u32 = 7;
pub const DQ_AO318_020_ADC_CH_I: u32 = 0;
pub const DQ_AO318_020_ADC_INT_1: u32 = 1;
pub const DQ_AO318_020_ADC_INT_2: u32 = 2;
pub const DQ_AO318_020_ADC_CH_INT_1: u32 = 1;
pub const DQ_AO318_020_ADC_CH_INT_2: u32 = 2;
pub const DQ_AO318_020_ADC_CH_EXT: u32 = 3;
pub const DQ_TC378_ADC_CH_I: u32 = 0;
pub const DQ_TC378_ADC_CH_INT: u32 = 1;
pub const DQ_TC378_ADC_CH_EXT: u32 = 3;
pub const DQ_TC378_ADC_CH_TEMP: u32 = 4;
pub const DQ_TC378_CJC_TEMP: u32 = 5;
pub const DQ_TC378_SEC_OFFSET: u32 = 6;
pub const DQ_TC378_ADC_CH_UNUSED: u32 = 7;
pub const DQ_AO318_ADC_VREF: f64 = 2.5;
pub const DQ_AO318_ISH: f64 = 0.1;
pub const DQ_AO318_ADC_I_STEP: f64 = 0.000000298027771419852;
pub const DQ_AO318_ADC_I_OFFSET: f64 = 0.009765625;
pub const DQ_AO318_ISH_020: f64 = 10.0;
pub const DQ_AO318_ADC_I_STEP_020: f64 = 0.000009536888685435264;
pub const DQ_AO318_ADC_I_OFFSET_020: f64 = 0.3125;
pub const DQ_AO318_ADC_V_OFFSET: f64 = 16.0;
pub const DQ_AO318_T_SLOPE: f64 = 2.451009;
pub const DQ_AO318_T_OFFSET: f64 = 273.15;
pub const DQ_TC378_ISH: f64 = 5.0;
pub const DQ_TC378_ADC_I_STEP: f64 = 0.000004768444342717632;
pub const DQ_TC378_ADC_I_OFFSET: f64 = 0.15625;
pub const DQ_TC378_ADC_V_STEP: f64 = 0.000038147554741741054;
pub const DQ_TC378_ADC_V_OFFSET: f64 = 1.25;
pub const DQ_TC378_CH_DCJC0: u32 = 61;
pub const DQ_TC378_CH_DCJC1: u32 = 62;
pub const DQ_TC378_CH_DCJC2: u32 = 63;
pub const DQ_AO319_ISH: f64 = 10.0;
pub const DQ_AO319_ADC_I_STEP: f64 = 0.000009536888685435264;
pub const DQ_AO319_ADC_I_OFFSET: f64 = 0.3125;
pub const DQ_AO319_V_SCALER_23: f64 = 50.9;
pub const DQ_AO319_ADC_V_STEP: f64 = 0.0019417105363546197;
pub const DQ_AO319_ADC_V_OFFSET: f64 = 63.625;
pub const DQ_AO318_ADCCAL_EN: u32 = 2147483648;
pub const DQ_AO318_ADC_NEW: u32 = 2147483648;
pub const DQ_AO318_ADCCAL_CB_STS: u32 = 1073741824;
pub const DQ_AO318_ADCCH_SHIFT: u32 = 25;
pub const DQ_AO318_DEF_ADC_OFFS_CAL: u32 = 0;
pub const DQ_AO318_MAX_ADC_OFFS_CAL_DEV: u32 = 512;
pub const DQ_AO318_DEF_ADC_GAIN_CAL: u32 = 32768;
pub const DQ_AO318_MAX_ADC_GAIN_CAL_DEV: u32 = 1536;
pub const DQ_AO318_DEF_DAC_OFFS_CAL: u32 = 0;
pub const DQ_AO318_MAX_DAC_OFFS_CAL_DEV: u32 = 512;
pub const DQ_AO318_DEF_DAC_GAIN_CAL: u32 = 32768;
pub const DQ_AO318_MAX_DAC_GAIN_CAL_DEV: u32 = 1536;
pub const DQL_IOCTL318_WR_PRM: u32 = 14;
pub const DQ_TC378_ADC_ENB: u32 = 18;
pub const DQL_IOCTL318_PRM_SETCB: u32 = 1;
pub const DQL_IOCTL318_GET_CB_STAT: u32 = 2;
pub const DQL_IOCTL318_PRM_GETCB: u32 = 3;
pub const DQAO318_CB_UNIT_I: u8 = 73u8;
pub const DQAO318_CB_UNIT_V: u8 = 86u8;
pub const DQAO318_CB_UNIT_T: u8 = 84u8;
pub const DQAO318_CB_UNIT_U: u8 = 85u8;
pub const DQAO318_CB_UNIT_N: u8 = 78u8;
pub const DQ_AO318_CBCFG_DAC: u32 = 1;
pub const DQ_AO318_CBCFG_SETADCCL: u32 = 2;
pub const DQ_AO318_CBCFG_SETCB: u32 = 4;
pub const DQ_AO318_CBCFG_SETCBSRC: u32 = 8;
pub const DQAO318CFG_DACEN_A: u32 = 1;
pub const DQAO318CFG_DACEN_B: u32 = 2;
pub const DQAO316CFG_DACEN_A_B: u32 = 3;
pub const DQAO318CFG_DACEN_OFF: u32 = 0;
pub const DQ_AO318_CB_A_AUTO: u32 = 1048576;
pub const DQ_AO318_CB_B_AUTO: u32 = 2097152;
pub const DQ_AO318_MINMAX_0: u32 = 0;
pub const DQ_AO318_MINMAX_1: u32 = 1;
pub const DQ_AO318_MINMAX_2: u32 = 2;
pub const DQ_AO318_MINMAX_DISABLE: u32 = 3;
pub const DQ_AO318_CB_COUNT_MIN: u32 = 0;
pub const DQ_AO318_CB_COUNT_MAX: u32 = 15;
pub const DQ_AO318_CB_COUNT_DEFAULT: u32 = 1;
pub const DQ_AO319_CB_COUNT_DEFAULT: u32 = 0;
pub const DQ_AO378_CB_COUNT_DEFAULT: u32 = 5;
pub const DQAO318CFG_CB_RATE_MAX: f64 = 5.0;
pub const DQAO318CFG_CB_RATE_MIN: f64 = 0.025;
pub const DQAO318CFG_CB_RATE_DEFAULT: f64 = 0.5;
pub const DQ_AO318_NAMELEN: u32 = 16;
pub const DQ_AO358_CHAN: u32 = 8;
pub const DQ_AO358_CH_MASK: u32 = 7;
pub const DQ_AO358_FIFO_CH: u32 = 128;
pub const DQ_AO358_CL_TIMES: u32 = 2;
pub const DQ_AO358_ADC_CHAN_CHAN: u32 = 5;
pub const DQ_AO358_ADC_CHANS: u32 = 40;
pub const DQ_AO358_ADC_CHAN_MASK: u32 = 7;
pub const DQ_AO358_INFOSZ: u32 = 4096;
pub const DQ_AO358_BASE: u32 = 66000000;
pub const DQ_AO358_DMAPCV: u32 = 8249;
pub const DQ_AO358_STARTRATE: u32 = 8249;
pub const DQ_AO358_MAXCLFRQ: u32 = 10000;
pub const DQ_AO358_MAXCVFRQ: u32 = 80000;
pub const DQ_AO358_DEF_MIDPOS: u32 = 800;
pub const DQ_AO358_LCR_LED: u32 = 2;
pub const DQ_AO358_LCR_DCDIS: u32 = 1;
pub const DQ_AO358_EE_CHK_STS: u32 = 1;
pub const DQ_AO358_EE_RD_ID_ADDR: u32 = 33;
pub const DQ_AO358_EE_RD: u32 = 34;
pub const DQ_AO358_EE_WR_OPEN: u32 = 49;
pub const DQ_AO358_EE_ERASE: u32 = 50;
pub const DQ_AO358_EE_WR: u32 = 51;
pub const DQ_AO358_EE_WR_CLOSE: u32 = 52;
pub const DQ_AO358_EE_ERASE_SECTOR: u32 = 53;
pub const DQ_AO358_EE_RD_MAX_LEN: u32 = 1024;
pub const DQ_AO358_EE_WR_MAX_LEN: u32 = 256;
pub const DQ_AO358_EE_ID_1M: u32 = 16;
pub const DQ_AO358_EE_ID_4M: u32 = 18;
pub const DQ_AO358_EE_ESTS_COMPLETE: u32 = 2147483648;
pub const DQ_AO358_EE_ESTS_ERR: u32 = 1073741824;
pub const DQ_AO358_EE_ESTS_BUSY: u32 = 16;
pub const DQ_AO358_EE_ESTS_RFF: u32 = 8;
pub const DQ_AO358_EE_ESTS_RFHF: u32 = 4;
pub const DQ_AO358_EE_ESTS_WFE: u32 = 2;
pub const DQ_AO358_EE_ESTS_WFHF: u32 = 1;
pub const DQ_AO358_EE_INVALID_RDSTS: u32 = 2147483648;
pub const DQ_AO358_EE_RDSTS_BP: u32 = 12;
pub const DQ_AO358_EE_RDSTS_WEL: u32 = 2;
pub const DQ_AO358_EE_RDSTS_WIP: u32 = 1;
pub const DQ_AO358_EE_CHKSTS_RETLEN: u32 = 5;
pub const DQ_UNUSED_FOR_THIS_CMD: u32 = 0;
pub const DQ_AO358_WRITE_STOP: u32 = 12585984;
pub const DQ_AO358_WR_CH_SHIFT: u32 = 28;
pub const DQ_AO358_FINE_SHIFT: u32 = 12;
pub const DQ_AO358_COARSE_SHIFT: u32 = 0;
pub const DQ_AO358_WR_CMD_ACB: u32 = 16777216;
pub const DQ_AO358_SUBCH_I_SENSE: u32 = 0;
pub const DQ_AO358_SUBCH_EX1: u32 = 1;
pub const DQ_AO358_SUBCH_EX2: u32 = 2;
pub const DQ_AO358_SUBCH_VS_N: u32 = 3;
pub const DQ_AO358_SUBCH_THERM: u32 = 4;
pub const DQ_AO358_CL_MASK: u32 = 63;
pub const DQ_AO385_AI_SPAN: f64 = 5.0;
pub const DQ_AO385_OFFSET: f64 = 2.5;
pub const DQ_AO385_EXC_SCALER: f64 = 51.75124;
pub const DQ_AO385_350_I_SHUNT: f64 = 4.7;
pub const DQ_AO385_T_OFFSET: f64 = 273.15;
pub const DQ_AO385_EXC_SCALER_700: f64 = 51.73;
pub const DQ_AO385_R4_MIN_350: f64 = 344.75;
pub const DQ_AO385_R4_MAX_350: f64 = 355.25;
pub const DQ_AO385_R4_MIN_350_804: f64 = 341.5;
pub const DQ_AO385_R4_MAX_350_804: f64 = 358.5;
pub const DQ_AO385_AO_SPAN_350_804: f64 = 17.0;
pub const DQ_AO385_AO_SPAN_350: f64 = 10.5;
pub const DQ_AO385_R4_MIN_700: f64 = 700.0;
pub const DQ_AO385_R4_MAX_700: f64 = 1500.0;
pub const DQ_AO385_RLUT_SZ: u32 = 65536;
pub const DQ_AO385_RFINE_AT_CAL: u32 = 256;
pub const DQ_AO385_RFINE_AT_CAL_804: u32 = 256;
pub const DQ_AO385_RPOT_MASK: u32 = 1023;
pub const DQ_AO385_RPOT_MAX: f64 = 1023.0;
pub const DQ_AO385_RPOT_MAX_I: u32 = 1023;
pub const DQ_AO358_RPOTNOM_350: f64 = 20000.0;
pub const DQ_AO358_RWIPER_350: f64 = 60.0;
pub const DQ_AO358_R123_350: f64 = 1050.011;
pub const DQ_AO358_RPAR_350: f64 = 365.0;
pub const DQ_AO358_RPAR_350_804: f64 = 370.0;
pub const DQ_AO358_RDIV_350: f64 = 20804.0;
pub const DQ_AO358_RPROTC_350: f64 = 3000.0;
pub const DQ_AO358_RPROTC_350_804: f64 = 2490.0;
pub const DQ_AO358_RPROTF_350: f64 = 120000.0;
pub const DQ_AO358_RPROTF_350_804: f64 = 110000.0;
pub const DQ_AO358_RF_0X100_350: f64 = 5004.887586;
pub const DQ_AO358_RSTART_350: f64 = 344.75;
pub const DQ_AO358_RSTART_350_804: f64 = 341.5;
pub const DQ_AO358_CONVERGE_LIMIT: u32 = 500;
pub const DQ_AO358_R4DELTA: f64 = 12.37112;
pub const DQ_AO358_R4DELTA_804: f64 = 22.54399;
pub const DQ_AO358_R4FDELTA: f64 = 0.09885;
pub const DQ_AO358_R4FDELTA_804: f64 = 0.12274;
pub const DQ_AO358_R123_700: f64 = -1.0;
pub const DQ_AO385_RFINE_AT_CAL_700: u32 = 0;
pub const DQ_AO358_RPAR_700: f64 = 1740.0;
pub const DQ_AO358_RDIV_700: f64 = 51730.0;
pub const DQ_AO358_RPROTC_700: f64 = 0.0;
pub const DQ_AO358_RPROTF_700: f64 = 22100.0;
pub const DQ_AO358_RSTART_700: f64 = 700.0;
pub const DQ_AO385_AO_SPAN_700: f64 = 800.0;
pub const DQ_AO358_R4DELTA_700: f64 = 341.93255;
pub const DQ_AO358_R4FDELTA_700: f64 = 26.8884;
pub const DQ_AO358_RF_0X14_700: u32 = 0;
pub const DQ_AO358_NAMELEN: u32 = 32;
pub const DQL_IOCTL358_WRITEWF: u32 = 10;
pub const DQL_IOCTL358_CTRLWF: u32 = 11;
pub const DQL_IOCTL358_RW_XEEPROM: u32 = 15;
pub const DQ_AO364_CHAN: u32 = 4;
pub const DQ_AO364_CHAN_MASK: u32 = 3;
pub const DQ_AO364_INFOSZ: u32 = 4096;
pub const DQ_AO364_BASE_66: u32 = 66000000;
pub const DQ_AO364_PLL_BASE: u32 = 264000000;
pub const DQ_AO364_DAC_RES: u32 = 16;
pub const DQ_AO364_SPAN: f64 = 24.0;
pub const DQ_AO364_OFFSET: f64 = 12.0;
pub const DQ_AO364_STEP: f64 = 0.0003662165255207141;
pub const DQ_AO364_ODAC_RES: u32 = 20;
pub const DQ_AO364_ODAC_SPAN: f64 = 24.0;
pub const DQ_AO364_ODAC_OFFSET: f64 = 12.0;
pub const DQ_AO364_ODAC_STEP: f64 = 0.00002288820542164366;
pub const DQ_AO364_ODAC_STEP16: f64 = 0.0003662165255207141;
pub const DQ_AO364_DMAPCV: u32 = 65999;
pub const DQ_AO364_DAC_CH: u32 = 16;
pub const DQ_AO364_DAC_GAIN1: u32 = 32;
pub const DQ_AO364_DAC_GAIN2: u32 = 96;
pub const DQ_AO364_DAC_GAIN5: u32 = 160;
pub const DQ_AO364_DAC_GAIN10: u32 = 224;
pub const DQ_AO364_DAC_MIDSCALE: u32 = 32767;
pub const DQ_AO364_ODAC_MIDSCALE: u32 = 524287;
pub const DQ_AO364_DAC_M12: u32 = 1;
pub const DQ_AO364_DAC_P12: u32 = 65534;
pub const DQ_AO364_ODAC_M12: u32 = 1;
pub const DQ_AO364_ODAC_P12: u32 = 1048574;
pub const DQ_AO364_PLL: u32 = 4;
pub const DQ_AO364_MAXCLFRQ: u32 = 200000;
pub const DQ_AO364_MINCLFRQ: f64 = 0.00000095367431640625;
pub const DQ_AO364_MINQUANT: u32 = 1000000;
pub const DQ_AO364_MAXQUANT: u32 = 16500000;
pub const DQ_AO364_MAXQUANT_ODAC: u32 = 1000000;
pub const DQL_IOCTL364_SETCFG: u32 = 8;
pub const DQL_IOCTL364_TRIGSWEEP: u32 = 9;
pub const DQL_IOCTL364_RSV1: u32 = 10;
pub const DQL_IOCTL364_START: u32 = 11;
pub const DQL_IOCTL364_RSV2: u32 = 12;
pub const DQL_IOCTL364_DIO: u32 = 13;
pub const DQL_IOCTL364_SETEXT: u32 = 14;
pub const DQL_IOCTL364_RW_XEEPROM: u32 = 15;
pub const DQL_IOCTL364_SET_WF: u32 = 4097;
pub const DQL_IOCTL364_SET_AWF: u32 = 4098;
pub const DQL_IOCTL364_WRITE_AWF: u32 = 4099;
pub const DQL_IOCTL364_SELECT_AWF: u32 = 4100;
pub const DQL_IOCTL364_SET_SWEEP: u32 = 4101;
pub const DQL_IOCTL364_SET_OWF: u32 = 4102;
pub const DQL_IOCTL364_WRITE_OWF: u32 = 4103;
pub const DQL_IOCTL364_SET_CLKS: u32 = 4104;
pub const DQL_IOCTL364_SET_WF_CL: u32 = 4105;
pub const DQL_IOCTL364_SET_PLL: u32 = 4106;
pub const DQL_IOCTL364_SET_TMR1: u32 = 4107;
pub const DQ_AO364CFG_OCLK_DIO1: u32 = 1024;
pub const DQ_AO364CFG_OCLK_DIO0: u32 = 768;
pub const DQ_AO364CFG_OCLK_DAC: u32 = 512;
pub const DQ_AO364CFG_OCLK_PLL: u32 = 256;
pub const DQ_AO364CFG_OCLK_SW: u32 = 0;
pub const DQ_AO364CFG_CLK_SYNC2_L: u32 = 7;
pub const DQ_AO364CFG_CLK_SYNC0_L: u32 = 5;
pub const DQ_AO364CFG_CLK_ALT0_L: u32 = 4;
pub const DQ_AO364CFG_CLK_TMR_L: u32 = 3;
pub const DQ_AO364CFG_CLK_DIO0_C: u32 = 2;
pub const DQ_AO364CFG_CLK_PLL_C: u32 = 1;
pub const DQ_AO364CFG_CLK_SW: u32 = 0;
pub const DQ_AO364CFG_OTRG_EDGE: u32 = 536870912;
pub const DQ_AO364CFG_TRG_EDGE: u32 = 268435456;
pub const DQ_AO364CFG_TRG_ONCE: u32 = 134217728;
pub const DQ_AO364CFG_OTRG_CONT_L: u32 = 1792;
pub const DQ_AO364CFG_OTRG_SYNC3_L: u32 = 1536;
pub const DQ_AO364CFG_OTRG_SYNC1_L: u32 = 1024;
pub const DQ_AO364CFG_OTRG_ALT0_C: u32 = 768;
pub const DQ_AO364CFG_OTRG_DIO1_C: u32 = 512;
pub const DQ_AO364CFG_OTRG_SW_C: u32 = 256;
pub const DQ_AO364CFG_TRG_MODE02: u32 = 224;
pub const DQ_AO364CFG_TRG_MODE_NORM: u32 = 0;
pub const DQ_AO364CFG_TRG_MODE_DIO1: u32 = 32;
pub const DQ_AO364CFG_TRG_MODE_SYNC1: u32 = 64;
pub const DQ_AO364CFG_TRG_MODE_SYNC3: u32 = 96;
pub const DQ_AO364CFG_TRG_MODE_ALT0: u32 = 128;
pub const DQ_AO364CFG_TRG_SYNC3_L: u32 = 6;
pub const DQ_AO364CFG_TRG_SYNC1_L: u32 = 4;
pub const DQ_AO364CFG_TRG_ALT0_C: u32 = 3;
pub const DQ_AO364CFG_TRG_CH0_L: u32 = 3;
pub const DQ_AO364CFG_TRG_DIO1_C: u32 = 2;
pub const DQ_AO364CFG_TRG_SW_C: u32 = 1;
pub const DQ_AO364CFG_DCDC_DOWN: u32 = 2147483648;
pub const DQ_AO364CFG_CLKOUT_FREQ: u32 = 1073741824;
pub const DQ_AO364CFG_PGA_1_2: u32 = 768;
pub const DQ_AO364CFG_PGA_1_5: u32 = 512;
pub const DQ_AO364CFG_PGA_1_10: u32 = 256;
pub const DQ_AO364CFG_CH0_SYNC3: u32 = 48;
pub const DQ_AO364CFG_CH0_SYNC1: u32 = 16;
pub const DQ_AO364CFG_CLKOUT_DIO1: u32 = 5;
pub const DQ_AO364CFG_CLKOUT_DIO0: u32 = 4;
pub const DQ_AO364CFG_CLKOUT_CH0: u32 = 3;
pub const DQ_AO364CFG_CLKOUT_SYNC2: u32 = 2;
pub const DQ_AO364CFG_CLKOUT_SYNC0: u32 = 1;
pub const DQ_AO364CFG_WF_PLL: u32 = 16777216;
pub const DQ_AO364CFG_WF_DDS: u32 = 0;
pub const DQ_AO364CFG_WF_INVERT: u32 = 32;
pub const DQ_AO364CFG_WF_MIRROR: u32 = 16;
pub const DQ_AO364CFG_WF_PULSE: u32 = 4;
pub const DQ_AO364CFG_WF_RAMP: u32 = 3;
pub const DQ_AO364CFG_WF_SAW: u32 = 2;
pub const DQ_AO364CFG_WF_SINE: u32 = 1;
pub const DQ_AO364CFG_WF_CUSTOM: u32 = 0;
pub const DQ_AO364CFG_WF_SHAPE: u32 = 32;
pub const DQ_AO364CFG_WF_TIME: u32 = 16;
pub const DQ_AO364CFG_WF_PHASE: u32 = 8;
pub const DQ_AO364CFG_WF_OFFS: u32 = 4;
pub const DQ_AO364CFG_WF_SPAN: u32 = 2;
pub const DQ_AO364CFG_WF_FREQ: u32 = 1;
pub const DQ_AO364_WF_BLK_SZ: u32 = 256;
pub const DQ_AO364_WF_SZ: u32 = 4096;
pub const DQ_AO364_SWEEP_SETONLY: u32 = 4194304;
pub const DQ_AO364_SWEEP_STOP: u32 = 2097152;
pub const DQ_AO364_SWEEP_N_PER: u32 = 1048576;
pub const DQ_AO364_SWEEP_PHASE: u32 = 524288;
pub const DQ_AO364_SWEEP_OFFS: u32 = 262144;
pub const DQ_AO364_SWEEP_AMPL: u32 = 131072;
pub const DQ_AO364_SWEEP_FREQ: u32 = 65536;
pub const DQ_AO364_SWEEP_ALL: u32 = 983040;
pub const DQ_AO364_SWEEP_CONT: u32 = 4;
pub const DQ_AO364_SWEEP_UP: u32 = 0;
pub const DQ_AO364_SWEEP_DN: u32 = 1;
pub const DQ_AO364_SWEEP_UPDN: u32 = 2;
pub const DQ_AO364_SWEEP_DNUP: u32 = 3;
pub const DQ_AO364_MAX_AWF_BUFS: u32 = 64;
pub const DQ_L364_MAX_AWF_FRAME_SZ: u32 = 1048576;
pub const DQ_L364_MAX_OWF_FRAME_SZ: u32 = 4096;
pub const DQL_IOCTL364_FRAME_SE: u32 = 2;
pub const DQL_IOCTL364_FRAME_S: u32 = 4;
pub const DQL_IOCTL364_FRAME_C: u32 = 6;
pub const DQL_IOCTL364_FRAME_E: u32 = 8;
pub const DQL_IOCTL364_FRAMEMASK: u32 = 14;
pub const DQL_AO364_WRITE_USEDBL: u32 = 2;
pub const DQL_AO364_WRITE_STDWF: u32 = 1;
pub const DQ_AO364_EE_CHK_STS: u32 = 1;
pub const DQ_AO364_EE_RD_ID_ADDR: u32 = 33;
pub const DQ_AO364_EE_RD: u32 = 34;
pub const DQ_AO364_EE_WR_OPEN: u32 = 49;
pub const DQ_AO364_EE_ERASE: u32 = 50;
pub const DQ_AO364_EE_WR: u32 = 51;
pub const DQ_AO364_EE_WR_CLOSE: u32 = 52;
pub const DQ_AO364_EE_ERASE_SECTOR: u32 = 53;
pub const DQ_AO364_EE_RD_MAX_LEN: u32 = 1024;
pub const DQ_AO364_EE_WR_MAX_LEN: u32 = 256;
pub const DQ_AO364_EE_ID_1M: u32 = 16;
pub const DQ_AO364_EE_ID_4M: u32 = 18;
pub const DQ_AO364_EE_ESTS_COMPLETE: u32 = 2147483648;
pub const DQ_AO364_EE_ESTS_ERR: u32 = 1073741824;
pub const DQ_AO364_EE_ESTS_BUSY: u32 = 16;
pub const DQ_AO364_EE_ESTS_RFF: u32 = 8;
pub const DQ_AO364_EE_ESTS_RFHF: u32 = 4;
pub const DQ_AO364_EE_ESTS_WFE: u32 = 2;
pub const DQ_AO364_EE_ESTS_WFHF: u32 = 1;
pub const DQ_AO364_EE_INVALID_RDSTS: u32 = 2147483648;
pub const DQ_AO364_EE_RDSTS_BP: u32 = 12;
pub const DQ_AO364_EE_RDSTS_WEL: u32 = 2;
pub const DQ_AO364_EE_RDSTS_WIP: u32 = 1;
pub const DQ_AO364_EE_CHKSTS_RETLEN: u32 = 5;
pub const DQ_AO364_MAXPLLCLFRQ: u32 = 16500000;
pub const DQ_AO364_MINPLLCLFRQ: u32 = 10000;
pub const DQ_AO364_MAXPLL_CLKDIV: u32 = 512;
pub const DQ_AO364_DAC_GAIN: u32 = 1;
pub const DQ_AO364_DAC_OFFS: u32 = 2;
pub const DQ_AO364_ODAC_GAIN: u32 = 3;
pub const DQ_AO364_ODAC_OFFS: u32 = 4;
pub const DQ_AO364_GETCURVAL: u32 = 1;
pub const DQ_L364_NAMELEN: u32 = 32;
pub const DQPRM_364_STATES_ENABLE: u32 = 1;
pub const DQPRM_364_STATES_GAIN1: u32 = 0;
pub const DQPRM_364_STATES_GAIN_0_5: u32 = 2;
pub const DQPRM_364_STATES_GAIN_0_2: u32 = 4;
pub const DQPRM_364_STATES_GAIN_0_1: u32 = 6;
pub const DQ_RTD388_CHAN: u32 = 8;
pub const DQ_RTD388_ADC_CH: u32 = 2;
pub const DQ_RTD388_RES_CH: u32 = 19;
pub const DQ_RTD388_RES_CH_16: u32 = 16;
pub const DQ_RTD388_RES_CH_1K_OFFS: u32 = 16;
pub const DQ_RTD388_RES_CH_2K_OFFS: u32 = 17;
pub const DQ_RTD388_RES_CH_RON_OFFS: u32 = 18;
pub const DQ_RTD388_K_RANGES: u32 = 5;
pub const DQ_RTD388_CB_CH: u32 = 2;
pub const DQ_RTD388_INFOSZ: u32 = 4096;
pub const DQ_RTD388_BASE: u32 = 66000000;
pub const DQ_RTD388_MODESCAN: u32 = 0;
pub const DQ_RTD388_MODEFIFO: u32 = 131072;
pub const DQ_RTD388_MODECONT: u32 = 196608;
pub const DQ_RTD388_ADC_DEF: u32 = 6;
pub const DQ_RTD388_ADC_SETTLE: u32 = 10;
pub const DQ_RTD388_MAXCLFRQ: u32 = 2000;
pub const DQ_RTD388_MAXCVFRQ: u32 = 2000;
pub const DQ_RTD388_16_BIT_TABLE_LEN: u32 = 65536;
pub const DQ_RTD388_RES_NOMINAL_1: u32 = 1000;
pub const DQ_RTD388_MIN_RES_REQ_1: u32 = 180;
pub const DQ_RTD388_MAX_RES_REQ_1: u32 = 3900;
pub const DQ_RTD388_LUT_GUARDBAND_1: u32 = 2;
pub const DQ_RTD388_MIN_RES_LUT_1: u32 = 178;
pub const DQ_RTD388_MAX_RES_LUT_1: u32 = 3902;
pub const DQ_RTD388_BIN_HI_BITS_3K: u32 = 0;
pub const DQ_RTD388_BIN_HI_BITS_2K: u32 = 65536;
pub const DQ_RTD388_BIN_HI_BITS_1K: u32 = 131072;
pub const DQ_RTD388_BIN_HI_BITS_0K: u32 = 196608;
pub const DQ_RTD388_BIN_HI_BITS_MASK: u32 = 196608;
pub const DQ_RTD388_OHM_LUT_TBL_MIN: u32 = 178;
pub const DQ_RTD388_OHM_LUT_TBL_MAX: u32 = 1182;
pub const DQ_RTD388_OHM_TBL_SIZE_1: u32 = 1005;
pub const DQ_RTD388_STEPS_PER_OHM_1: u32 = 32;
pub const DQ_RTD388_LOOKUP_STEP_1: f64 = 0.03125;
pub const DQ_RTD388_RELAY_RON: f64 = 0.18285;
pub const DQ_RTD388_RES_NOMINAL_2: u32 = 100;
pub const DQ_RTD388_MIN_RES_REQ_2: f64 = 23.0;
pub const DQ_RTD388_LUT_GUARDBAND_2: u32 = 1;
pub const DQ_RTD388_OHM_TBL_SIZE_2: u32 = 125;
pub const DQ_RTD388_RANGE0_R_2: u32 = 90;
pub const DQ_RTD388_RANGE1_R_2: u32 = 180;
pub const DQ_RTD388_RANGE2_R_2: u32 = 270;
pub const DQ_RTD388_MIN_RES_LUT_2: f64 = 22.0;
pub const DQ_RTD388_STEPS_PER_OHM_2: u32 = 256;
pub const DQ_RTD388_LOOKUP_STEP_2: f64 = 0.00390625;
pub const DQL_IOCTL388_WR_PRM: u32 = 14;
pub const DQ_RTD388_VREF: f64 = 3.173;
pub const DQ_RTD388_I_SHUNT: f64 = 0.1;
pub const DQ_RTD388_I_SPAN: f64 = 31.73;
pub const DQ_RTD388_I_OFFSET: f64 = 15.865;
pub const DQ_RTD388_I_2A: u32 = 7331108;
pub const DQ_RTD388_T_OFFSET: f64 = 273.15;
pub const DQ_RTD388_T_105_DEGREES: u32 = 11187859;
pub const DQ_RTD388_I_PM4MA: u32 = 8390722;
pub const DQ_RTD388_I_DEFAULT_TRIP: u32 = 8390987;
pub const DQL_IOCTL388_PRM_SETCB: u32 = 1;
pub const DQL_IOCTL388_GET_CB_STAT: u32 = 2;
pub const DQL_IOCTL388_PRM_GETCB: u32 = 3;
pub const DQ_RTD388_ADC_ENB: u32 = 18;
pub const DQ_RTD388_WR_DIAG: u32 = 19;
pub const DQ_RTD388_OUT_CH_0: u32 = 0;
pub const DQ_RTD388_OUT_CH_1: u32 = 1;
pub const DQ_RTD388_OUT_CH_2: u32 = 2;
pub const DQ_RTD388_OUT_CH_3: u32 = 3;
pub const DQ_RTD388_OUT_CH_4: u32 = 4;
pub const DQ_RTD388_OUT_CH_5: u32 = 5;
pub const DQ_RTD388_OUT_CH_6: u32 = 6;
pub const DQ_RTD388_OUT_CH_7: u32 = 7;
pub const DQ_RTD388_I_IN_CH_0: u32 = 16;
pub const DQ_RTD388_I_IN_CH_1: u32 = 17;
pub const DQ_RTD388_I_IN_CH_2: u32 = 18;
pub const DQ_RTD388_I_IN_CH_3: u32 = 19;
pub const DQ_RTD388_I_IN_CH_4: u32 = 20;
pub const DQ_RTD388_I_IN_CH_5: u32 = 21;
pub const DQ_RTD388_I_IN_CH_6: u32 = 22;
pub const DQ_RTD388_I_IN_CH_7: u32 = 23;
pub const DQ_RTD388_T_CH_0: u32 = 32;
pub const DQ_RTD388_T_CH_1: u32 = 33;
pub const DQ_RTD388_T_CH_2: u32 = 34;
pub const DQ_RTD388_T_CH_3: u32 = 35;
pub const DQ_RTD388_T_CH_4: u32 = 36;
pub const DQ_RTD388_T_CH_5: u32 = 37;
pub const DQ_RTD388_T_CH_6: u32 = 38;
pub const DQ_RTD388_T_CH_7: u32 = 39;
pub const DQ_RTD388_D_CH_0: u32 = 48;
pub const DQ_RTD388_D_CH_1: u32 = 49;
pub const DQ_RTD388_D_CH_2: u32 = 50;
pub const DQ_RTD388_D_CH_3: u32 = 51;
pub const DQ_RTD388_D_CH_4: u32 = 52;
pub const DQ_RTD388_D_CH_5: u32 = 53;
pub const DQ_RTD388_D_CH_6: u32 = 54;
pub const DQ_RTD388_D_CH_7: u32 = 55;
pub const DQ_RTD388_CHAN_MASK: u32 = 7;
pub const DQ_RTD388_ADC_CHAN_MASK: u32 = 112;
pub const DQ_RTD388_SEL_CHAN_ALL: u32 = 255;
pub const DQ_RTD388_CAL_OFFSETS: u32 = 32;
pub const DQ_RTD388_GET_CAL_VALUES: u32 = 64;
pub const DQ_RTD388_STS_RLSC7: u32 = 2147483648;
pub const DQ_RTD388_STS_RLSC6: u32 = 1073741824;
pub const DQ_RTD388_STS_RLSC5: u32 = 536870912;
pub const DQ_RTD388_STS_RLSC4: u32 = 268435456;
pub const DQ_RTD388_STS_RLSC3: u32 = 134217728;
pub const DQ_RTD388_STS_RLSC2: u32 = 67108864;
pub const DQ_RTD388_STS_RLSC1: u32 = 33554432;
pub const DQ_RTD388_STS_RLSC0: u32 = 16777216;
pub const DQ_RTD388_STS_CB7_CS: u32 = 8388608;
pub const DQ_RTD388_STS_CB6_CS: u32 = 4194304;
pub const DQ_RTD388_STS_CB5_CS: u32 = 2097152;
pub const DQ_RTD388_STS_CB4_CS: u32 = 1048576;
pub const DQ_RTD388_STS_CB3_CS: u32 = 524288;
pub const DQ_RTD388_STS_CB2_CS: u32 = 262144;
pub const DQ_RTD388_STS_CB1_CS: u32 = 131072;
pub const DQ_RTD388_STS_CB0_CS: u32 = 65536;
pub const DQ_RTD388_STS_ADC7_RDY: u32 = 32768;
pub const DQ_RTD388_STS_ADC6_RDY: u32 = 16384;
pub const DQ_RTD388_STS_ADC5_RDY: u32 = 8192;
pub const DQ_RTD388_STS_ADC4_RDY: u32 = 4096;
pub const DQ_RTD388_STS_ADC3_RDY: u32 = 2048;
pub const DQ_RTD388_STS_ADC2_RDY: u32 = 1024;
pub const DQ_RTD388_STS_ADC1_RDY: u32 = 512;
pub const DQ_RTD388_STS_ADC0_RDY: u32 = 256;
pub const DQ_RTD388_STS_CB7: u32 = 128;
pub const DQ_RTD388_STS_CB6: u32 = 64;
pub const DQ_RTD388_STS_CB5: u32 = 32;
pub const DQ_RTD388_STS_CB4: u32 = 16;
pub const DQ_RTD388_STS_CB3: u32 = 8;
pub const DQ_RTD388_STS_CB2: u32 = 4;
pub const DQ_RTD388_STS_CB1: u32 = 2;
pub const DQ_RTD388_STS_CB0: u32 = 1;
pub const DQ_RTD388_CFG_READ_COUNT: u32 = 1;
pub const DQ_RTD388_CFG_SETCB_LIMIT: u32 = 2;
pub const DQ_RTD388_CFG_SETCB_ENABLES: u32 = 4;
pub const DQ_RTD388_CB_COUNT_MIN: u32 = 0;
pub const DQ_RTD388_CB_COUNT_MAX: u32 = 15;
pub const DQ_RTD388_CB_COUNT_DEFAULT: u32 = 5;
pub const DQ_RTD388_CB_EN_CURRENT: u32 = 1;
pub const DQ_RTD388_CB_EN_TEMPERATURE: u32 = 2;
pub const DQ_RTD388_CSTS_FHF: u32 = 21;
pub const DQ_RTD388_CSTS_CFE: u32 = 20;
pub const DQ_RTD388_CSTS_FF: u32 = 19;
pub const DQ_RTD388_CSTS_RLD: u32 = 18;
pub const DQ_RTD388_CSTS_OC1: u32 = 17;
pub const DQ_RTD388_CSTS_OC0: u32 = 16;
pub const DQ_RTD388_CSTS_RLD_S: u32 = 16;
pub const DQ_RTD388_CSTS_ADC1DR_S: u32 = 8;
pub const DQ_RTD388_CSTS_ADC0DR_S: u32 = 4;
pub const DQ_RTD388_CSTS_OC1_S: u32 = 2;
pub const DQ_RTD388_CSTS_OC0_S: u32 = 1;
pub const DQ_RTD388_LNCL_NEXT: u32 = 31;
pub const DQ_RTD388_RLFDR_DLY7: u32 = 30;
pub const DQ_RTD388_RLFDR_DLY0: u32 = 23;
pub const DQ_RTD388_RLFDR_CHN2: u32 = 22;
pub const DQ_RTD388_RLFDR_CHN0: u32 = 20;
pub const DQ_RTD388_RLFDR_RSV19: u32 = 19;
pub const DQ_RTD388_RLFDR_RSV18: u32 = 18;
pub const DQ_RTD388_RLFDR_RSB: u32 = 131072;
pub const DQ_RTD388_RLFDR_RSA: u32 = 65536;
pub const DQ_RTD388_RLFDR_RD15: u32 = 15;
pub const DQ_RTD388_RLFDR_RD0: u32 = 0;
pub const DQ_RTD388_CL_DATA_MASK: u32 = 4286840831;
pub const DQ_RTD388_CL_CH_SHIFT: u32 = 20;
pub const DQ_RTD388_CHANMASK: u32 = 7;
pub const DQ_RTD388_CL_CH_MASK: u32 = 7340032;
pub const DQ_AO388_RANGE_MASK: u32 = 196608;
pub const DQ_RTD388_CL_DLAY_MASK: u32 = 2139095040;
pub const DQ_RTD388_RLF_DLY_MAX: u32 = 255;
pub const DQ_RTD388_MAX_WR_PER_PKT: u32 = 128;
pub const DQ_RTD388_DEFAULT_RELAY: u32 = 242260;
pub const DQ_RTD388_DEFAULT_RELAY_2: u32 = 215868;
pub const DQ_RTD388_ADCCAL_EN: u32 = 2147483648;
pub const DQ_RTD388_ADCCAL_CB_STS: u32 = 1073741824;
pub const DQ_RTD388_ADCCAL_CH_ID2: u32 = 26;
pub const DQ_RTD388_ADCCAL_CH_ID0: u32 = 24;
pub const DQ_RTD388_ADCCAL_MSB: u32 = 23;
pub const DQ_RTD388_ADCCAL_LSB: u32 = 0;
pub const DQ_RTD388_NAMELEN: u32 = 16;
pub const DQ_L401_CHAN: u32 = 24;
pub const DQ_L414_CHAN: u32 = 14;
pub const DQ_L414_ICHAN: u32 = 4;
pub const DQ_L418_CHAN: u32 = 18;
pub const DQ_L430_CHAN: u32 = 30;
pub const DQ_L401_INFOSZ: u32 = 4096;
pub const DQ_L401_BASE: u32 = 66000000;
pub const DQ_L401_MAXCLFRQ: u32 = 100000;
pub const DQ_L401_MAXCVFRQ: u32 = 100000;
pub const DQL_IOCTL401_CFG_DI_CHANGE: u32 = 13;
pub const DQL_IOCTL401_WAIT_DI_CHANGE: u32 = 14;
pub const DQ_L401_MODESCAN: u32 = 0;
pub const DQ_L401_MODEDGE: u32 = 65536;
pub const DQ_L401_MODEFIFO: u32 = 131072;
pub const DQ_L401_MODECONT: u32 = 196608;
pub const DQ_L401_HYSTEN: u32 = 262144;
pub const DQIOCTL_GET414STATUS: u32 = 8;
pub const DQIOCTL_SET414CONFIG: u32 = 9;
pub const DQ_414_PDNAEX_GET_CFG: u32 = 842155409;
pub const DQ_MUX_CMD_PORT0: u32 = 0;
pub const DQ_MUX_CMD_A_RELAYS: u32 = 1;
pub const DQ_MUX_CMD_B_RELAYS: u32 = 2;
pub const DQ_MUX_CMD_C_RELAYS: u32 = 3;
pub const DQ_MUX_CMD_PORT1: u32 = 4;
pub const DQ_MUX414_CFG_DI_MODE: u32 = 67108864;
pub const DQ_MUX414_CFG_DI_POL: u32 = 33554432;
pub const DQ_MUX414_STS_ADCDR: u32 = 131072;
pub const DQ_MUX414_STS_OVR: u32 = 65536;
pub const DQ_MUX414_STS_BUSY: u32 = 8;
pub const DQ_MUX414_STS_SYNCWAIT: u32 = 4;
pub const DQ_MUX414_STS_RDY: u32 = 2;
pub const DQ_MUX414_STS_DI_STS: u32 = 1;
pub const DQ_MUX414_PORT_CH13_D1: u32 = 27;
pub const DQ_MUX414_PORT_CH13_D0: u32 = 26;
pub const DQ_MUX414_PORT_CH0_D1: u32 = 1;
pub const DQ_MUX414_PORT_CH0_D0: u32 = 0;
pub const DQ_MUX414_PORT0_CH_OFF: u32 = 0;
pub const DQ_MUX414_PORT0_CH_A: u32 = 1;
pub const DQ_MUX414_PORT0_CH_B: u32 = 2;
pub const DQ_MUX414_PORT0_CH_C: u32 = 3;
pub const DQ_MUX414_PORT1_CH17_D1: u32 = 7;
pub const DQ_MUX414_PORT1_CH17_D0: u32 = 6;
pub const DQ_MUX414_PORT1_CH14_D1: u32 = 1;
pub const DQ_MUX414_PORT1_CH14_D0: u32 = 0;
pub const DQ_MUX414_PORT1_CH_OFF: u32 = 0;
pub const DQ_MUX414_PORT1_CH_A: u32 = 1;
pub const DQ_MUX414_PORT1_CH_B: u32 = 2;
pub const DQ_MUX414_PORT1_CH_C: u32 = 3;
pub const DQ_MUX414_X_RELAYS_IMM: u32 = 536870912;
pub const DQ_MUX414_SET_BBM: u32 = 268435456;
pub const DQ_MUX414_W_RELAY_A: u32 = 1;
pub const DQ_MUX414_W_RELAY_B: u32 = 2;
pub const DQ_MUX414_W_RELAY_BA: u32 = 3;
pub const DQ_MUX414_W_RELAY_C: u32 = 4;
pub const DQ_MUX414_W_RELAY_CA: u32 = 5;
pub const DQ_MUX414_W_RELAY_CB: u32 = 6;
pub const DQ_MUX414_W_RELAY_CBA: u32 = 7;
pub const DQ_MUX414_W_PORT0: u32 = 16;
pub const DQ_MUX414_W_PORT1: u32 = 32;
pub const DQ_MUX414_W_PORT10: u32 = 48;
pub const DQ_MUX414_W_OPTION_SIN: u32 = 2147483648;
pub const DQ_MUX414_W_OPTION_SOUT: u32 = 1073741824;
pub const DQ_MUX414_W_OPTION_NO_BBM: u32 = 268435456;
pub const DQ_MUX414_ADC_DATA_EOC: u32 = 262144;
pub const DQ_MUX414_ADC_DATA_SIG: u32 = 65536;
pub const DQ_MUX414_ADC_DATA_MSB: u32 = 32768;
pub const DQ_MUX414_ADC_DATA_LSB: u32 = 1;
pub const DQ_MUX414_ADC_DATA_ERR: u32 = 524287;
pub const DQ_MUX418_ADC_VREF: f64 = 2.5;
pub const DQ_MUX418_ADC_OFFSET: f64 = 1.25;
pub const DQ_MUX418_ADC_STEP: f64 = 0.000038147554741741054;
pub const DQ_MUX418_V_SCALER: f64 = 23.1;
pub const DQ_MUX418_T_OFFSET: f64 = 273.0;
pub const DQIOCTL_GET461STATUS: u32 = 10;
pub const DQIOCTL_SET461CONFIG: u32 = 11;
pub const DQIOCTL_GET461COUNT: u32 = 12;
pub const DQ_MUX461_CMD_2XCH: u32 = 0;
pub const DQ_MUX461_CMD_RELAYS_NOPROT: u32 = 47;
pub const DQ_MUX461_STS_ADCDR: u32 = 131072;
pub const DQ_MUX461_STS_OVR: u32 = 65536;
pub const DQ_MUX461_STS_BUSY: u32 = 8;
pub const DQ_MUX461_STS_SYNCWAIT: u32 = 4;
pub const DQ_MUX461_STS_RDY: u32 = 2;
pub const DQ_MUX461_STS_DI_STS: u32 = 1;
pub const DQ_MUX461_2XCH_D4: u32 = 1073741824;
pub const DQ_MUX461_2XCH_D3: u32 = 536870912;
pub const DQ_MUX461_2XCH_Y_B_EN: u32 = 2097152;
pub const DQ_MUX461_2XCH_Y_A_EN: u32 = 1048576;
pub const DQ_MUX461_2XCH_D2: u32 = 16384;
pub const DQ_MUX461_2XCH_D1: u32 = 8192;
pub const DQ_MUX461_2XCH_SIN: u32 = 2147483648;
pub const DQ_MUX461_2XCH_SOUT: u32 = 32768;
pub const DQ_MUX461_2XCH_X_B_EN: u32 = 32;
pub const DQ_MUX461_2XCH_X_A_EN: u32 = 16;
pub const DQ_MUX461_2C_MEAS_V: u32 = 16384;
pub const DQ_MUX461_2C_MEAS_I: u32 = 536870912;
pub const DQ_MUX461_2C_MEAS_RES2: u32 = 16384;
pub const DQ_MUX461_2C_MEAS_RES4: u32 = 1073758208;
pub const DQ_MUX461_2C_CHAN: u32 = 13;
pub const DQ_MUX461_NUM_CNT_CEL: u32 = 3;
pub const DQ_MUX461_A_RELAY_COUNT: u32 = 13;
pub const DQ_MUX461_B_RELAY_COUNT: u32 = 13;
pub const DQ_MUX461_D_RELAY_COUNT: u32 = 4;
pub const DQ_MUX461_TOTAL_RELAYS: u32 = 30;
pub const DQ_MUX461_W_OPTION_SIN: u32 = 2;
pub const DQ_MUX461_W_OPTION_SOUT: u32 = 1;
pub const DQ_MUX461_W_A0: u32 = 1;
pub const DQ_MUX461_W_A12: u32 = 4096;
pub const DQ_MUX461_W_B0: u32 = 1;
pub const DQ_MUX461_W_B12: u32 = 4096;
pub const DQ_MUX461_W_D1: u32 = 1;
pub const DQ_MUX461_W_D2: u32 = 2;
pub const DQ_MUX461_W_D3: u32 = 4;
pub const DQ_MUX461_W_D4: u32 = 8;
pub const DQ_MUX461_CFG_DCDC_2_42_V: u32 = 3;
pub const DQ_MUX461_CFG_DCDC_3_3_V: u32 = 2;
pub const DQ_MUX461_CFG_DCDC_4_2_V: u32 = 1;
pub const DQ_MUX461_CFG_DCDC_5_1_V: u32 = 0;
pub const DQ_L401_NAMELEN: u32 = 20;
pub const DQ_L414_NAMELEN: u32 = 20;
pub const DQ_L430_NAMELEN: u32 = 16;
pub const DQ_DIO403_LINES: u32 = 48;
pub const DQ_DIO403_CHAN: u32 = 2;
pub const DQ_DIO403_CHANSVC: u32 = 2;
pub const DQ_DIO403_INFOSZ: u32 = 4096;
pub const DQ_DIO403_BASE: u32 = 66000000;
pub const DQ_DIO403_PORTS: u32 = 6;
pub const DQ_DIO448_LINES: u32 = 48;
pub const DQ_DIO448_CHAN: u32 = 2;
pub const DQ_DIO448_CHANSVC: u32 = 52;
pub const DQ_DIO448_INFOSZ: u32 = 4096;
pub const DQ_DIO448_BASE: u32 = 66000000;
pub const DQL_IOCTL403_CFG_DI_CHANGE: u32 = 11;
pub const DQL_IOCTL403_WAIT_DI_CHANGE: u32 = 12;
pub const DQ_DIO448_PORTS: u32 = 2;
pub const DQ_DIO448_RANGE: f64 = 45.0;
pub const DQ_DIO448_STEP: f64 = 0.000686646;
pub const DQ_DIO448_CALDACS: u32 = 4;
pub const DQ_DIO448_MIN_uVCnt: u32 = 600;
pub const DQ_DIO448_MAX_uVCnt: u32 = 800;
pub const DQ_DIO448_MAX_Offset: u32 = 250;
pub const DQ_DIO448_MAX_Hyst: f64 = 30.0;
pub const DQ_DIO403_MAXCVFRQ: u32 = 10000;
pub const DQ_DIO403_MODESCAN: u32 = 0;
pub const DQ_DIO403_MODEFIFO: u32 = 131072;
pub const DQ_DIO403_MODECONT: u32 = 196608;
pub const DQ_DIO403_ENPORT5: u32 = 268435456;
pub const DQ_DIO403_ENPORT4: u32 = 134217728;
pub const DQ_DIO403_ENPORT3: u32 = 67108864;
pub const DQ_DIO403_ENPORT2: u32 = 33554432;
pub const DQ_DIO403_ENPORT1: u32 = 16777216;
pub const DQ_DIO403_ENPORT0: u32 = 8388608;
pub const DQ_DIO403_FIFO_GET_DATA: u32 = 16;
pub const DQ_DIO403_FIFO_SET_DATA: u32 = 16;
pub const DQL_CHAN448_PWR0: u32 = 48;
pub const DQL_CHAN448_PWR1: u32 = 49;
pub const DQL_CHAN448_GNDPIN: u32 = 50;
pub const DQL_CHAN448_VREF25: u32 = 51;
pub const DQL_CHAN448_STATUS: u32 = 52;
pub const DQL_CHAN448_TCJC: u32 = 88;
pub const DQL_CHAN448_GNDPINDI: u32 = 89;
pub const DQL_CHAN448_VREF25DI: u32 = 90;
pub const DQL_CHAN448_GNDDI: u32 = 91;
pub const DQL_CHAN448_ADCCHAN: u32 = 64;
pub const DQ_DIO403_NAMELEN: u32 = 10;
pub const DQ_DIO448_NAMELEN: u32 = 10;
pub const DQDIO448_CFGSET: u32 = 1;
pub const DQDIO448_ADCDLYSET: u32 = 2;
pub const DQDIO448_SETPARAM_SET: u32 = 0;
pub const DQDIO448_GETPARAM_GET: u32 = 0;
pub const DQL_IOCTL448_SET_LEVELS: u32 = 6;
pub const DQL_IOCTL448_SET_DBREGS: u32 = 7;
pub const DQ_DIO416_CHAN: u32 = 16;
pub const DQ_DIO416_INFOSZ: u32 = 4096;
pub const DQ_DIO416_BASE: u32 = 66000000;
pub const DQ_DIO416_MAXCLFRQ: u32 = 100000;
pub const DQ_DIO416_MAXCVFRQ: u32 = 100000;
pub const DQ_DIO432_CHAN: u32 = 32;
pub const DQ_DIO432_INFOSZ: u32 = 4096;
pub const DQ_DIO432_BASE: u32 = 66000000;
pub const DQ_DIO432_MAXCLFRQ: u32 = 100000;
pub const DQ_DIO432_MAXCVFRQ: u32 = 100000;
pub const DQL_DIO416_CFG: u32 = 8192;
pub const DQL_DIO416_PORT0OUT: u32 = 8196;
pub const DQL_DIO416_DISCFG: u32 = 8200;
pub const DQL_DIO416_DISSTS: u32 = 8200;
pub const DQL_DIO416_ADCSTS: u32 = 8204;
pub const DQL_DIO416_ADCSPD: u32 = 8204;
pub const DQL_DIO416_PORT0OCS: u32 = 8208;
pub const DQL_DIO416_PORT0OCM: u32 = 8208;
pub const DQL_DIO416_PORT0UCS: u32 = 8212;
pub const DQL_DIO416_PORT0UCM: u32 = 8212;
pub const DQL_DIO416_RDCNT: u32 = 8216;
pub const DQL_DIO416_ADCDATA0: u32 = 8220;
pub const DQL_DIO416_ADCCFG0: u32 = 8220;
pub const DQL_DIO416_ADCDATA1: u32 = 8224;
pub const DQL_DIO416_ADCCFG1: u32 = 8224;
pub const DQL_DIO416_DISDIV: u32 = 8228;
pub const DQL_DIO416_DOUTACT: u32 = 8232;
pub const DQL_DIO416_OCLS: u32 = 8256;
pub const DQL_DIO416_OCLE: u32 = 8316;
pub const DQL_DIO416_UCLS: u32 = 8320;
pub const DQL_DIO416_UCLE: u32 = 8380;
pub const DQL_DIO416_ADCS: u32 = 8384;
pub const DQL_DIO416_ADCE: u32 = 8444;
pub const DQ_L416_ADCSPD_190: u32 = 1;
pub const DQ_L416_ADCSPD_130: u32 = 2;
pub const DQ_L416_ADCSPD_85: u32 = 3;
pub const DQ_L416_ADCSPD_45: u32 = 4;
pub const DQ_L416_ADCSPD_22: u32 = 5;
pub const DQ_L416_ADCSPD_12: u32 = 6;
pub const DQ_L416_ADCSPD_6_5: u32 = 7;
pub const DQ_L416_ADCSPD_3_2: u32 = 8;
pub const DQ_L416_ADCSPD_1_6: u32 = 9;
pub const DQ_L416_ADCSPD_0_8: u32 = 15;
pub const DQ_L416_ADCSPD_UONLY: u32 = 31;
pub const DQ_L416_ADCSPD_NOBUSY: u32 = 30;
pub const DQ_L416_ADCSPD_24BIT: u32 = 29;
pub const DQ_L416_ADCSPD_ADCFE: u32 = 28;
pub const DQ_L416_ADCSPD_DIVMSB: u32 = 27;
pub const DQ_L416_ADCSPD_DIVLSB: u32 = 20;
pub const DQ_L416_ADCSPD_ASL1BIT: u32 = 19;
pub const DQ_L416_ADCSPD_MSB: u32 = 3;
pub const DQ_L416_ADCSPD_LSB: u32 = 0;
pub const DQ_L416_ADCSTS_ADC1CH_MSB: u32 = 18;
pub const DQ_L416_ADCSTS_ADC1CH_LSB: u32 = 16;
pub const DQ_L416_ADCSTS_ADC0CH_MSB: u32 = 14;
pub const DQ_L416_ADCSTS_ADC0CH_LSB: u32 = 12;
pub const DQ_L416_ADCSTS_ADC1TO: u32 = 11;
pub const DQ_L416_ADCSTS_ADC1SM_MSB: u32 = 10;
pub const DQ_L416_ADCSTS_ADC1SM_LSB: u32 = 8;
pub const DQ_L416_ADCSTS_ADC0TO: u32 = 7;
pub const DQ_L416_ADCSTS_ADC0SM_MSB: u32 = 6;
pub const DQ_L416_ADCSTS_ADC0SM_LSB: u32 = 4;
pub const DQ_L416_ADCDATA_OR: u32 = 3;
pub const DQ_L416_ADCDATA_UR: u32 = 1;
pub const DQ_L416_ADCDATA_OK: u32 = 0;
pub const DQ_L416_ADCDATA_STS1: u32 = 28;
pub const DQ_L416_ADCDATA_STS0: u32 = 27;
pub const DQ_L416_ADCDATA_MSB: u32 = 23;
pub const DQ_L416_ADCDATA_LSB: u32 = 0;
pub const DQ_LSR416_VCCIS: u32 = 23;
pub const DQ_LSR416_CLKIN_TRIG: u32 = 22;
pub const DQ_LSR416_CLOUT: u32 = 20;
pub const DQL_DIO432_BASES: u32 = 8192;
pub const DQL_DIO432_BASEE: u32 = 8444;
pub const DQL_DIO432_DIN: u32 = 8192;
pub const DQL_DIO432_DOUT: u32 = 8196;
pub const DQL_DIO432_BLK0S: u32 = 8448;
pub const DQL_DIO432_BLK0E: u32 = 8956;
pub const DQL_DIO432_BLK0: u32 = 256;
pub const DQL_DIO432_BLK1S: u32 = 8960;
pub const DQL_DIO432_BLK1E: u32 = 9468;
pub const DQL_DIO432_BLK1: u32 = 768;
pub const DQL_DIO432_BLK2S: u32 = 9472;
pub const DQL_DIO432_BLK2E: u32 = 9724;
pub const DQL_DIO432_BLK2: u32 = 1280;
pub const DQL_DIO432_BLK3S: u32 = 9728;
pub const DQL_DIO432_BLK3E: u32 = 9980;
pub const DQL_DIO432_BLK3: u32 = 1536;
pub const DQL_DIO432_DIOS: u32 = 9984;
pub const DQL_DIO432_CLKDIV: u32 = 9992;
pub const DQL_DIO432_PWMDIV: u32 = 9996;
pub const DQL_DIO432_DIODIVS: u32 = 10240;
pub const DQL_DIO432_DIODIVE: u32 = 10364;
pub const DQL_DIO432_DIOCFGS: u32 = 10368;
pub const DQL_DIO432_DIOCFGE: u32 = 10492;
pub const DQL_DIO432_DIOUSRS: u32 = 10496;
pub const DQL_DIO432_DIOUSRE: u32 = 10620;
pub const DQL_DIO432_DIOE: u32 = 10620;
pub const DQL_DIO432_VINCFG: u32 = 0;
pub const DQL_DIO432_VINSTS: u32 = 4;
pub const DQL_DIO432_USERCFG: u32 = 8;
pub const DQL_DIO432_USERDATA: u32 = 12;
pub const DQL_DIO432_ADCDATAS: u32 = 128;
pub const DQL_DIO432_ADCDATAE: u32 = 188;
pub const DQL_DIO432_VINCFG_UONLY: u32 = 31;
pub const DQL_DIO432_VINCFG_24BIT: u32 = 30;
pub const DQL_DIO432_VINCFG_ADCFE: u32 = 29;
pub const DQL_DIO432_VINCFG_ASL1BIT: u32 = 28;
pub const DQL_DIO432_VINCFG_DIVMSB: u32 = 27;
pub const DQL_DIO432_VINCFG_DIVLSB: u32 = 20;
pub const DQL_DIO432_VINCFG_SPEEDMSB: u32 = 19;
pub const DQL_DIO432_VINCFG_SPEEDLSB: u32 = 16;
pub const DQL_DIO432_VINCFG_DIMSB: u32 = 15;
pub const DQL_DIO432_VINCFG_DILSB: u32 = 0;
pub const DQL_DIO432_OFFSET0: u32 = 256;
pub const DQL_DIO432_OFFSET1: u32 = 768;
pub const DQ_L416_MAXCURRENT: f64 = 2.0;
pub const DQ_L416_MINCURRENT: f64 = -2.0;
pub const DQ_L432_MAXCURRENT: f64 = 2.0;
pub const DQ_L432_MINCURRENT: f64 = -2.0;
pub const DQ_L432_MAXVOLTAGE: f64 = 63.75;
pub const DQ_L432_MINVOLTAGE: f64 = -63.75;
pub const DQ_L416_MAXRAW: u32 = 16777215;
pub const DQ_L416_MINRAW: u32 = 0;
pub const DQ_L432_MAXRAW_16BIT: u32 = 65535;
pub const DQ_L432_MAXRAW_24BIT: u32 = 16777215;
pub const DQ_L432_MINRAW: u32 = 0;
pub const DQ_L416_MODESCAN: u32 = 0;
pub const DQ_L416_MODEFIFO: u32 = 131072;
pub const DQ_L416_MODECONT: u32 = 196608;
pub const DQDIO432_SETPARAM_SET: u32 = 0;
pub const DQDIO432_SETPARAM_PWM: u32 = 1;
pub const DQDIO432_GETPARAM_GET: u32 = 0;
pub const DQDIO432_GETPARAM_PWM: u32 = 1;
pub const DQL_IOCTL432_SETDCDC: u32 = 8;
pub const DQ_L416_NAMELEN: u32 = 20;
pub const DQ_L432_NAMELEN: u32 = 10;
pub const DQDIO432_PWM_DISABLED: u32 = 0;
pub const DQDIO432_PWM_SOFTSTART: u32 = 1;
pub const DQDIO432_PWM_SOFTSTOP: u32 = 2;
pub const DQDIO432_PWM_SOFTBOTH: u32 = 3;
pub const DQDIO432_PWM_MODE: u32 = 4;
pub const DQDIO432_PWM_MODE_GATED: u32 = 5;
pub const DQDIO432_CFGSET: u32 = 1;
pub const DQDIO432_DISCFGSET: u32 = 2;
pub const DQDIO432_ADCSPDSET: u32 = 4;
pub const DQDIO432_PORT0OCMSET: u32 = 8;
pub const DQDIO432_PORT0UCMSET: u32 = 16;
pub const DQDIO432_RDCNTSET: u32 = 32;
pub const DQDIO432_DISDIVSET: u32 = 64;
pub const DQ_DIO432_PORT0OCS_CH: u32 = 64;
pub const DQ_DIO432_PORT1OCS_CH: u32 = 65;
pub const DQ_DIO432_PORT0ACT_CH: u32 = 66;
pub const DQ_DIO432_PORT1ACT_CH: u32 = 67;
pub const DQ_DIO432_PORT0DISSTS_CH: u32 = 68;
pub const DQ_DIO432_PORT1DISSTS_CH: u32 = 69;
pub const DQ_DIO432_DIOUSRS: u32 = 32;
pub const DQ_DIO449_LINES: u32 = 48;
pub const DQ_DIO449_PORTS: u32 = 2;
pub const DQ_DIO449_LINES_PER_PORT: u32 = 24;
pub const DQ_DIO449_READ_BLOCK_VALS: u32 = 256;
pub const DQ_DIO449_READ_BLOCK_SIZE: u32 = 257;
pub const DQ_DIO449_CHAN: u32 = 2;
pub const DQ_DIO449_INFOSZ: u32 = 4096;
pub const DQ_DIO449_BASE: u32 = 66000000;
pub const DQ_DIO449_BASE_30MHZ: u32 = 30720000;
pub const DQ_DIO449_ADC_CLOCK_FACTOR: f64 = 16.0;
pub const DQ_DIO449_MAXCVFRQ: u32 = 5120;
pub const DQ_DIO449_MINCVFRQ: u32 = 1;
pub const DQ_DIO449_SPAN: f64 = 430.4;
pub const DQ_DIO449_OFFSET: f64 = 215.2;
pub const DQ_DIO449_STEP: f64 = 0.00656748302433814;
pub const DQ_DIO449_STEP_10: f64 = 0.000656748302433814;
pub const DQ_DIO449_STEP_5: f64 = 0.001313496604867628;
pub const DQ_DIO449_STEP_2: f64 = 0.00328374151216907;
pub const DQ_DIO449_OFFSET_10: f64 = 21.52;
pub const DQ_DIO449_OFFSET_5: f64 = 43.04;
pub const DQ_DIO449_OFFSET_2: f64 = 107.6;
pub const DQ_DIO449_GAINS: u32 = 4;
pub const DQ_DIO449_GAIN1: u32 = 0;
pub const DQ_DIO449_GAIN2: u32 = 1;
pub const DQ_DIO449_GAIN5: u32 = 2;
pub const DQ_DIO449_GAIN10: u32 = 3;
pub const DQ_DIO449_MODE_DC: u32 = 4;
pub const DQ_DIO449_MODE_AC: u32 = 0;
pub const DQ_DIO449_GET_MODE_DC: u32 = 2;
pub const DQL_CHAN449_ADCCHAN_START: u32 = 64;
pub const DQ_DIO449_MAX_LOW: f64 = 150.0;
pub const DQ_DIO449_MAX_HIGH: f64 = 150.0;
pub const DQDIO449_PORT0_IND: u32 = 0;
pub const DQDIO449_PORT1_IND: u32 = 1;
pub const DQDIO449_PORT0_IN: u32 = 2;
pub const DQDIO449_PORT1_IN: u32 = 3;
pub const DQDIO449_PORT0_CSLH: u32 = 4;
pub const DQDIO449_PORT1_CSLH: u32 = 5;
pub const DQDIO449_PORT0_CSHL: u32 = 6;
pub const DQDIO449_PORT1_CSHL: u32 = 7;
pub const DQDIO449_TSTV: u32 = 8;
pub const DQDIO449_BDATA_DC_FLAG: u32 = 1048576;
pub const DQDIO449_DISABLE_PDOWN_V: u32 = 4096;
pub const DQL_IOCTL449_SET_LEVELS: u32 = 6;
pub const DQL_IOCTL449_SET_DBREGS: u32 = 7;
pub const DQL_IOCTL449_CFG_DI_CHANGE: u32 = 8;
pub const DQL_IOCTL449_WAIT_DI_CHANGE: u32 = 9;
pub const DQDIO449_SETPARAM_SET: u32 = 1;
pub const DQDIO449_SET_ACDC: u32 = 2;
pub const DQDIO449_SET_GMUX: u32 = 3;
pub const DQDIO449_SET_GDACS: u32 = 4;
pub const DQDIO449_SET_AVERAGING_MODE: u32 = 5;
pub const DQDIO449_AVG_MODE_UNCHANGED: u32 = 65535;
pub const DQ_DIO449_DCMODE_AVG: u32 = 32768;
pub const DQ_DIO449_DCMODE_NO_AVG: u32 = 0;
pub const DQDIO449_SET_AVERAGING_MODE_DCMODE_NO_AVG: u32 = 0;
pub const DQDIO449_SET_AVERAGING_MODE_DCMODE_AVG: u32 = 1;
pub const DQDIO449_GETPARAM_GET: u32 = 1;
pub const DQDIO449_GET_MODE_GAIN: u32 = 2;
pub const DQDIO449_GET_MEM_BLOCK: u32 = 3;
pub const DQDIO449_GET_AC_STATS: u32 = 4;
pub const DQDIO449_SET_LEV_ACV_MAX_G3: f64 = 18.8;
pub const DQDIO449_SET_LEV_ACV_MAX_G2: f64 = 37.5;
pub const DQDIO449_SET_LEV_ACV_MAX_G1: f64 = 75.0;
pub const DQDIO449_SET_LEV_DCV_MAX_G3: f64 = 18.8;
pub const DQDIO449_SET_LEV_DCV_MAX_G2: f64 = 37.5;
pub const DQDIO449_SET_LEV_DCV_MAX_G1: f64 = 75.0;
pub const DQ_DIO449_DEFLT_DC_DEBOUNCE: u32 = 6;
pub const DQ_DIO449_DEFLT_AC_DEBOUNCE: u32 = 90;
pub const DQ_DIO449_MODESCAN: u32 = 0;
pub const DQ_DIO449_MODEFIFO: u32 = 131072;
pub const DQ_DIO449_MODECONT: u32 = 196608;
pub const DQ_DIO449_FIFO_GET_DATA: u32 = 16;
pub const DQ_DIO449_FIFO_SET_DATA: u32 = 16;
pub const DQ_DIO449_NAMELEN: u32 = 10;
pub const DQ_DIO462_CHAN: u32 = 12;
pub const DQ_DIO462_CH_MASK: u32 = 15;
pub const DQ_DIO462_INFOSZ: u32 = 4096;
pub const DQ_DIO462_BASE: u32 = 66000000;
pub const DQ_DIO462_ADC_CHAN_CHAN: u32 = 5;
pub const DQ_DIO462_ADC_CHANS: u32 = 60;
pub const DQ_DIO462_ADC_CHAN_MASK: u32 = 7;
pub const DQ_DIO462_MAXCVFRQ: f64 = 100000.0;
pub const DQ_DIO462_SUBCH_V_NO: u32 = 0;
pub const DQ_DIO462_SUBCH_I_AC: u32 = 1;
pub const DQ_DIO462_SUBCH_I_DC: u32 = 2;
pub const DQ_DIO462_SUBCH_V_NC: u32 = 3;
pub const DQ_DIO462_SUBCH_THERM: u32 = 4;
pub const DQ_DIO462_DISABLE_BREAKER: u32 = 5;
pub const DQ_DIO462_UNDER_LIMIT_OFFS: u32 = 16;
pub const DQ_DIO462_CL_MASK: u32 = 127;
pub const DQ_DIO462_CL_UNCALFLAG: u32 = 128;
pub const DQ_DIO462_ISO_DC_NUM: u32 = 4;
pub const DQ_DIO462_DEF_GAIN_CAL: u32 = 32768;
pub const DQ_DIO462_DEF_OFFSET_CAL: u32 = 0;
pub const DQ_DIO462_ISH: f64 = 0.02;
pub const DQ_DIO462_ADC_VREF: f64 = 3.0;
pub const DQ_DIO462_I_SCALER: f64 = 50.0;
pub const DQ_DIO462_IAC_ADCGAIN: f64 = 1.0;
pub const DQ_DIO462_IAC_BGAIN: f64 = 19.21;
pub const DQ_DIO462_IAC_SPAN: f64 = 3.0;
pub const DQ_DIO462_IAC_SCALER: f64 = 2.6028110359187924;
pub const DQ_DIO462_IDC_ADCGAIN: f64 = 8.0;
pub const DQ_DIO462_IDC_SPAN: f64 = 0.375;
pub const DQ_DIO462_IDC_SCALER: f64 = -50.0;
pub const DQ_DIO462_V_ADCGAIN: f64 = 1.0;
pub const DQ_DIO462_V_SPAN: f64 = 3.0;
pub const DQ_DIO462_V_SCALER: f64 = 101.0;
pub const DQ_DIO462_T_OFFSET: f64 = 273.0;
pub const DQ_DIO462_ADC_EOC: u32 = 262144;
pub const DQ_DIO462_ADC_SIG: u32 = 65536;
pub const DQ_DIO462_ADC_MSB: u32 = 32768;
pub const DQ_L462_MAX_P_DCVOLT: f64 = 151.5;
pub const DQ_L462_MAX_N_DCVOLT: f64 = -30.0;
pub const DQ_L462_MAX_N_DCSPAN: f64 = -1.5;
pub const DQ_L462_MAX_ACCURRENT: f64 = 3.0;
pub const DQ_L462_MAX_P_DCCURRENT: f64 = 3.0;
pub const DQ_L462_MAX_N_DCCURRENT: f64 = -3.0;
pub const DQL_LCR_462_LED: u32 = 2;
pub const DQL_LCR_462_DCEN: u32 = 1;
pub const DQDIO462_SETPARAM_SET: u32 = 16;
pub const DQDIO462_SETPARAM_LIMITS: u32 = 17;
pub const DQDIO462_GETPARAM_GET: u32 = 16;
pub const DQ_DIO462_ADC0_CFG_G1: u32 = 45184;
pub const DQ_DIO462_ADC1_CFG_G1: u32 = 47232;
pub const DQ_DIO462_ADC1_CFG_G8: u32 = 47234;
pub const DQ_DIO462_ADC2_CFG_G1: u32 = 45440;
pub const DQ_DIO462_ADC2_CFG_G8: u32 = 45442;
pub const DQ_DIO462_ADC3_CFG_G1: u32 = 47488;
pub const DQ_DIO462_ADC4_CFG: u32 = 45248;
pub const DQ_DIO462_ADC_SETTLE_1: u32 = 16;
pub const DQ_DIO462_ADC0_CFG_G1_2X: u32 = 45192;
pub const DQ_DIO462_ADC1_CFG_G1_2X: u32 = 47240;
pub const DQ_DIO462_ADC1_CFG_G8_2X: u32 = 47243;
pub const DQ_DIO462_ADC2_CFG_G1_2X: u32 = 45448;
pub const DQ_DIO462_ADC2_CFG_G2_2X: u32 = 45449;
pub const DQ_DIO462_ADC2_CFG_G4_2X: u32 = 45450;
pub const DQ_DIO462_ADC2_CFG_G8_2X: u32 = 45451;
pub const DQ_DIO462_ADC3_CFG_G1_2X: u32 = 47496;
pub const DQ_DIO462_ADC_SETTLE_1_2X: u32 = 8;
pub const DQ_DIO462_DCDCCFG_MAX: u32 = 95;
pub const DQ_DIO462_DCDCCFG_MIN: u32 = 30;
pub const DQ_DIO462_DCDCCFG: u32 = 95;
pub const DQ_DIO462_DCDCX_START: u32 = 3;
pub const DQ_DIO462_DCDCX_WIDTH: u32 = 11;
pub const DQ_DIO462_DCDCX_CH_SP: u32 = 23;
pub const DQ_DIO462_DCDCX_0: u32 = 917507;
pub const DQ_DIO462_DCDCX_1: u32 = 2424858;
pub const DQ_DIO462_DCDCX_2: u32 = 3932209;
pub const DQ_DIO462_DCDCX_3: u32 = 5439560;
pub const DQ_DIO462_DFLT_RDCNT: u32 = 3;
pub const DQ_L462_MAXCURRENT: f64 = 3.0;
pub const DQ_L462_MINCURRENT: f64 = -3.0;
pub const DQ_L462_MAXRAW: u32 = 65535;
pub const DQ_L462_MINRAW: u32 = 0;
pub const DQ_L462_NAMELEN: u32 = 20;
pub const DQDIO462_CFGSET: u32 = 1;
pub const DQDIO462_PORTOCMSET: u32 = 8;
pub const DQDIO462_PORTUCMSET: u32 = 16;
pub const DQDIO462_RDCNTSET: u32 = 32;
pub const DQDIO462_ADCCFG0SET: u32 = 128;
pub const DQDIO462_ADCCFG1SET: u32 = 256;
pub const DQDIO462_ADCCFG2SET: u32 = 512;
pub const DQDIO462_ADCCFG3SET: u32 = 1024;
pub const DQDIO462_ADCCFG4SET: u32 = 2048;
pub const DQDIO462_DCDCCFGSET: u32 = 4096;
pub const DQDIO462_DCDCXSET: u32 = 8192;
pub const DQ_L500_BAUD_110: u32 = 0;
pub const DQ_L500_BAUD_300: u32 = 268435456;
pub const DQ_L500_BAUD_600: u32 = 536870912;
pub const DQ_L500_BAUD_1200: u32 = 805306368;
pub const DQ_L500_BAUD_2400: u32 = 1073741824;
pub const DQ_L500_BAUD_4800: u32 = 1342177280;
pub const DQ_L500_BAUD_9600: u32 = 1610612736;
pub const DQ_L500_BAUD_14400: u32 = 1879048192;
pub const DQ_L500_BAUD_19200: u32 = 2147483648;
pub const DQ_L500_BAUD_28800: u32 = 2415919104;
pub const DQ_L500_BAUD_38400: u32 = 2684354560;
pub const DQ_L500_BAUD_57600: u32 = 2952790016;
pub const DQ_L500_BAUD_115200: u32 = 3221225472;
pub const DQ_L500_WIDTH_5: u32 = 0;
pub const DQ_L500_WIDTH_6: u32 = 67108864;
pub const DQ_L500_WIDTH_7: u32 = 134217728;
pub const DQ_L500_WIDTH_8: u32 = 201326592;
pub const DQ_L500_PARITY_EVEN: u32 = 0;
pub const DQ_L500_PARITY_ODD: u32 = 16777216;
pub const DQ_L500_PARITY_NONE: u32 = 33554432;
pub const DQ_L500_STOP_1: u32 = 0;
pub const DQ_L500_STOP_1_5: u32 = 4194304;
pub const DQ_L500_STOP_2: u32 = 8388608;
pub const DQL_IOCTL500_SET_MSG_TIMER: u32 = 1;
pub const DQL_IOCTL500_SET_MSG_TERM: u32 = 2;
pub const DQL_IOCTL500_SET_MSG_LEN: u32 = 3;
pub const DQ_L501_CHAN: u32 = 4;
pub const DQ_L508_CHAN: u32 = 8;
pub const DQ_L501_INFOSZ: u32 = 4096;
pub const DQ_L501_BASE_66: u32 = 66000000;
pub const DQ_L501_BASE_24: u32 = 24000000;
pub const DQ_L501_BASE_29: u32 = 29454545;
pub const DQ_L501_BASE_29_508: u32 = 29464286;
pub const DQ_L501_BASE_CUSTOM: u32 = 0;
pub const DQ_L501_MFIFO_1: u32 = 1000000;
pub const DQ_L501_MAXCLFRQ: u32 = 2000;
pub const DQ_L501_MAXCVFRQ: u32 = 2000;
pub const DQ_L501_FIFOSZ: u32 = 2048;
pub const DQ_L508_FIFOSZ: u32 = 1024;
pub const DQ_L508_MAJORSZ: u32 = 1024;
pub const DQ_L508_SWFIFOSZ: u32 = 2048;
pub const DQ_L501_REPEAT_SUPPORTED: u32 = 15;
pub const DQ_SL501_MSG_NORM: u32 = 0;
pub const DQ_SL501_MSG_BREAK: u32 = 1;
pub const DQ_SL501_MSG_ERR_FRM: u32 = 2;
pub const DQ_SL501_MSG_ERR_PAR: u32 = 3;
pub const DQ_SL501_MSG_ERR_TO: u32 = 4;
pub const DQ_SL501_RECV_MSG_ERR_TO: u32 = 64;
pub const DQ_CL_OFS: u32 = 8;
pub const DQ_SL501_MODE_SH: u32 = 8;
pub const DQ_SL501_PARITY_SH: u32 = 10;
pub const DQ_SL501_STOP_SH: u32 = 13;
pub const DQ_SL501_WIDTH_SH: u32 = 15;
pub const DQ_SL501_OPER_SH: u32 = 17;
pub const DQ_SL501_RESRVD1_SH: u32 = 18;
pub const DQ_SL501_RESRVD2_SH: u32 = 19;
pub const DQ_SL501_BAUD_SH: u32 = 20;
pub const DQ_SL501_ERROR_SH: u32 = 24;
pub const DQ_SL501_BREAK_SH: u32 = 25;
pub const DQ_SL501_TX485AD_SH: u32 = 26;
pub const DQ_SL501_RXTE_SH: u32 = 27;
pub const DQ_SL501_TXTE_SH: u32 = 28;
pub const DQ_SL501_BAUD_PLL_SH: u32 = 29;
pub const DQ_SL501_FSTE_SH: u32 = 26;
pub const DQ_SL501_MODE_232: u32 = 0;
pub const DQ_SL501_MODE_485F: u32 = 1;
pub const DQ_SL501_MODE_485H: u32 = 2;
pub const DQ_SL501_PARITY_NONE: u32 = 0;
pub const DQ_SL501_PARITY_EVEN: u32 = 1;
pub const DQ_SL501_PARITY_ODD: u32 = 2;
pub const DQ_SL501_PARITY_SPACE: u32 = 3;
pub const DQ_SL501_PARITY_MARK: u32 = 4;
pub const DQ_SL501_STOP_1: u32 = 0;
pub const DQ_SL501_STOP_1_5: u32 = 1;
pub const DQ_SL501_STOP_2: u32 = 2;
pub const DQ_SL501_WIDTH_8: u32 = 0;
pub const DQ_SL501_WIDTH_7: u32 = 1;
pub const DQ_SL501_WIDTH_6: u32 = 2;
pub const DQ_SL501_WIDTH_5: u32 = 3;
pub const DQ_SL501_OPER_NORM: u32 = 0;
pub const DQ_SL501_OPER_LOOP: u32 = 1;
pub const DQ_SL501_RTS: u32 = 1;
pub const DQ_SL501_DTS: u32 = 1;
pub const DQ_SL501_BAUD_57600: u32 = 0;
pub const DQ_SL501_BAUD_DEFAULT: u32 = 0;
pub const DQ_SL501_BAUD_300: u32 = 1;
pub const DQ_SL501_BAUD_600: u32 = 2;
pub const DQ_SL501_BAUD_1200: u32 = 3;
pub const DQ_SL501_BAUD_2400: u32 = 4;
pub const DQ_SL501_BAUD_4800: u32 = 5;
pub const DQ_SL501_BAUD_9600: u32 = 6;
pub const DQ_SL501_BAUD_19200: u32 = 7;
pub const DQ_SL501_BAUD_38400: u32 = 8;
pub const DQ_SL501_BAUD_56000: u32 = 9;
pub const DQ_SL501_BAUD_115200: u32 = 10;
pub const DQ_SL501_BAUD_128000: u32 = 11;
pub const DQ_SL501_BAUD_250000: u32 = 12;
pub const DQ_SL501_BAUD_256000: u32 = 13;
pub const DQ_SL501_BAUD_1000000: u32 = 14;
pub const DQ_SL501_BAUD_CUST: u32 = 15;
pub const DQ_SL501_ERROR: u32 = 1;
pub const DQ_SL501_BREAK: u32 = 1;
pub const DQ_SL501_TERM_FS: u32 = 1;
pub const DQ_SL501_TERM_RX: u32 = 1;
pub const DQ_SL501_TERM_TX: u32 = 1;
pub const DQ_SL501_SUPRESS_HD_ECHO: u32 = 2;
pub const DQ_SL501_TIMEOUT_DIV1: u32 = 64;
pub const DQ_SL501_TIMEOUT_DIV0: u32 = 32;
pub const DQ_SL501_USE_8x_CLK: u32 = 128;
pub const DQ_SL501_ADD_TS_ON_IDLE: u32 = 256;
pub const DQ_SL501_VMAP_STAT: u32 = 512;
pub const DQ_SL501_SRXF_TS: u32 = 32768;
pub const DQ_SL501_SRXF_PE: u32 = 1024;
pub const DQ_SL501_SRXF_FE: u32 = 512;
pub const DQ_SL501_SRXF_BI: u32 = 256;
pub const DQL_IOCTL501_READ_CHNL: u32 = 7;
pub const DQL_IOCTL501_WRITE_CHNL: u32 = 8;
pub const DQL_IOCTL501_SETCHNL_CFG: u32 = 9;
pub const DQL_IOCTL501_START: u32 = 10;
pub const DQL_IOCTL501_STOP: u32 = 11;
pub const DQL_IOCTL501_BREAK: u32 = 12;
pub const DQL_IOCTL501_CHANGE: u32 = 13;
pub const DQL_IOCTL501_STATUS: u32 = 15;
pub const DQL_IOCTL501_READ_CFIFO: u32 = 4097;
pub const DQL_IOCTL501_FLOW_CONTROL: u32 = 4098;
pub const DQL_IOCTL501_SETCHNL_CFGEXT: u32 = 4099;
pub const DQL_IOCTL501_WRITE_CFIFO: u32 = 4100;
pub const DQL_IOCTL501_SETBAUD: u32 = 1;
pub const DQL_IOCTL501_SETBAUD_8X: u32 = 2147483648;
pub const DQL_IOCTL501_SETTXWM: u32 = 2;
pub const DQL_IOCTL501_SETRXWM: u32 = 3;
pub const DQL_IOCTL501_SETTIMEOUT: u32 = 4;
pub const DQL_IOCTL501_SET_TS: u32 = 5;
pub const DQL_IOCTL501_SET_TL: u32 = 6;
pub const DQL_IOCTL501_SETRXWM_DIRECT: u32 = 7;
pub const DQL_IOCTL501_SETBASECLOCK: u32 = 12;
pub const DQL_IOCTL501_SETCHARDLY: u32 = 13;
pub const DQL_IOCTL501_SETFRAMEDLY: u32 = 14;
pub const DQL_IOCTL501_CHANGE_FINCLEAR: u32 = 1;
pub const DQL_IOCTL501_CHANGE_FOUTCLEAR: u32 = 2;
pub const DQL_IOCTL501_CHANGE_FINFOUT: u32 = 3;
pub const DQL_IOCTL501_CHANGE_SETCHCFG: u32 = 4;
pub const DQL_IOCTL501_CHANGE_PARITY: u32 = 8;
pub const DQL_IOCTL501_CHANGE_PAUSE: u32 = 9;
pub const DQL_IOCTL501_CHANGE_RESUME: u32 = 10;
pub const DQL_IOCTL501_CTS_NO_CHANGE: u32 = 1;
pub const DQL_IOCTL501_CTS_IGNORE: u32 = 2;
pub const DQL_IOCTL501_CTS_AUTOFLOW: u32 = 3;
pub const DQL_IOCTL501_RTS_NO_CHANGE: u32 = 1;
pub const DQL_IOCTL501_RTS_PIN_LOW: u32 = 2;
pub const DQL_IOCTL501_RTS_PIN_HIGH: u32 = 3;
pub const DQL_IOCTL501_RTS_AUTOFLOW_NORMAL_TIMING: u32 = 4;
pub const DQL_IOCTL501_RTS_AUTOFLOW_GATED_TIMING: u32 = 5;
pub const DQ_SL501_DELAYMODE_DISABLED: u32 = 0;
pub const DQ_SL501_DELAYMODE_INTERNAL: u32 = 1;
pub const DQ_SL501_DELAYMODE_TMR01: u32 = 2;
pub const DQ_SL501_DELAYMODE_SYNC02: u32 = 3;
pub const DQ_SL501_FRAMEDELAY_DISABLED: u32 = 0;
pub const DQ_SL501_FRAMEDELAY_FIXEDLEN: u32 = 1;
pub const DQ_SL501_FRAMEDELAY_VMAP_LEN: u32 = 2;
pub const DQ_SL501_FRAMEDELAY_ZERO_CHAR: u32 = 3;
pub const DQ_SL501_FRAMEDELAY_VARLEN: u32 = 8;
pub const DQ_SL501_FRAMEDELAY_REPEAT: u32 = 16;
pub const DQ_SL501_PARITY9_DISABLE: u32 = 0;
pub const DQ_SL501_PARITY9_ENABLED: u32 = 4;
pub const DQ_SL501_PARITY9: u32 = 256;
pub const DQ_SL501_MIXED_PARITY: u32 = 512;
pub const DQ_SL501_SEND_NOREPLY: u32 = 1024;
pub const DQ_L501_MODESCAN: u32 = 0;
pub const DQ_L501_MODEFIFO: u32 = 131072;
pub const DQ_L501_MODECONT: u32 = 196608;
pub const DQ_L501_ID_STANDARD: u32 = 0;
pub const DQ_L501_ID_EXTENDED: u32 = 262144;
pub const DQ_L501_FIFO_GET_DATA: u32 = 16;
pub const DQ_L501_FIFO_SET_DATA: u32 = 16;
pub const DQ_C3PLL_MIN_FREQ_501: u32 = 16000000;
pub const DQ_C3PLL_MAX_FREQ_501: u32 = 32000000;
pub const DQ_C3PLL_CFG_24MHZ_VCO_POST: u32 = 0;
pub const DQ_C3PLL_CFG_24MHZ_R: u32 = 19;
pub const DQ_C3PLL_CFG_24MHZ_C: u32 = 0;
pub const DQ_C3PLL_CFG_24MHZ_I: u32 = 1;
pub const DQ_L501_NAMELEN: u32 = 32;
pub const DQ_L508_NAMELEN: u32 = 24;
pub const DQ_L503_CHAN: u32 = 4;
pub const DQ_L503_INFOSZ: u32 = 4096;
pub const DQ_L503_BASE: u32 = 66000000;
pub const DQ_L503_MAXCLFRQ: u32 = 2000;
pub const DQ_L503_MAXCVFRQ: u32 = 2000;
pub const DQ_L503_RX_FIFOSZ: u32 = 1024;
pub const DQ_L503_TX_FIFOSZ: u32 = 512;
pub const DQ_L503_FIFO_RQ: u32 = 10000;
pub const DQ_L503_TO_RQ: u32 = 10;
pub const DQ_L503_SWFIFOSZ: u32 = 2048;
pub const DQ_L503_FILTER_SZ: u32 = 32;
pub const DQ_L503_RX_FIFO_MSGSZ32: u32 = 4;
pub const DQ_L503_RX_FIFO_MSGSZ: u32 = 16;
pub const DQ_L503_RX_FIFO_MAXMSG: u32 = 90;
pub const DQ_CAN503_RATE_10K: u32 = 0;
pub const DQ_CAN503_RATE_20K: u32 = 256;
pub const DQ_CAN503_RATE_50K: u32 = 512;
pub const DQ_CAN503_RATE_100K: u32 = 768;
pub const DQ_CAN503_RATE_125K: u32 = 1024;
pub const DQ_CAN503_RATE_250K: u32 = 1280;
pub const DQ_CAN503_RATE_500K: u32 = 1536;
pub const DQ_CAN503_RATE_800K: u32 = 1792;
pub const DQ_CAN503_RATE_1M: u32 = 2048;
pub const DQ_CAN503_RATE_10K_Baud: u32 = 10000;
pub const DQ_CAN503_RATE_20K_Baud: u32 = 20000;
pub const DQ_CAN503_RATE_50K_Baud: u32 = 50000;
pub const DQ_CAN503_RATE_100K_Baud: u32 = 100000;
pub const DQ_CAN503_RATE_125K_Baud: u32 = 125000;
pub const DQ_CAN503_RATE_250K_Baud: u32 = 250000;
pub const DQ_CAN503_RATE_500K_Baud: u32 = 500000;
pub const DQ_CAN503_RATE_800K_Baud: u32 = 800000;
pub const DQ_CAN503_RATE_1M_Baud: u32 = 1000000;
pub const DQ_L503_MAX_PACKET_BITS: u32 = 120;
pub const DQ_CAN503_MODE_BASIC: u32 = 0;
pub const DQ_CAN503_MODE_XTEND: u32 = 4096;
pub const DQ_CAN503_OPER_NORMAL: u32 = 0;
pub const DQ_CAN503_OPER_LISTEN: u32 = 8192;
pub const DQ_CAN503_ERR_NONE: u32 = 0;
pub const DQ_CAN503_ERR_WARN: u32 = 1;
pub const DQ_CAN503_ERR_AE: u32 = 2;
pub const DQ_CAN503_ERR_BE: u32 = 3;
pub const DQ_CAN503_ERR_OR: u32 = 4;
pub const DQ_CAN503_ERR_TO: u32 = 5;
pub const DQ_CAN503_ERR_RESET: u32 = 6;
pub const DQ_CAN503_ERR_PASS: u32 = 7;
pub const DQ_CAN503_RTR_FLAG: u32 = 1073741824;
pub const DQ_CAN503_VMAP_TIMESTAMP: u32 = 256;
pub const DQ_CAN503_VMAP_STAT: u32 = 512;
pub const DQL_IOCTL503_SET_MASK: u32 = 1;
pub const DQL_IOCTL503_SET_RATE: u32 = 2;
pub const DQL_IOCTL503_SET_OPER_MODE: u32 = 3;
pub const DQL_IOCTL503_SETTXWM: u32 = 4;
pub const DQL_IOCTL503_SETRXWM: u32 = 5;
pub const DQL_IOCTL503_SETTXDND: u32 = 6;
pub const DQL_IOCTL503_SETFFRQST: u32 = 7;
pub const DQL_IOCTL503_SETERRHDL: u32 = 8;
pub const DQL_IOCTL503_SET_FILTER: u32 = 10;
pub const DQL_IOCTL503_RESET_CHNL: u32 = 4;
pub const DQL_IOCTL503_READ_CHNL: u32 = 5;
pub const DQL_IOCTL503_WRITE_CHNL: u32 = 6;
pub const DQL_IOCTL503_SETCHNL_CFG: u32 = 7;
pub const DQL_IOCTL503_START: u32 = 8;
pub const DQL_IOCTL503_STOP: u32 = 9;
pub const DQL_IOCTL503_STATUS: u32 = 15;
pub const DQL_IOCTL503_WRITE_CFIFO: u32 = 4098;
pub const DQ_L503_SEC_FIFO_SUPPORTED: u32 = 15;
pub const DQ_L503_SJA1000_INT_MINOR: u32 = 17;
pub const DQ_L503_SJA1000_INT_BUILD: u32 = 59;
pub const DQ_L503_ALERR_INHIBIT: u32 = 1;
pub const DQ_L503_BEERR_INHIBIT: u32 = 2;
pub const DQ_L503_RST_ON_ERRPAS: u32 = 4;
pub const DQ_L503_RST_ON_BUSOFF: u32 = 8;
pub const DQ_CAN503_EC_BIT: u32 = 0;
pub const DQ_CAN503_EC_FORM: u32 = 64;
pub const DQ_CAN503_EC_STUFF: u32 = 128;
pub const DQ_CAN503_EC_OTHER: u32 = 192;
pub const DQ_CAN503_DIR_RX: u32 = 32;
pub const DQ_CAN503_DIR_TX: u32 = 0;
pub const DQ_CAN503_BE_SOF: u32 = 3;
pub const DQ_CAN503_BE_ID_28_21: u32 = 2;
pub const DQ_CAN503_BE_ID_20_18: u32 = 6;
pub const DQ_CAN503_BE_SRTR: u32 = 4;
pub const DQ_CAN503_BE_IDE: u32 = 5;
pub const DQ_CAN503_BE_ID_17_13: u32 = 7;
pub const DQ_CAN503_BE_ID_12_5: u32 = 15;
pub const DQ_CAN503_BE_ID_4_0: u32 = 14;
pub const DQ_CAN503_BE_RTR: u32 = 12;
pub const DQ_CAN503_BE_DLC: u32 = 11;
pub const DQ_CAN503_BE_DF: u32 = 10;
pub const DQ_CAN503_BE_CRC_SEQ: u32 = 8;
pub const DQ_CAN503_BE_CRC_DEL: u32 = 24;
pub const DQ_CAN503_BE_ACK_SLT: u32 = 25;
pub const DQ_CAN503_BE_ACK_DEL: u32 = 26;
pub const DQ_CAN503_BE_EOF: u32 = 26;
pub const DQ_CAN503_BE_IM: u32 = 18;
pub const DQ_CAN503_BE_AEF: u32 = 17;
pub const DQ_CAN503_BE_PEF: u32 = 22;
pub const DQ_CAN503_BE_TDB: u32 = 19;
pub const DQ_CAN503_BE_ERR_DEL: u32 = 23;
pub const DQ_CAN503_BE_OL: u32 = 28;
pub const DQ_CAN503_BC_TX0: u32 = 10;
pub const DQ_CAN503_PC_TX0: u32 = 16;
pub const DQ_SL503_SEND_NOREPLY: u32 = 1024;
pub const DQ_L503_MODESCAN: u32 = 0;
pub const DQ_L503_MODEFIFO: u32 = 131072;
pub const DQ_L503_MODECONT: u32 = 196608;
pub const DQ_L503_FIFO_GET_DATA: u32 = 16;
pub const DQ_L503_FIFO_SET_DATA: u32 = 16;
pub const DQ_L503_NAMELEN: u32 = 32;
pub const DQ_L504_CHAN: u32 = 4;
pub const DQ_L504_INFOSZ: u32 = 4096;
pub const DQ_L504_BASE_66: u32 = 66000000;
pub const DQ_L504_MAXCLFRQ: u32 = 2000;
pub const DQ_L504_MAXCVFRQ: u32 = 2000;
pub const DQ_L504_FIFOSZ: u32 = 2048;
pub const DQ_L504_HDLC_FRAME_SZ: u32 = 4096;
pub const DQ_L504_HDLC_TRX_SZ: u32 = 8692;
pub const DQL_LCR504_LED: u32 = 2;
pub const DQL_L504_MIN_HDLC_BAUD: u32 = 9600;
pub const DQL_L504_MAX_HDLC_BAUD: u32 = 4000000;
pub const DQL_L504_MIN_ASYNC_BAUD: u32 = 2400;
pub const DQL_L504_MAX_ASYNC_BAUD: u32 = 2000000;
pub const DQL_L504_MIN_SYNC_BAUD: u32 = 2400;
pub const DQL_L504_MAX_SYNC_BAUD: u32 = 4000000;
pub const DQL_IOCTL504_READ_CHNL: u32 = 7;
pub const DQL_IOCTL504_WRITE_CHNL: u32 = 8;
pub const DQL_IOCTL504_SETCHNL_CFG: u32 = 9;
pub const DQL_IOCTL504_START: u32 = 10;
pub const DQL_IOCTL504_WRITE_FRAMES: u32 = 11;
pub const DQL_IOCTL504_ABORT: u32 = 12;
pub const DQL_IOCTL504_READ_FRAMES: u32 = 13;
pub const DQL_IOCTL504_STATUS: u32 = 15;
pub const DQL_IOCTL504_RC_FRAME_SE: u32 = 2;
pub const DQL_IOCTL504_RC_FRAME_S: u32 = 4;
pub const DQL_IOCTL504_RC_FRAME_C: u32 = 6;
pub const DQL_IOCTL504_RC_FRAME_E: u32 = 8;
pub const DQL_IOCTL504_RC_FRAMEMASK: u32 = 14;
pub const DQ_SL504_PARITY_NONE: u32 = 0;
pub const DQ_SL504_PARITY_EVEN: u32 = 1;
pub const DQ_SL504_PARITY_ODD: u32 = 2;
pub const DQ_SL504_PARITY_SPACE: u32 = 3;
pub const DQ_SL504_PARITY_MARK: u32 = 4;
pub const DQ_SL504_ERR_RXOVERUN: u32 = 65536;
pub const DQ_L504_FIFO_GET_DATA: u32 = 16;
pub const DQ_L504_FIFO_SET_DATA: u32 = 16;
pub const DQ_L504_NAMELEN: u32 = 32;
pub const DQ_L504_MAX_DMA_TRAN: u32 = 16;
pub const DQ_L504_DMA_N: u32 = 128;
pub const DQ_L514_CHAN: u32 = 4;
pub const DQ_L514_NAMELEN: u32 = 16;
pub const DQ_L514_INFOSZ: u32 = 4096;
pub const DQ_L514_BASE: u32 = 66000000;
pub const DQ_L514_MAXCLFRQ: u32 = 2500000;
pub const DQ_L514_MAXCVFRQ: u32 = 2500000;
pub const DQ_L514_MAXBAUDRATE: u32 = 2500000;
pub const DQ_L514_MINBAUDRATE: u32 = 300;
pub const DQ_L514_FIFOSZ_RX: u32 = 2048;
pub const DQ_L514_FIFOSZ_TX: u32 = 1024;
pub const DQ_L514_MAXWAIT: u32 = 20;
pub const DQ_L514_MAXCLSIZE: u32 = 65536;
pub const DQL_L514_LED: u32 = 2;
pub const DQ_L514_CALDACS: u32 = 4;
pub const DQ_L514_MAXPLLFRQ: f64 = 20000000.0;
pub const DQ_L514_MINPLLFRQ: f64 = 300.0;
pub const DQ_L514_SNAP_FREQ: f64 = 24000000.0;
pub const DQL_IOCTL514_CFG: u32 = 4097;
pub const DQL_IOCTL514_STATUS: u32 = 4098;
pub const DQL_IOCTL514_ENABLE: u32 = 4099;
pub const DQL_IOCTL514_RDFRAME: u32 = 4100;
pub const DQL_IOCTL514_WRFRAME: u32 = 4101;
pub const DQL_IOCTL514_SETPLL: u32 = 4102;
pub const DQ_L514_ERR_PLL_NOT_LOCKED: i32 = -1;
pub const DQ_L534_CHAN: u32 = 4;
pub const DQ_L534_NAMELEN: u32 = 16;
pub const DQ_L534_INFOSZ: u32 = 4096;
pub const DQ_L534_BASE: u32 = 66000000;
pub const DQ_L534_MAXCLFRQ: u32 = 1000000;
pub const DQ_L534_MAXCVFRQ: u32 = 1000000;
pub const DQ_L534_MAXBAUDRATE: u32 = 1000000;
pub const DQ_L534_MINBAUDRATE: u32 = 100000;
pub const DQ_L534_FIFOSZ_RX: u32 = 4096;
pub const DQ_L534_FIFOSZ_TX: u32 = 2048;
pub const DQ_L534_CH_FIFOSZ_MRX: u32 = 1024;
pub const DQ_L534_CH_FIFOSZ_SRX: u32 = 512;
pub const DQ_L534_CH_FIFOSZ_MTX: u32 = 1024;
pub const DQ_L534_CH_FIFOSZ_STX: u32 = 512;
pub const DQ_L534_MAXWAIT: u32 = 20;
pub const DQ_L534_MAXCLSIZE: u32 = 65536;
pub const DQ_L534_MAX_MSG_LEN: u32 = 255;
pub const DQL_L534_LED: u32 = 2;
pub const DQ_L534_CALDACS: u32 = 4;
pub const DQ_L534_MAXPLLFRQ: f64 = 20000000.0;
pub const DQ_L534_MINPLLFRQ: f64 = 300.0;
pub const DQ_L534_SNAP_FREQ: f64 = 24000000.0;
pub const DQL_IOCTL534_START: u32 = 10;
pub const DQL_IOCTL534_CFG: u32 = 4097;
pub const DQL_IOCTL534_STATUS: u32 = 4098;
pub const DQL_IOCTL534_ENABLE: u32 = 4099;
pub const DQL_IOCTL534_MRDFRAME: u32 = 4100;
pub const DQL_IOCTL534_MWRFRAME: u32 = 4101;
pub const DQL_IOCTL534_SRDFRAME: u32 = 4102;
pub const DQL_IOCTL534_SWRFRAME: u32 = 4103;
pub const DQL_IOCTL534_SETPLL: u32 = 4104;
pub const DQL_IOCTL534_BUSCON: u32 = 4105;
pub const DQL_IOCTL534_FLUSH: u32 = 4106;
pub const DQ_L534_ERR_PLL_NOT_LOCKED: i32 = -1;
pub const DQ_L534CFG_CLOCK: u32 = 2147483648;
pub const DQ_L534CFG_TTL_LEVEL: u32 = 1073741824;
pub const DQ_L534CFG_MASTER_VALID: u32 = 536870912;
pub const DQ_L534CFG_SLAVE_VALID: u32 = 268435456;
pub const DQ_L534CFG_TERM_LOOP: u32 = 134217728;
pub const DQ_L534CFG_SDATA_ADDR: u32 = 67108864;
pub const DQ_L534CFG_CLEAR: u32 = 33554432;
pub const DQ_L534CFG_CLOCK_CUST: u32 = 0;
pub const DQ_L534CFG_CLOCK_100k: u32 = 100000;
pub const DQ_L534CFG_CLOCK_400k: u32 = 400000;
pub const DQ_L534CFG_CLOCK_1M: u32 = 1000000;
pub const DQ_L534CFG_RL_TERMIN: u32 = 1;
pub const DQ_L534CFG_RL_LOOPBK: u32 = 2;
pub const DQ_L534CFG_FPGA_LOOPBK: u32 = 4;
pub const DQ_L534MCFG_SECURE_SHELL: u32 = 2147483648;
pub const DQ_L534MCFG_MMASTER: u32 = 1073741824;
pub const DQ_L534MCFG_CLK_SYNC: u32 = 536870912;
pub const DQ_L534MCFG_BYTE_DELAY: u32 = 268435456;
pub const DQ_L534MCFG_LONG_IDLE_DLY: u32 = 67108864;
pub const DQ_L534MCFG_FIFO_EN: u32 = 33554432;
pub const DQ_L534MCFG_CRC_CHECK: u32 = 16777216;
pub const DQ_L534MCFG_XDCP: u32 = 8388608;
pub const DQ_L534MCFG_RAWMODE: u32 = 4194304;
pub const DQ_L534SCFG_ENABLE_BM: u32 = 2147483648;
pub const DQ_L534SCFG_SCKSYN_AD: u32 = 1073741824;
pub const DQ_L534SCFG_SCKSYN_TX: u32 = 536870912;
pub const DQ_L534SCFG_SCKSYN_RX: u32 = 268435456;
pub const DQ_L534SCFG_ACKLEN: u32 = 134217728;
pub const DQ_L534SCFG_ACK_BM: u32 = 67108864;
pub const DQ_L534SCFG_10BIT: u32 = 33554432;
pub const DQ_L534SCFG_MAXACK: u32 = 16777216;
pub const DQ_L534SCFG_SLAVE_UNFIFO: u32 = 8388608;
pub const DQ_L534SCFG_FIFO_SRXDO: u32 = 4194304;
pub const DQL_IOCTL534_STATUS_CLR: u32 = 1073741824;
pub const DQL_IOCTL534_WRFRAME_CRC: u32 = 58;
pub const DQL_IOCTL534_WR_NFRAME_CRC: u32 = 121;
pub const DQL_IOCTL534_WRFRAME_DIRECT: u32 = 182;
pub const DQL_IOCTL534_WRFRAME_FIFO: u32 = 117;
pub const DQL_IOCTL534_WRFRAME_CLO: u32 = 105;
pub const DQL_IOCTL534_RDFRAME_CRC: u32 = 76;
pub const DQL_IOCTL534_RDFRAME_BM_CRC: u32 = 202;
pub const DQL_IOCTL534_RDFRAME_FIFO: u32 = 173;
pub const DQL_IOCTL534_RDFRAME_CLO: u32 = 185;
pub const DQ_L534_CMD_TDELAY: u32 = 268435456;
pub const DQ_L534_CMD_STOP: u32 = 536870912;
pub const DQ_L534_CMD_ST_WRITE: u32 = 805306368;
pub const DQ_L534_CMD_ST_READ: u32 = 1073741824;
pub const DQ_L534_CMD_ST_WRRD: u32 = 1342177280;
pub const DQ_L534_CMD_XDCP_READ: u32 = 1610612736;
pub const DQ_L534_CMD_XDCP_WRITE: u32 = 1879048192;
pub const DQ_L534_CMD_MASK: u32 = 4026531840;
pub const DQ_L534_CMD_MASK_USR: u32 = 29361151;
pub const DQ_L534_CMD_MASK_XDCP: u32 = 30347263;
pub const DQ_L534_MSENDCRC_WAIT_FOR_BM: u32 = 2;
pub const DQ_L534_MSENDCRC_DOUBLECHECK_CRC: u32 = 4;
pub const DQ_L534_MSENDCRC_WAIT_FOR_RX: u32 = 8;
pub const DQ_L534_MSENDCRC_IGNORE_CRC: u32 = 16;
pub const DQL_IOCTL534_FLUSH_SRX: u32 = 2147483648;
pub const DQL_IOCTL534_FLUSH_STX: u32 = 1073741824;
pub const DQL_IOCTL534_FLUSH_MRX: u32 = 536870912;
pub const DQL_IOCTL534_FLUSH_MTX: u32 = 268435456;
pub const DQL_IOCTL534_FLUSH_MRST: u32 = 134217728;
pub const DQL_IOCTL534_FLUSH_SRST: u32 = 67108864;
pub const DQL_IOCTL534_FLUSH_ALL: u32 = 4227858432;
pub const DQL_IOCTL534_BUSCON_DCDC: u32 = 2147483648;
pub const DQL_IOCTL534_BUSCON_LBENTERM: u32 = 1073741824;
pub const DQ_L534_BUSCON_LBEN: u32 = 512;
pub const DQ_L534_BUSCON_TERMEN: u32 = 256;
pub const DQ_L534_CFGDCDC_EN3: u32 = 64;
pub const DQ_L534_CFGDCDC_EN2: u32 = 16;
pub const DQ_L534_CFGDCDC_EN1: u32 = 4;
pub const DQ_L534_CFGDCDC_EN0: u32 = 1;
pub const DQ_L550_CHAN: u32 = 1;
pub const DQ_L550_INFOSZ: u32 = 4096;
pub const DQ_L550_BASE: u32 = 66000000;
pub const DQIOCTL_SET550CFG: u32 = 8;
pub const DQ_CAR550_WIRELESS_EN_DIS: u32 = 0;
pub const DQ_CAR550_WIRELESS_RESET: u32 = 1;
pub const DQ_L550_NAMELEN: u32 = 32;
pub const DQ_L553_CHAN: u32 = 2;
pub const DQ_L553_CHANMASK: u32 = 1;
pub const DQ_L553_CHAN_TX: u32 = 2;
pub const DQ_L553_CHAN_RX: u32 = 2;
pub const DQ_L553_INFOSZ: u32 = 4096;
pub const DQ_L553_BASE: u32 = 66000000;
pub const DQ_L553_BC_BASE: f64 = 1000000.0;
pub const DQ_L553_MAXCLFRQ: u32 = 2000;
pub const DQ_L553_MAXCVFRQ: u32 = 2000;
pub const DQ_L553_TERMADDR: u32 = 32;
pub const DQ_L553_SUBADDR: u32 = 32;
pub const DQ_L553_MAX_MSG: u32 = 64;
pub const DQ_L553_MAX_WORDS: u32 = 32;
pub const DQ_L553_MAXBM_WORDS: u32 = 36;
pub const DQ_L553_MAXRT_WORDS: u32 = 39;
pub const DQ_L553_BROADADDR: u32 = 31;
pub const DQ_L553_MODEADDR: u32 = 0;
pub const DQ_L553_INTCLKUS: u32 = 100;
pub const DQ_L553_MAXDLYCNT: u32 = 65535;
pub const DQL_LCR553_LED: u32 = 2;
pub const DQL_LCR533_SYNCD: u32 = 8;
pub const DQL_L553_MJ_SIZE: u32 = 256;
pub const DQL_L553_MN_SIZE: u32 = 128;
pub const DQ_L553_CH_MASK: u32 = 15;
pub const DQ_L553_CH_CMDMASK: u32 = 240;
pub const DQ_L553_TXFIFOSIZE: u32 = 256;
pub const DQ_L553_RXFIFOSIZE: u32 = 1024;
pub const DQ_L553_LBLFILTSIZE: u32 = 256;
pub const DQ_L553_SCHEDSIZE: u32 = 256;
pub const DQ_L553_SCHEDDATASZ: u32 = 256;
pub const DQ_L553_MD_FIFOSZ: u32 = 19;
pub const DQ_L553_A708_FIFO: u32 = 2048;
pub const DQ_L553_A708_TSTAMP_SZ: u32 = 2;
pub const DQ_L553_BM_MAXMSG: u32 = 255;
pub const DQ_L553_RTLISTSZ: u32 = 360;
pub const DQ_L553_A708_FRMSZ: u32 = 100;
pub const DQ_L553_AWXPD_FRMSZ: u32 = 125;
pub const DQL_IOCTL553_SETMODE: u32 = 1;
pub const DQL_IOCTL553_SETTXWM: u32 = 2;
pub const DQL_IOCTL553_SETRXWM: u32 = 3;
pub const DQL_IOCTL553_SETTIMEOUT: u32 = 4;
pub const DQL_IOCTL553_READ_FIFO: u32 = 5;
pub const DQL_IOCTL553_WRITE_FIFO: u32 = 6;
pub const DQL_IOCTL553_TRIGGER: u32 = 7;
pub const DQL_IOCTL553_CONTROL: u32 = 8;
pub const DQL_IOCTL553_START: u32 = 10;
pub const DQL_IOCTL553_BIT: u32 = 11;
pub const DQL_IOCTL553_RESERVED: u32 = 12;
pub const DQL_IOCTL553_FILTER: u32 = 13;
pub const DQL_IOCTL553_SETCLK: u32 = 14;
pub const DQL_IOCTL553_STATUS: u32 = 15;
pub const DQL_IOCTL553_BM_CFG: u32 = 4098;
pub const DQL_IOCTL553_RT_CFG: u32 = 4099;
pub const DQL_IOCTL553_BC_CFG: u32 = 4100;
pub const DQL_IOCTL553_READ_RT: u32 = 4101;
pub const DQL_IOCTL553_WRITE_RT: u32 = 4102;
pub const DQL_IOCTL553_READ_RAM: u32 = 4103;
pub const DQL_IOCTL553_WRITE_RAM: u32 = 4104;
pub const DQL_IOCTL553_WRITE_MD: u32 = 4105;
pub const DQL_IOCTL553_READ_MD: u32 = 4106;
pub const DQL_IOCTL553_WRITE_BCCB: u32 = 4107;
pub const DQL_IOCTL553_READ_BCCB: u32 = 4108;
pub const DQL_IOCTL553_STATUS_BC: u32 = 4109;
pub const DQL_IOCTL553_CONTROL_BC: u32 = 4110;
pub const DQL_IOCTL553_RT_VALID: u32 = 4111;
pub const DQL_IOCTL553_DBGSEL: u32 = 4353;
pub const DQEVENT553_READ_RT: u32 = 4101;
pub const DQEVENT553_WRITE_RT: u32 = 4102;
pub const DQEVENT553_WRITE_MD: u32 = 4105;
pub const DQEVENT553_READ_MD: u32 = 4106;
pub const DQEVENT553_WRITE_BCCB: u32 = 4107;
pub const DQEVENT553_READ_BCCB: u32 = 4108;
pub const DQEVENT553_STATUS_BC: u32 = 4109;
pub const DQEVENT553_CONTROL_BC: u32 = 4110;
pub const DQL_IOCTL553_SETPARAM_READREG: u32 = 1;
pub const DQL_IOCTL553_SETPARAM_WRITEREG: u32 = 2;
pub const DQL_IOCTL553_SETPARAM_READABS: u32 = 3;
pub const DQL_IOCTL553_SETPARAM_WRITEABS: u32 = 4;
pub const DQL_IOCTL553_MAJORD: u32 = 1;
pub const DQL_IOCTL553_MINORD: u32 = 2;
pub const DQL_IOCTL553_MNBLOCK0: u32 = 1;
pub const DQL_IOCTL553_MNBLOCK1: u32 = 2;
pub const DQL_IOCTL553_MJ_SWAP: u32 = 1;
pub const DQL_IOCTL553_MN_SWAP: u32 = 2;
pub const DQL_IOCTL553_DEBUG_START: u32 = 3;
pub const DQL_IOCTL553_DEBUG_STOP: u32 = 4;
pub const DQL_IOCTL553_DEBUG_STEP_MJ: u32 = 5;
pub const DQL_IOCTL553_DEBUG_STEP_MN: u32 = 6;
pub const DQL_IOCTL553_DEBUG_GOTO: u32 = 7;
pub const DQL_IOCTL553_MJMN_CLEAR: u32 = 8;
pub const DQ_L553_MODE_BM: u32 = 1;
pub const DQ_L553_MODE_RT: u32 = 2;
pub const DQ_L553_MODE_BC: u32 = 4;
pub const DQ_L553_MODE_A708: u32 = 8;
pub const DQ_L553_RT_LSTN_A: u32 = 1;
pub const DQ_L553_RT_LSTN_B: u32 = 2;
pub const DQ_L553_RT_TX_A: u32 = 4;
pub const DQ_L553_RT_TX_B: u32 = 8;
pub const DQ_L553_RT_RX_TSCMD: u32 = 268435456;
pub const DQ_L553_RT_RX_CMD: u32 = 536870912;
pub const DQ_L553_RT_DEFER_EN: u32 = 1073741824;
pub const DQ_L553_RT_LIST_ADD: u32 = 2147483648;
pub const DQ_L553_RT_INH_RX: u32 = 4096;
pub const DQ_L553_RT_INH_TX: u32 = 8192;
pub const DQ_L553_RT_INH_MODE: u32 = 16384;
pub const DQ_L553_RT_LB_EN: u32 = 32768;
pub const DQ_L553_RT_INH_BCSTREP: u32 = 65536;
pub const DQ_L553_BM_LSTN_A: u32 = 1;
pub const DQ_L553_BM_LSTN_B: u32 = 2;
pub const DQ_L553_BM_TX_A: u32 = 4;
pub const DQ_L553_BM_TX_B: u32 = 8;
pub const DQ_L553_A708_TX_BE: u32 = 16;
pub const DQ_L553_A708_RX_BE: u32 = 32;
pub const DQ_L553_A708_WXPD: u32 = 64;
pub const DQ_L553_STORE_TS: u32 = 131072;
pub const DQ_L553_STORE_FLAGS: u32 = 262144;
pub const DQ_L553_STORE_SPUR: u32 = 524288;
pub const DQ_L553_BCNR_LCMEE: u32 = 1048576;
pub const DQ_L553_BM_LIST_ADD: u32 = 2147483648;
pub const DQ_L553_BM_SADDR_SEL: u32 = 32;
pub const DQ_L553_BM_RT_SEL: u32 = 2048;
pub const DQ_L553_BM_INH_RX: u32 = 4096;
pub const DQ_L553_BM_INH_TX: u32 = 8192;
pub const DQ_L553_BM_AS_MASK: u32 = 2147483648;
pub const DQ_L553_DISCONNECT: u32 = 0;
pub const DQ_L553_TRANSFORMER: u32 = 2;
pub const DQ_L553_COUPLE_DIRECTLY: u32 = 3;
pub const DQ_L553_TERMINATE35: u32 = 4;
pub const DQ_L553_FORCE_A: u32 = 16;
pub const DQ_L553_RT_SADDR_SEL: u32 = 32;
pub const DQ_L553_RT_RT_SEL: u32 = 2048;
pub const DQ_L553_RT_SET_STATUS: u32 = 4096;
pub const DQ_L553_RT_SET_BLK1: u32 = 8192;
pub const DQ_L553_RT_TX_CMDSTS: u32 = 2097152;
pub const DQ_L553_RT_TX_TSCMD: u32 = 4194304;
pub const DQ_L553_RT_TX_STS_NUM: u32 = 0;
pub const DQ_L553_RT_TX_VECTOR_NUM: u32 = 1;
pub const DQ_L553_RT_RX_DATA_RDY_NUM: u32 = 0;
pub const DQ_L553_RT_RX_DATA_SENT_NUM: u32 = 1;
pub const DQ_L553_RT_RX_PORT_STS_NUM: u32 = 2;
pub const DQ_L553_RT_RX_SYNC_NUM: u32 = 3;
pub const DQ_L553_RT_RX_MODE_NUM: u32 = 4;
pub const DQ_L553_RT_RT_SHR: u32 = 6;
pub const DQ_L553_RT_STS0: u32 = 4096;
pub const DQ_L553_RT_STS1: u32 = 8192;
pub const DQ_L553_RT_STS2: u32 = 12288;
pub const DQ_L553_RT_CHSTAT: u32 = 16384;
pub const DQ_L553_RT_BERRORS: u32 = 20480;
pub const DQ_L553_RT_DATA_RDY: u32 = 24576;
pub const DQ_L553_RT_DATA_SENT: u32 = 28672;
pub const DQ_L553_RT_STS3: u32 = 32768;
pub const DQ_L553_RT_STATMASK: u32 = 61440;
pub const DQ_L553_RT_CLEARCMD: u32 = 1048576;
pub const DQ_L553_SET_TX_BLOCK: u32 = 1;
pub const DQ_L553_SET_RX_BLOCK: u32 = 2;
pub const DQ_L553_SET_RT_ENABLE: u32 = 4;
pub const DQ_L553_SET_VALID_ENTRY: u32 = 8;
pub const DQ_L553_SET_RT_RTIMING: u32 = 16;
pub const DQ_L553_RTVAL_WRITE: u32 = 0;
pub const DQ_L553_RTVAL_OR_WRITE: u32 = 65536;
pub const DQ_L553_RTVAL_AND_WRITE: u32 = 131072;
pub const DQ_L553_RTVAL_CLEARALL: u32 = 1;
pub const DQ_L553_READMEM_CYCLES: u32 = 200;
pub const DQ_L553_READMEM_ONE_SA: u32 = 25;
pub const DQ_L553_READMEM_nS: u32 = 200;
pub const DQ_L553_READFIFO: u32 = 100;
pub const DQ_L553_RTS_RT_STS: u32 = 32768;
pub const DQ_L553_RTS_RT_CTL: u32 = 32768;
pub const DQ_L553_RTS_CHAN_NUM: u32 = 4096;
pub const DQ_L553_RTS_RT_BLK1: u32 = 8192;
pub const DQ_L553_RTS_XCODE: u32 = 16384;
pub const DQ_L553_RTS_STATUS: u32 = 2048;
pub const DQ_L553_RTS_CHAN_NUM_SHR: u32 = 12;
pub const DQ_L553_RTS_BLK1_SHR: u32 = 13;
pub const DQ_L553_RTS_SA_SHR: u32 = 0;
pub const DQ_L553_RTS_RT_SHR: u32 = 6;
pub const DQ_L553_RTS_STATUS_SHR: u32 = 11;
pub const DQ_L553_RTS_RT_STS_SHR: u32 = 15;
pub const DQ_L553_RTS_RT_CTL_SHR: u32 = 15;
pub const DQ_L553_SA_MASK: u32 = 31;
pub const DQ_L553_RT_MASK: u32 = 31;
pub const DQ_L553_DSIZE_MASK: u32 = 31;
pub const DQ_L553_RTS_RQ_MASK: u32 = 63;
pub const DQ_L553_RTS_STS0: u32 = 1;
pub const DQ_L553_RTS_STS1: u32 = 2;
pub const DQ_L553_RTS_STS2: u32 = 4;
pub const DQ_L553_RTS_CHSTAT: u32 = 8;
pub const DQ_L553_RTS_BERRORS: u32 = 16;
pub const DQ_L553_RTS_DATAREADY: u32 = 1;
pub const DQ_L553_RTS_DATASENT: u32 = 2;
pub const DQ_L553_RTS_BMDATA: u32 = 4;
pub const DQ_L553_RTS_MODECMD: u32 = 8;
pub const DQ_L553_RTS_CFG0: u32 = 1;
pub const DQ_L553_RTS_CFG1: u32 = 2;
pub const DQ_L553_RTS_TX_BLK: u32 = 4;
pub const DQ_L553_RTS_RTEN: u32 = 8;
pub const DQ_L553_RTS_RX_BLK: u32 = 16;
pub const DQ_SL553_RTS_CFG0_RSTD: u32 = 64;
pub const DQ_SL553_RTS_CFG0_TF: u32 = 32;
pub const DQ_SL553_RTS_CFG0_SF: u32 = 16;
pub const DQ_SL553_RTS_CFG0_BSY: u32 = 8;
pub const DQ_SL553_RTS_CFG0_BSRD: u32 = 4;
pub const DQ_SL553_RTS_CFG0_SR: u32 = 2;
pub const DQ_SL553_RTS_CFG0_DBCE: u32 = 1;
pub const DQ_L553_MODESCAN: u32 = 0;
pub const DQ_L553_MODEFIFO: u32 = 131072;
pub const DQ_L553_MODECONT: u32 = 196608;
pub const DQ_L553_READFIFO_ALL: u32 = 256;
pub const DQ_L553_BMSTATUS_OVER: u32 = 128;
pub const DQ_L553_FIFO_GET_DATA: u32 = 16;
pub const DQ_L553_FIFO_SET_DATA: u32 = 16;
pub const DQ_L553_TRIGOUT_EN: u32 = 1;
pub const DQ_L553_TRIGIN_EN: u32 = 2;
pub const DQ_L553_TRIGOUT_PERIODIC: u32 = 1;
pub const DQ_L553_TRIGOUT_RTSA: u32 = 2;
pub const DQ_L553_TRIGOUT_DBGCOND: u32 = 3;
pub const DQL_ISOS_SRC_SYNC0: u32 = 12;
pub const DQL_ISOS_SRC_SYNC1: u32 = 13;
pub const DQL_ISOS_SRC_SYNC2: u32 = 14;
pub const DQL_ISOS_SRC_SYNC3: u32 = 15;
pub const DQ_L553_TRIGOUT_LEVEL: u32 = 4;
pub const DQ_L553_TRIGIN_FIFO: u32 = 1;
pub const DQ_SL553_BC_DATA: u32 = 4096;
pub const DQ_SL553_BC_STATUS: u32 = 8192;
pub const DQ_SL553_BC_BC_STATUS: u32 = 12288;
pub const DQ_SL553_BC_BUSMON: u32 = 16384;
pub const DQ_SL553_BC_MN_DESC: u32 = 20480;
pub const DQ_SL553_BC_MJ_DESC: u32 = 24576;
pub const DQ_SL553_BC_TYPE: u32 = 28672;
pub const DQ_SL553_BC_VMAP_DATA: u32 = 1;
pub const DQ_SL553_BC_VMAP_STATUS: u32 = 2;
pub const DQ_SL553_BC_VMAP_CONTROL: u32 = 2;
pub const DQ_SL553_BC_VMAP_BUSMON: u32 = 4;
pub const DQ_SL553_BC_VMAP_MN_DESC: u32 = 5;
pub const DQ_SL553_BC_VMAP_MJ_DESC: u32 = 6;
pub const DQ_SL553_BC_STATUS_BC: u32 = 1;
pub const DQ_SL553_BC_STATUS_MJ: u32 = 2;
pub const DQ_SL553_BC_STATUS_ISRC: u32 = 3;
pub const DQ_SL553_BC_STATUS_ERR: u32 = 4;
pub const DQ_SL553_BC_STATUS_PORT: u32 = 5;
pub const DQ_SL553_BC_STATUS_BCPOS: u32 = 6;
pub const DQ_L553_NAMELEN: u32 = 32;
pub const DQ_SL553_MEMVAL_RT: u32 = 3145728;
pub const DQ_L553_FILTSZ: u32 = 66;
pub const DQ_AR566_CHAN: u32 = 6;
pub const DQ_AR512_CHAN: u32 = 12;
pub const DQ_AR566_CHAN_TX: u32 = 6;
pub const DQ_AR566_CHAN_RX: u32 = 12;
pub const DQ_AR512_CHAN_TX: u32 = 0;
pub const DQ_AR512_CHAN_RX: u32 = 12;
pub const DQ_AR566_INFOSZ: u32 = 4096;
pub const DQ_AR566_BASE: u32 = 66000000;
pub const DQ_AR566_MAXCLFRQ: u32 = 2000;
pub const DQ_AR566_MAXCVFRQ: u32 = 2000;
pub const DQ_AR566_INTCLKUS: u32 = 100;
pub const DQ_AR566_MAXDLYCNT: u32 = 65535;
pub const DQL_LCR566_LED: u32 = 2;
pub const DQ_AR566_CH_MASK: u32 = 15;
pub const DQ_AR566_CH_CMDMASK: u32 = 240;
pub const DQ_AR566_CH_RXFIFOAVL: u32 = 32;
pub const DQ_AR566_CH_TXFIFOAVL: u32 = 48;
pub const DQ_AR566_CH_SCHED: u32 = 64;
pub const DQ_AR566_CH_SCHDATA: u32 = 80;
pub const DQ_AR566_CH_FILTER: u32 = 96;
pub const DQ_AR566_CH_LASTDATA: u32 = 112;
pub const DQ_AR516_CHAN_TX: u32 = 16;
pub const DQ_AR516_CHAN_RX: u32 = 24;
pub const DQ_AR524_CHAN_TX: u32 = 0;
pub const DQ_AR524_CHAN_RX: u32 = 24;
pub const DQ_AR516_TX_CHAN_INT: u32 = 16;
pub const DQ_AR516_RX_CHAN_INT: u32 = 24;
pub const DQ_AR516_RX_CHAN_BLK: u32 = 12;
pub const DQ_AR516_TX_CHAN_LOG: u32 = 16;
pub const DQ_AR516_RX_CHAN_LOG: u32 = 32;
pub const DQ_AR516_RX_CHAN0_LOG: u32 = 16;
pub const DQ_AR516_RX_CHAN1_LOG: u32 = 16;
pub const DQ_AR516_MN_FRAMES: u32 = 16;
pub const DQ_AR_ENABLE_DIO0: u32 = 1;
pub const DQ_AR_ENABLE_DIO1: u32 = 2;
pub const DQ_AR_ENABLE_DIO2: u32 = 4;
pub const DQ_AR_SETFILTER_PUT: u32 = 1;
pub const DQ_AR_SETFILTER_GET: u32 = 2;
pub const DQ_AR_SETFILTER_FILL_TABLE: u32 = 16;
pub const DQ_AR_SETSCHED_PUT: u32 = 1;
pub const DQ_AR_SETSCHED_GET: u32 = 2;
pub const DQ_AR_SETSCHED_DATA_ONLY: u32 = 4;
pub const DQ_AR_SETSCHED_FILL_TABLE: u32 = 16;
pub const DQ_AR_RXCTR_NDO: u32 = 256;
pub const DQ_AR_RXCTR_TRIG: u32 = 512;
pub const DQ_AR_RATEHIGH: u32 = 1;
pub const DQ_AR_RATELOW: u32 = 0;
pub const DQ_AR_PARITYODD: u32 = 2;
pub const DQ_AR_PARITYEVEN: u32 = 4;
pub const DQ_AR_PARITYOFF: u32 = 0;
pub const DQ_AR_SDI_ENABLED: u32 = 8;
pub const DQ_AR_SDI_DISABLED: u32 = 0;
pub const DQ_AR_XBIT_ENABLED: u32 = 16;
pub const DQ_AR_XBIT_DISABLED: u32 = 0;
pub const DQ_AR_FEW_ENABLED: u32 = 32;
pub const DQ_AR_FEW_DISABLED: u32 = 0;
pub const DQ_AR_SHORTGAP_ENABLED: u32 = 64;
pub const DQ_AR_SHORTGAP_DISABLED: u32 = 0;
pub const DQ_AR_TIMESTAMP_ENABLED: u32 = 128;
pub const DQ_AR_TIMESTAMP_DISABLED: u32 = 0;
pub const DQ_AR_SLOWSLEW_ENABLED: u32 = 256;
pub const DQ_AR_SLOWSLEW_DISABLED: u32 = 0;
pub const DQ_AR_SDIMASK0: u32 = 512;
pub const DQ_AR_SDIMASK1: u32 = 1024;
pub const DQ_AR_SDIMASKOFFSET: u32 = 9;
pub const DQ_AR_LB_CHECK_PARITY: u32 = 4096;
pub const DQ_AR_ADD_TIMESTAMP: u32 = 8192;
pub const DQ_FRCNT_COUNT_ALL: u32 = 0;
pub const DQ_FRCNT_COUNT_GOOD: u32 = 16384;
pub const DQ_FRCNT_COUNT_FIFO: u32 = 32768;
pub const DQ_FRCNT_COUNT_TRIGGER: u32 = 49152;
pub const DQ_FRCNT_COUNT_PAR_ERR: u32 = 65536;
pub const DQ_FRCNT_COUNT_OFFSET: u32 = 14;
pub const DQ_AR_ALLOW_ZERO_LBL: u32 = 32768;
pub const DQ_AR_ALLOW_FIFO_HIGH: u32 = 65536;
pub const DQ_AR_IGNORE_BAD_DATA: u32 = 524288;
pub const DQ_AR_TXFIFO_DELAY: u32 = 1048576;
pub const DQ_AR_CHANGE_TX: u32 = 1073741824;
pub const DQ_AR_CHANGE_RX: u32 = 536870912;
pub const DQ_AR_SCHED_PSDISABLED: u32 = 0;
pub const DQ_AR_SCHED_PS100us: u32 = 1048576;
pub const DQ_AR_SCHED_PSTB0: u32 = 2097152;
pub const DQ_AR_SCHED_PSTB1: u32 = 3145728;
pub const DQ_AR_FIFO_TXREADY: u32 = 1048576;
pub const DQ_AR_FIFO_PSTB0: u32 = 1048576;
pub const DQ_AR_FIFO_PSTB1: u32 = 3145728;
pub const DQ_AR_MASTER: u32 = 131072;
pub const DQ_AR_RECYCLE: u32 = 65536;
pub const DQ_AR_TxPRIORITY_HIGH: u32 = 1;
pub const DQ_AR_TxPRIORITY_LOW: u32 = 2;
pub const DQ_AR_Tx_BLOCKING: u32 = 4;
pub const DQ_AR_Rx_LATEST: u32 = 1;
pub const DQ_AR_Rx_FIFO: u32 = 2;
pub const DQ_AR_Rx_BLOCKING: u32 = 4;
pub const DQ_AR_STATUS_CLEAR_ERROR: u32 = 1;
pub const DQ_AR_STATUS_CLEAR_COUNT: u32 = 2;
pub const DQ_AR_STATUS_GET_TOTAL: u32 = 4;
pub const DQ_AR_STATUS_GET_FRM_CTR: u32 = 8;
pub const DQ_AR_STATUS_GET_FRM_ERR: u32 = 16;
pub const DQ_AR_STATUS_GET_FRM_MIS: u32 = 32;
pub const DQ_AR_STATUS_GET_FIFO_CNT: u32 = 64;
pub const DQ_AR_ENABLE_Tx: u32 = 256;
pub const DQ_AR_ENABLE_Rx: u32 = 512;
pub const DQ_AR_ENABLE_SCHEDULER: u32 = 1024;
pub const DQ_AR_ENABLE_LOOPBACK: u32 = 2048;
pub const DQ_AR_ENABLE_FILTER: u32 = 4096;
pub const DQ_AR_ENABLE_RxFIFO: u32 = 8192;
pub const DQ_AR_ENABLE_TxFIFO: u32 = 16384;
pub const DQ_AR_LOGIC_LOOPBACK: u32 = 32768;
pub const DQ_AR_SCHED_FRAMECLK: u32 = 65536;
pub const DQ_AR_SCHED_SLAVETD: u32 = 131072;
pub const DQ_AR_SCHED_MJMN: u32 = 262144;
pub const DQ_AR_SCHEDULER_RATE: u32 = 0;
pub const DQ_AR_FIFO_RATE: u32 = 1;
pub const DQL_IOCTL566_CHANGE_FINCLEAR: u32 = 1;
pub const DQL_IOCTL566_CHANGE_FOUTCLEAR: u32 = 2;
pub const DQL_IOCTL555_CHANGE_FINFOUT: u32 = 3;
pub const DQL_IOCTL566_CHANGE_PAUSE: u32 = 9;
pub const DQL_IOCTL566_CHANGE_RESUME: u32 = 10;
pub const DQL_IOCTL566_CHANGE_CHIPCFG: u32 = 11;
pub const DQL_IOCTL566_CHANGE_3282_CLK: u32 = 12;
pub const DQL_IOCTL566_CHANGE_PAUSE_TX: u32 = 13;
pub const DQL_IOCTL566_CHANGE_RESUME_TX: u32 = 14;
pub const DQL_IOCTL566_CHANGE_3282_MIN: u32 = 25;
pub const DQL_IOCTL566_CHANGE_3282_MAX: u32 = 55;
pub const DQL_IOCTL516_CHANGE_RATE_MIN: u32 = 10000;
pub const DQL_IOCTL516_CHANGE_RATE_MAX: u32 = 200000;
pub const DQ_AR_SETTXPAGE_IMMEDIATE: u32 = 0;
pub const DQ_AR_SETTXPAGE_ONMF: u32 = 1;
pub const DQL_IOCTL566_DIOCTRL_LBL_PULSE: u32 = 1;
pub const DQL_L566_LBL_PULSE_EN: u32 = 1;
pub const DQL_L566_LBL_PULSE_DIS: u32 = 0;
pub const DQL_L566_LBL_CONT: u32 = 16384;
pub const DQL_L566_LBL_POL: u32 = 8192;
pub const DQL_IOCTL566_SETCFG: u32 = 1;
pub const DQL_IOCTL566_READ_FIFO: u32 = 5;
pub const DQL_IOCTL566_WRITE_FIFO: u32 = 6;
pub const DQL_IOCTL566_READ_CHNL: u32 = 7;
pub const DQL_IOCTL566_WRITE_CHNL: u32 = 8;
pub const DQL_IOCTL566_SETCHNL_MODE: u32 = 9;
pub const DQL_IOCTL566_START: u32 = 10;
pub const DQL_IOCTL566_STOP: u32 = 11;
pub const DQL_IOCTL566_SCHED: u32 = 12;
pub const DQL_IOCTL566_FILTER: u32 = 13;
pub const DQL_IOCTL566_SETCLK: u32 = 14;
pub const DQL_IOCTL566_STATUS: u32 = 15;
pub const DQL_IOCTL566_SETCHNL_CFG: u32 = 4097;
pub const DQL_IOCTL566_CHANGE: u32 = 4098;
pub const DQL_IOCTL566_SETTXPAGE: u32 = 4099;
pub const DQL_IOCTL566_SETMRFDLY: u32 = 4100;
pub const DQL_IOCTL566_ENDISTX: u32 = 4101;
pub const DQL_IOCTL566_DIOCTRL: u32 = 4102;
pub const DQL_IOCTL566_SETTXWM: u32 = 4103;
pub const DQL_IOCTL566_SETRXWM: u32 = 4104;
pub const DQL_IOCTL566_SETTIMEOUT: u32 = 4105;
pub const DQ_AR_ALL_ERROR_FLASG: u32 = 536870911;
pub const DQ_AR566_MODESCAN: u32 = 0;
pub const DQ_AR566_MODEFIFO: u32 = 131072;
pub const DQ_AR566_MODECONT: u32 = 196608;
pub const DQ_AR566_ID_STANDARD: u32 = 0;
pub const DQ_AR566_ID_EXTENDED: u32 = 262144;
pub const DQ_AR566_FIFO_GET_DATA: u32 = 16;
pub const DQ_AR566_FIFO_SET_DATA: u32 = 16;
pub const DQ_AR566_NAMELEN: u32 = 32;
pub const DQ_AR516_NAMELEN: u32 = 16;
pub const DQ_PL_601_CHAN: u32 = 8;
pub const DQ_PL_601_CHANSVC: u32 = 8;
pub const DQ_PL_602_CHAN: u32 = 4;
pub const DQ_PL_602_CHANSVC: u32 = 4;
pub const DQ_PL_601_INFOSZ: u32 = 4096;
pub const DQ_PL_601_BASE: u32 = 66000000;
pub const DQ_PL_601_BASE_DOUBLE: u32 = 132000000;
pub const DQ_PL_601_LISTSZ: u32 = 350;
pub const DQ_CT602_OPTION_GPSS: u32 = 2052;
pub const DQ_CT602_OPTION_M272: u32 = 2056;
pub const DQ_PL_601_MAXCLFRQ: u32 = 50000;
pub const DQ_PL_601_MAXCVFRQ: u32 = 50000;
pub const DQ_PL601_CHNLTYPE_MASK: u32 = 240;
pub const DQ_PL601_CHNLNUM_MASK: u32 = 15;
pub const DQ_PL601_CHNLTYPE_STATUS: u32 = 16;
pub const DQ_PL601_CHNLTYPE_CRH: u32 = 32;
pub const DQ_PL601_CHNLTYPE_CRL: u32 = 48;
pub const DQ_PL601_CHNLTYPE_CR0: u32 = 64;
pub const DQ_PL601_CHNLTYPE_CR1: u32 = 80;
pub const DQ_PL601_CHNLTYPE_SHADOW: u32 = 96;
pub const DQ_PL601_CHNLTYPE_TSTAMP: u32 = 112;
pub const DQ_PL601_CHNLTYPE_SDRH: u32 = 128;
pub const DQ_PL601_CHNLTYPE_SDRL: u32 = 144;
pub const DQ_PL601_CHNLTYPE_SDRT: u32 = 160;
pub const DQ_PL601_SMAUTO: u32 = 0;
pub const DQ_PL601_SMHARD: u32 = 1;
pub const DQ_PL601_SMSOFT: u32 = 2;
pub const DQ_PL601_SW8: u32 = 1;
pub const DQ_PL601_SW16: u32 = 2;
pub const DQ_PL601_SW32: u32 = 4;
pub const DQL_IOCTL601_SET_GPSS: u32 = 7;
pub const DQL_IOCTL601_READCHNL: u32 = 8;
pub const DQL_IOCTL601_WRITECHNL: u32 = 9;
pub const DQL_IOCTL601_START: u32 = 10;
pub const DQL_IOCTL601_STOP: u32 = 11;
pub const DQL_IOCTL601_READ_FIFO: u32 = 12;
pub const DQL_IOCTL602_EVENTS: u32 = 13;
pub const DQL_IOCTL602_STATUS: u32 = 15;
pub const DQL_IOCTL602_M272: u32 = 4097;
pub const DQL_IOCTL602_M272_CFG: u32 = 1;
pub const DQL_IOCTL602_M272_START: u32 = 2;
pub const DQL_IOCTL602_M272_STOP: u32 = 3;
pub const DQL_IOCTL602_M272_RDFRAME: u32 = 4;
pub const DQL_IOCTL602_M272_WRFRAME: u32 = 5;
pub const DQL_M272_CHNL_M272: u32 = 0;
pub const DQL_M272_CHNL_PXX: u32 = 1;
pub const DQL_IOCTL602_PGEN: u32 = 4098;
pub const DQL_IOCTL602_PGEN_CFG: u32 = 1;
pub const DQL_IOCTL602_PGEN_WRFIFO: u32 = 5;
pub const DQL_IOCTL601_GET_REG: u32 = 3;
pub const DQL_IOCTL601_SETCHNL_CFG: u32 = 1;
pub const DQL_IOCTL601_SET_REG: u32 = 2;
pub const DQL_IOCTL601_CTR_EN: u32 = 4;
pub const DQL_IOCTL601_CTR_DIS: u32 = 5;
pub const DQL_IOCTL601_ENALL: u32 = 6;
pub const DQL_IOCTL601_DISALL: u32 = 7;
pub const DQL_IOCTL601_CTR_CLR: u32 = 10;
pub const DQL_IOCTL601_SET_WM: u32 = 11;
pub const DQL_IOCTL601_ADDITIONAL: u32 = 12;
pub const DQL_IOCTL602_SET_TERMIN: u32 = 13;
pub const DQL_IOCTL602_SETPWM_WM: u32 = 14;
pub const DQL_IOCTL602_REEN_PWM_WM: u32 = 15;
pub const DQL_IOCTL601_MODIFY_IOR_REG: u32 = 16;
pub const DQ_602_BUFFERS_ON: u32 = 3;
pub const DQ_602_BUFFERS_OFF: u32 = 0;
pub const DQ_602_BUFFER_CLK_ON: u32 = 1;
pub const DQ_602_BUFFER_TRIG_ON: u32 = 2;
pub const DQ_602_ENABLE_CLK_DIO_ON: u32 = 2;
pub const DQ_602_ENABLE_TRIG_DIO_ON: u32 = 1;
pub const DQ_602_ENABLE_BOTH_DIO_ON: u32 = 3;
pub const DQ_602_ENABLE_BOTH_DIO_OFF: u32 = 0;
pub const DQ_L601_FIFOSZ: u32 = 512;
pub const DQEVENT601_READ_CTR: u32 = 4101;
pub const DQEVENT601_WRITE_CTR: u32 = 4102;
pub const DQEVENT601_STATUS_CTR: u32 = 4103;
pub const DQEVENT601_CONTROL_CTR: u32 = 4104;
pub const DQL_IOCTL602_IRQ_EN: u32 = 1;
pub const DQL_IOCTL602_EVT_EN: u32 = 0;
pub const DQ_ICR_CTU7: u32 = 128;
pub const DQ_ICR_CTU6: u32 = 64;
pub const DQ_ICR_CTU5: u32 = 32;
pub const DQ_ICR_CTU4: u32 = 16;
pub const DQ_ICR_CTU3: u32 = 8;
pub const DQ_ICR_CTU2: u32 = 4;
pub const DQ_ICR_CTU1: u32 = 2;
pub const DQ_ICR_CTU0: u32 = 1;
pub const DQ_CLI_CTU0S: u32 = 8192;
pub const DQ_CLI_CTU0E: u32 = 8316;
pub const DQ_CLI_CTU1S: u32 = 8320;
pub const DQ_CLI_CTU1E: u32 = 8444;
pub const DQ_CLI_CTU2S: u32 = 8448;
pub const DQ_CLI_CTU2E: u32 = 8572;
pub const DQ_CLI_CTU3S: u32 = 8576;
pub const DQ_CLI_CTU3E: u32 = 8700;
pub const DQ_CLI_CTU4S: u32 = 8704;
pub const DQ_CLI_CTU4E: u32 = 8828;
pub const DQ_CLI_CTU5S: u32 = 8832;
pub const DQ_CLI_CTU5E: u32 = 8956;
pub const DQ_CLI_CTU6S: u32 = 8960;
pub const DQ_CLI_CTU6E: u32 = 9084;
pub const DQ_CLI_CTU7S: u32 = 9088;
pub const DQ_CLI_CTU7E: u32 = 9212;
pub const DQ_CTU_STR: u32 = 0;
pub const DQ_CTU_CTR: u32 = 0;
pub const DQ_CTU_CCR: u32 = 4;
pub const DQ_CTU_PS: u32 = 8;
pub const DQ_CTU_CR: u32 = 12;
pub const DQ_CTU_LR: u32 = 12;
pub const DQ_CTU_IDBC: u32 = 16;
pub const DQ_CTU_CTR_RD: u32 = 16;
pub const DQ_CTU_IDBG: u32 = 20;
pub const DQ_CTU_CRR: u32 = 20;
pub const DQ_CTU_PC: u32 = 24;
pub const DQ_CTU_FLEN: u32 = 24;
pub const DQ_CTU_CRH: u32 = 28;
pub const DQ_CTU_CR0: u32 = 28;
pub const DQ_CTU_CRL: u32 = 32;
pub const DQ_CTU_CR1: u32 = 32;
pub const DQ_CTU_TBR: u32 = 36;
pub const DQ_CTU_GPSS: u32 = 36;
pub const DQ_CTU_FCNTI: u32 = 40;
pub const DQ_CTU_FDTIEOF: u32 = 40;
pub const DQ_CTU_IFWR: u32 = 44;
pub const DQ_CTU_FDTI: u32 = 48;
pub const DQ_CTU_RXCFGF: u32 = 48;
pub const DQ_CTU_FCNTO: u32 = 52;
pub const DQ_CTU_TXCFGF: u32 = 52;
pub const DQ_CTU_OFWR: u32 = 56;
pub const DQ_CTU_FDTO: u32 = 60;
pub const DQ_CTU_ISR: u32 = 64;
pub const DQ_CTU_IER: u32 = 64;
pub const DQ_CTU_ICR: u32 = 68;
pub const DQ_CTU_RXCFGFM: u32 = 68;
pub const DQ_CTU_FDDO: u32 = 72;
pub const DQ_CTU_TEST0: u32 = 76;
pub const DQ_CTU_SDRL: u32 = 80;
pub const DQ_CTU_SDRH: u32 = 84;
pub const DQ_CTU_SDRT: u32 = 88;
pub const DQ_CTU_PLLCFG: u32 = 92;
pub const DQ_CTU_PLLSTS: u32 = 92;
pub const DQ_602_EVT_STEP: u32 = 128;
pub const DQ_602_EVT0_BASE: u32 = 8288;
pub const DQ_602_EVT1_BASE: u32 = 8672;
pub const DQ_602_EVT2_BASE: u32 = 8544;
pub const DQ_602_EVT3_BASE: u32 = 8672;
pub const DQ_STR_EN: u32 = 31;
pub const DQ_STR_BUSY: u32 = 30;
pub const DQ_STR_CR0L: u32 = 29;
pub const DQ_STR_CR0GE: u32 = 28;
pub const DQ_STR_CR1: u32 = 27;
pub const DQ_STR_IN0: u32 = 26;
pub const DQ_STR_GT0: u32 = 25;
pub const DQ_STR_IN1: u32 = 24;
pub const DQ_STR_GT1: u32 = 23;
pub const DQ_STR_IHL: u32 = 22;
pub const DQ_STR_ILH: u32 = 21;
pub const DQ_STR_GHL: u32 = 20;
pub const DQ_STR_GLH: u32 = 19;
pub const DQ_STR_OU: u32 = 18;
pub const DQ_STR_IRQ: u32 = 17;
pub const DQ_STR_CRH: u32 = 16;
pub const DQ_STR_CRL: u32 = 15;
pub const DQ_STR_IFE: u32 = 14;
pub const DQ_STR_IFH: u32 = 13;
pub const DQ_STR_IFF: u32 = 12;
pub const DQ_STR_OFE: u32 = 11;
pub const DQ_STR_OFH: u32 = 10;
pub const DQ_STR_OFF: u32 = 9;
pub const DQ_STR_GT: u32 = 8;
pub const DQ_STR_GPSSB: u32 = 7;
pub const DQ_CTR_EN: u32 = 31;
pub const DQ_CTR_IFE: u32 = 30;
pub const DQ_CTR_IFS: u32 = 29;
pub const DQ_CTR_IIE: u32 = 28;
pub const DQ_CTR_GIE: u32 = 27;
pub const DQ_CTR_OIE: u32 = 26;
pub const DQ_CTR_OU: u32 = 25;
pub const DQ_CTR_OFE: u32 = 24;
pub const DQ_CTR_CLFI: u32 = 23;
pub const DQ_CTR_CLFO: u32 = 22;
pub const DQ_CTR_CLR: u32 = 21;
pub const DQ_CTR_GPIO: u32 = 20;
pub const DQ_CTR_GTSE: u32 = 19;
pub const DQ_CTR_GTPE: u32 = 18;
pub const DQ_CTR_OFTSE: u32 = 16;
pub const DQ_CTR_TOIE: u32 = 15;
pub const DQ_CTR_GPSSE: u32 = 14;
pub const DQ_CCR_RE: u32 = 31;
pub const DQ_CCR_EC2: u32 = 30;
pub const DQ_CCR_EC1: u32 = 29;
pub const DQ_CCR_EC0: u32 = 28;
pub const DQ_CCR_CRM3: u32 = 27;
pub const DQ_CCR_CRM2: u32 = 26;
pub const DQ_CCR_CRM1: u32 = 25;
pub const DQ_CCR_CRM0: u32 = 24;
pub const DQ_CCR_PSG: u32 = 23;
pub const DQ_CCR_TRS: u32 = 22;
pub const DQ_CCR_ENC: u32 = 21;
pub const DQ_CCR_TBS: u32 = 18;
pub const DQ_CCR_PSS: u32 = 15;
pub const DQ_CCR_MM2X: u32 = 14;
pub const DQ_CCR_PCSPT: u32 = 13;
pub const DQ_CCR_MMCOE: u32 = 12;
pub const DQ_CCR_MMCOOS: u32 = 11;
pub const DQ_CCR_VR_PS0: u32 = 9;
pub const DQ_TBR_EN: u32 = 31;
pub const DQ_GPSS_TXWFSEN: u32 = 67108864;
pub const DQ_GPSS_TXFCLKEN: u32 = 33554432;
pub const DQ_GPSS_EVTEN: u32 = 16777216;
pub const DQ_GPSS_FRMDBDIS: u32 = 8388608;
pub const DQ_GPSS_DTDBDIS: u32 = 4194304;
pub const DQ_GPSS_DIR: u32 = 2097152;
pub const DQ_GPSS_ACKPOL: u32 = 1048576;
pub const DQ_GPSS_ACKEN: u32 = 524288;
pub const DQ_GPSS_CLKEDGE: u32 = 262144;
pub const DQ_GPSS_DTENC1: u32 = 131072;
pub const DQ_GPSS_DTENC0: u32 = 65536;
pub const DQ_GPSS_CLKSRC1: u32 = 32768;
pub const DQ_GPSS_CLKSRC0: u32 = 16384;
pub const DQ_GPSS_TPOL: u32 = 8192;
pub const DQ_GPSS_TSOURCE: u32 = 4096;
pub const DQ_GPSS_TMODE1: u32 = 2048;
pub const DQ_GPSS_TMODE0: u32 = 1024;
pub const DQ_GPSS_TTYPE: u32 = 512;
pub const DQ_GPSS_DTWLEN4: u32 = 256;
pub const DQ_GPSS_DTWLEN0: u32 = 16;
pub const DQ_GPSS_DTPOLARITY: u32 = 8;
pub const DQ_GPSS_FSPOLARITY: u32 = 4;
pub const DQ_GPSS_FSTYPE1: u32 = 2;
pub const DQ_GPSS_FSTYPE0: u32 = 1;
pub const DQ_GPSS_POL_POS: u32 = 0;
pub const DQ_GPSS_POL_NEG: u32 = 1;
pub const DQ_GPSS_CLKEDGE_FALL: u32 = 0;
pub const DQ_GPSS_CLKEDGE_RISE: u32 = 1;
pub const DQ_GPSS_DTENC_NRZ: u32 = 2;
pub const DQ_GPSS_DTENC_NRZI: u32 = 3;
pub const DQ_GPSS_CLKSRC_DIS: u32 = 0;
pub const DQ_GPSS_CLKSRC_PLL: u32 = 1;
pub const DQ_GPSS_CLKSRC_DNA: u32 = 2;
pub const DQ_GPSS_CLKSRC_EXT: u32 = 3;
pub const DQ_GPSS_DIR_RX: u32 = 0;
pub const DQ_GPSS_DIR_TX: u32 = 1;
pub const DQ_GPSS_TSOURCE_DNA: u32 = 0;
pub const DQ_GPSS_TSOURCE_EXT: u32 = 1;
pub const DQ_GPSS_TMODE_1WORD: u32 = 0;
pub const DQ_GPSS_TMODE_FIFO: u32 = 1;
pub const DQ_GPSS_TMODE_ACT: u32 = 2;
pub const DQ_GPSS_TMODE_SBIT: u32 = 3;
pub const DQ_GPSS_TTYPE_LEVEL: u32 = 0;
pub const DQ_GPSS_TTYPE_EDGE: u32 = 1;
pub const DQ_GPSS_DTWLEN_VAR: u32 = 1;
pub const DQ_GPSS_FSTYPE_NBIT: u32 = 1;
pub const DQ_GPSS_FSTYPE_NWRD: u32 = 2;
pub const DQ_GPSS_FSTYPE_FRM: u32 = 3;
pub const DQ_IR_CPT: u32 = 31;
pub const DQ_IR_CR0L: u32 = 30;
pub const DQ_IR_CR0GE: u32 = 29;
pub const DQ_IR_CR1: u32 = 28;
pub const DQ_IR_LHI: u32 = 27;
pub const DQ_IR_LHG: u32 = 26;
pub const DQ_IR_HLI: u32 = 25;
pub const DQ_IR_HLG: u32 = 24;
pub const DQ_IR_CRH: u32 = 23;
pub const DQ_IR_CRL: u32 = 22;
pub const DQ_IR_IFE: u32 = 21;
pub const DQ_IR_IFH: u32 = 20;
pub const DQ_IR_IFF: u32 = 19;
pub const DQ_IR_EVT: u32 = 19;
pub const DQ_IR_OFE: u32 = 18;
pub const DQ_IR_OFH: u32 = 17;
pub const DQ_IR_OFF: u32 = 16;
pub const DQ_IR_FRME: u32 = 15;
pub const DQ_IR_FRMDR: u32 = 14;
pub const DQ_IR_FRMDT: u32 = 13;
pub const DQ_IR_TS_FE: u32 = 10;
pub const DQ_IR_TS_FHF: u32 = 9;
pub const DQ_IR_TS_UI: u32 = 8;
pub const DQ_IR601_CPT: u32 = 2147483648;
pub const DQ_IR601_CR0L: u32 = 1073741824;
pub const DQ_IR601_CR0GE: u32 = 536870912;
pub const DQ_IR601_CR1: u32 = 268435456;
pub const DQ_IR601_LHI: u32 = 134217728;
pub const DQ_IR601_LHG: u32 = 67108864;
pub const DQ_IR601_HLI: u32 = 33554432;
pub const DQ_IR601_HLG: u32 = 16777216;
pub const DQ_IR601_CRH: u32 = 8388608;
pub const DQ_IR601_CRL: u32 = 4194304;
pub const DQ_IR601_IFE: u32 = 2097152;
pub const DQ_IR601_IFH: u32 = 1048576;
pub const DQ_IR601_IFF: u32 = 524288;
pub const DQ_IR601_EVT: u32 = 524288;
pub const DQ_IR601_OFE: u32 = 262144;
pub const DQ_IR601_OFH: u32 = 131072;
pub const DQ_IR601_OFF: u32 = 65536;
pub const DQ_IR601_FRME: u32 = 32768;
pub const DQ_IR601_FRMDR: u32 = 16384;
pub const DQ_IR601_FRMDT: u32 = 8192;
pub const DQ_IR602_TS_FE: u32 = 1024;
pub const DQ_IR602_TS_FHF: u32 = 512;
pub const DQ_IR602_TS_UI: u32 = 256;
pub const DQ_EM_CR0: u32 = 0;
pub const DQ_EM_CR1: u32 = 1;
pub const DQ_EM_FFF: u32 = 2;
pub const DQ_EM_PC: u32 = 3;
pub const DQ_EM_TBR: u32 = 4;
pub const DQ_EM_GT: u32 = 5;
pub const DQ_EM_PULSES: u32 = 128;
pub const DQL_ADDMODE_DOUBLE_PRECISION: u32 = 16384;
pub const DQ_CM_CT: u32 = 0;
pub const DQ_CM_TPPM: u32 = 1;
pub const DQ_CM_VR: u32 = 2;
pub const DQ_CM_TCT: u32 = 4;
pub const DQ_CM_TTPPM: u32 = 5;
pub const DQ_CM_RTCT: u32 = 7;
pub const DQ_CM_ECT: u32 = 8;
pub const DQ_CM_HP: u32 = 9;
pub const DQ_CM_NP: u32 = 10;
pub const DQ_CM_QE: u32 = 11;
pub const DQ_CM_TECT: u32 = 12;
pub const DQ_CM_THP: u32 = 13;
pub const DQ_CM_TNP: u32 = 14;
pub const DQ_PL601_GPIOR_WRITE: u32 = 257;
pub const DQ_PL601_GPIOR_READ: u32 = 258;
pub const DQ_PL601_GPIOR_GPVAL_MASK: u32 = 255;
pub const DQ_PL601_GPIOR_GPEN_SHIFT: u32 = 8;
pub const DQ_PL601_GPIOR_GPEN7: u32 = 32768;
pub const DQ_PL601_GPIOR_GPEN6: u32 = 16384;
pub const DQ_PL601_GPIOR_GPEN5: u32 = 8192;
pub const DQ_PL601_GPIOR_GPEN4: u32 = 4096;
pub const DQ_PL601_GPIOR_GPEN3: u32 = 2048;
pub const DQ_PL601_GPIOR_GPEN2: u32 = 1024;
pub const DQ_PL601_GPIOR_GPEN1: u32 = 512;
pub const DQ_PL601_GPIOR_GPEN0: u32 = 256;
pub const DQ_PL601_GPIOR_GPVAL7: u32 = 128;
pub const DQ_PL601_GPIOR_GPVAL6: u32 = 64;
pub const DQ_PL601_GPIOR_GPVAL5: u32 = 32;
pub const DQ_PL601_GPIOR_GPVAL4: u32 = 16;
pub const DQ_PL601_GPIOR_GPVAL3: u32 = 8;
pub const DQ_PL601_GPIOR_GPVAL2: u32 = 4;
pub const DQ_PL601_GPIOR_GPVAL1: u32 = 2;
pub const DQ_PL601_GPIOR_GPVAL0: u32 = 1;
pub const DQ_PL601_GPIOR_GATE7: u32 = 8388608;
pub const DQ_PL601_GPIOR_GATE6: u32 = 4194304;
pub const DQ_PL601_GPIOR_GATE5: u32 = 2097152;
pub const DQ_PL601_GPIOR_GATE4: u32 = 1048576;
pub const DQ_PL601_GPIOR_GATE3: u32 = 524288;
pub const DQ_PL601_GPIOR_GATE2: u32 = 262144;
pub const DQ_PL601_GPIOR_GATE1: u32 = 131072;
pub const DQ_PL601_GPIOR_GATE0: u32 = 65536;
pub const DQ_PL601_GPIOR_CLKOUT7: u32 = 32768;
pub const DQ_PL601_GPIOR_CLKOUT6: u32 = 16384;
pub const DQ_PL601_GPIOR_CLKOUT5: u32 = 8192;
pub const DQ_PL601_GPIOR_CLKOUT4: u32 = 4096;
pub const DQ_PL601_GPIOR_CLKOUT3: u32 = 2048;
pub const DQ_PL601_GPIOR_CLKOUT2: u32 = 1024;
pub const DQ_PL601_GPIOR_CLKOUT1: u32 = 512;
pub const DQ_PL601_GPIOR_CLKOUT0: u32 = 256;
pub const DQ_PL601_GPIOR_CLKIN7: u32 = 128;
pub const DQ_PL601_GPIOR_CLKIN6: u32 = 64;
pub const DQ_PL601_GPIOR_CLKIN5: u32 = 32;
pub const DQ_PL601_GPIOR_CLKIN4: u32 = 16;
pub const DQ_PL601_GPIOR_CLKIN3: u32 = 8;
pub const DQ_PL601_GPIOR_CLKIN2: u32 = 4;
pub const DQ_PL601_GPIOR_CLKIN1: u32 = 2;
pub const DQ_PL601_GPIOR_CLKIN0: u32 = 1;
pub const DQ_PL602_GPIOR_WRITE: u32 = 257;
pub const DQ_PL602_GPIOR_READ: u32 = 258;
pub const DQ_PL602_GPIOR_TRIGEN3: u32 = 2147483648;
pub const DQ_PL602_GPIOR_TRIGEN2: u32 = 1073741824;
pub const DQ_PL602_GPIOR_TRIGEN1: u32 = 536870912;
pub const DQ_PL602_GPIOR_TRIGEN0: u32 = 268435456;
pub const DQ_PL602_GPIOR_CLKEN3: u32 = 134217728;
pub const DQ_PL602_GPIOR_CLKEN2: u32 = 67108864;
pub const DQ_PL602_GPIOR_CLKEN1: u32 = 33554432;
pub const DQ_PL602_GPIOR_CLKEN0: u32 = 16777216;
pub const DQ_PL602_GPIOR_TXTRMEN3: u32 = 8388608;
pub const DQ_PL602_GPIOR_TXTRMEN2: u32 = 4194304;
pub const DQ_PL602_GPIOR_TXTRMEN1: u32 = 2097152;
pub const DQ_PL602_GPIOR_TXTRMEN0: u32 = 1048576;
pub const DQ_PL602_GPIOR_RXTRMEN3: u32 = 524288;
pub const DQ_PL602_GPIOR_RXTRMEN2: u32 = 262144;
pub const DQ_PL602_GPIOR_RXTRMEN1: u32 = 131072;
pub const DQ_PL602_GPIOR_RXTRMEN0: u32 = 65536;
pub const DQ_PL602_GPIOR_GPEN7: u32 = 32768;
pub const DQ_PL602_GPIOR_GPEN6: u32 = 16384;
pub const DQ_PL602_GPIOR_GPEN5: u32 = 8192;
pub const DQ_PL602_GPIOR_GPEN4: u32 = 4096;
pub const DQ_PL602_GPIOR_GPEN3: u32 = 2048;
pub const DQ_PL602_GPIOR_GPEN2: u32 = 1024;
pub const DQ_PL602_GPIOR_GPEN1: u32 = 512;
pub const DQ_PL602_GPIOR_GPEN0: u32 = 256;
pub const DQ_PL602_GPIOR_GPVAL7: u32 = 128;
pub const DQ_PL602_GPIOR_GPVAL6: u32 = 64;
pub const DQ_PL602_GPIOR_GPVAL5: u32 = 32;
pub const DQ_PL602_GPIOR_GPVAL4: u32 = 16;
pub const DQ_PL602_GPIOR_GPVAL3: u32 = 8;
pub const DQ_PL602_GPIOR_GPVAL2: u32 = 4;
pub const DQ_PL602_GPIOR_GPVAL1: u32 = 2;
pub const DQ_PL602_GPIOR_GPVAL0: u32 = 1;
pub const DQ_PL602_GPIOR_TRIGEN_SHFT: u32 = 28;
pub const DQ_PL602_GPIOR_CLKEN_SHFT: u32 = 24;
pub const DQ_PL602_GPIOR_TXTERM_SHFT: u32 = 20;
pub const DQ_PL602_GPIOR_RXTERM_SHFT: u32 = 16;
pub const DQ_PL602_GPIOR_GPEN_SHFT: u32 = 8;
pub const DQ_PL602_GPIOR_ENABLE_OUT: u32 = 4278190080;
pub const DQ_PL602_GPIOR_TERM_MASK: u32 = 16711680;
pub const DQ_PL602_GPIOR_GPEN_MASK: u32 = 65280;
pub const DQ_PL602_GPIOR_GPVAL_MASK: u32 = 255;
pub const DQ_PL602_GPIOR_CLKOUT3: u32 = 32768;
pub const DQ_PL602_GPIOR_TRIGOUT3: u32 = 16384;
pub const DQ_PL602_GPIOR_CLKOUT2: u32 = 8192;
pub const DQ_PL602_GPIOR_TRIGOUT2: u32 = 4096;
pub const DQ_PL602_GPIOR_CLKOUT1: u32 = 2048;
pub const DQ_PL602_GPIOR_TRIGOUT1: u32 = 1024;
pub const DQ_PL602_GPIOR_CLKOUT0: u32 = 512;
pub const DQ_PL602_GPIOR_TRIGOUT0: u32 = 256;
pub const DQ_PL602_GPIOR_CLKIN3: u32 = 128;
pub const DQ_PL602_GPIOR_GATE3: u32 = 64;
pub const DQ_PL602_GPIOR_CLKIN2: u32 = 32;
pub const DQ_PL602_GPIOR_GATE2: u32 = 16;
pub const DQ_PL602_GPIOR_CLKIN1: u32 = 8;
pub const DQ_PL602_GPIOR_GATE1: u32 = 4;
pub const DQ_PL602_GPIOR_CLKIN0: u32 = 2;
pub const DQ_PL602_GPIOR_GATE0: u32 = 1;
pub const DQ_PL602_M272_STS_AERR: u32 = 1048576;
pub const DQ_PL602_M272_STS_PERR: u32 = 524288;
pub const DQ_PL602_M272_STS_FDONE: u32 = 262144;
pub const DQ_PL602_M272_STS_DTERR: u32 = 131072;
pub const DQ_PL602_M272_STS_SSERR: u32 = 65536;
pub const DQ_PL602_M272_STS_SERR: u32 = 256;
pub const DQ_PL602_M272_STS_ACK: u32 = 128;
pub const DQ_PL602_M272_STS_DI: u32 = 64;
pub const DQ_PL602_M272_STS_MERR: u32 = 32;
pub const DQ_PL602_M272_STS_DO: u32 = 16;
pub const DQ_PL602_M272_STS_REQ: u32 = 8;
pub const DQ_PL602_M272_STS_TX: u32 = 4;
pub const DQ_PL602_M272_STS_CLK: u32 = 2;
pub const DQ_PL602_M272_STS_BUSY: u32 = 1;
pub const DQ_PL602_M272_FIFOSZ: u32 = 2048;
pub const DQ_PL602_M272_FIFO_WORDS: u32 = 9;
pub const DQ_PL602_M272_DOF_ZERO: u32 = 2147483648;
pub const DQ_PL602_M272_DOF_CW: u32 = 1073741824;
pub const DQ_PL602_M272_DOF_DLY_US: u32 = 536870912;
pub const DQ_PL602_M272_DOF_DIE: u32 = 268435456;
pub const DQ_PL602_M272_DOF_PGE: u32 = 134217728;
pub const DQ_PL602_M272_DOF_PVE: u32 = 67108864;
pub const DQ_PL602_M272_DOF_FCE: u32 = 33554432;
pub const DQ_PL602_M272_DOF_WCE: u32 = 16777216;
pub const DQ_PL602_M272_DOF_DIF: u32 = 8388608;
pub const DQ_PL602_M272_DOF_DEF: u32 = 4194304;
pub const DQ_PL602_M272_DOF_PAR: u32 = 65536;
pub const DQ_PL602_M272_DOF_D15: u32 = 32768;
pub const DQ_PL602_M272_DOF_D0: u32 = 1;
pub const DQ_PL602_M272_BUS_D15: u32 = 65536;
pub const DQ_PL602_M272_BUS_D0: u32 = 2;
pub const DQ_PL602_M272_BUS_PAR: u32 = 1;
pub const DQ_PL602_M272_DIF_PSTS: u32 = 2147483648;
pub const DQ_PL602_M272_DIF_ZERO: u32 = 1073741824;
pub const DQ_PL602_M272_DIF_RDW: u32 = 536870912;
pub const DQ_PL602_M272_DIF_EOF: u32 = 268435456;
pub const DQ_PL602_M272_DIF_ERR: u32 = 134217728;
pub const DQ_PL602_M272_DIF_TO: u32 = 67108864;
pub const DQ_PL602_M272_DIF_SERR: u32 = 33554432;
pub const DQ_PL602_M272_DIF_DLY6: u32 = 8388608;
pub const DQ_PL602_M272_DIF_DLY0: u32 = 131072;
pub const DQ_PL602_M272_DIF_PAR: u32 = 65536;
pub const DQ_PL602_M272_DIF_D15: u32 = 32768;
pub const DQ_PL602_M272_DIF_D0: u32 = 1;
pub const DQ_PL602_M272_DIF_TS29: u32 = 1073741824;
pub const DQ_PL602_M272_DIF_ERRTS23: u32 = 8388608;
pub const DQ_PL602_M272_DIF_ERRTS0: u32 = 1;
pub const DQ_CT602_808_PXX_STS_PIM_DONE: u32 = 67108864;
pub const DQ_CT602_808_PXX_STS_PRF_DONE: u32 = 33554432;
pub const DQ_CT602_808_PXX_STS_PRFPIM_FHF: u32 = 16777216;
pub const DQ_CT602_808_PXX_STS_PRFPIM_FF: u32 = 8388608;
pub const DQ_CT602_808_PXX_STS_PRFRCLKTERR: u32 = 4194304;
pub const DQ_CT602_808_PXX_STS_PRFCLKCERR: u32 = 2097152;
pub const DQ_CT602_808_PXX_STS_PIMCLKTERR: u32 = 1048576;
pub const DQ_CT602_808_PXX_STS_PIMCLKCERR: u32 = 524288;
pub const DQ_CT602_808_PXX_STS_PRFDTERR: u32 = 262144;
pub const DQ_CT602_808_PXX_STS_PIMDTERR: u32 = 131072;
pub const DQ_CT602_808_PXX_STS_PIMDWE: u32 = 65536;
pub const DQ_CT602_808_PXX_STS_PIM_IDLE: u32 = 128;
pub const DQ_CT602_808_PXX_STS_PRF_IDLE: u32 = 64;
pub const DQ_CT602_808_PXX_STS_ACC: u32 = 32;
pub const DQ_CT602_808_PXX_STS_CLK: u32 = 16;
pub const DQ_CT602_808_PXX_STS_CODE: u32 = 8;
pub const DQ_CT602_808_PXX_STS_BPIM: u32 = 4;
pub const DQ_CT602_808_PXX_STS_BPRF: u32 = 2;
pub const DQ_CT602_808_PXX_STS_IDLE: u32 = 1;
pub const DQ_CT602_808_PXX_DIF_FMT1: u32 = 2147483648;
pub const DQ_CT602_808_PXX_DIF_FMT0: u32 = 1073741824;
pub const DQ_CCT602_808_PXX_DIF_FMT_TS: u32 = 0;
pub const DQ_CCT602_808_PXX_DIF_FMT_DS: u32 = 1;
pub const DQ_CCT602_808_PXX_DIF_FMT_PT: u32 = 2;
pub const DQ_CCT602_808_PXX_DIF_FMT_PD: u32 = 3;
pub const DQ_CT602_808_PXX_DIF_TS29: u32 = 536870912;
pub const DQ_CT602_808_PXX_DIF_TS0: u32 = 1;
pub const DQ_CT602_808_PXX_DIF_DS15: u32 = 32768;
pub const DQ_CT602_808_PXX_DIF_STB: u32 = 536870912;
pub const DQ_CT602_808_PXX_DIF_SPB: u32 = 268435456;
pub const DQ_CT602_808_PXX_DIF_PAR: u32 = 134217728;
pub const DQ_CT602_808_PXX_DIF_RES26: u32 = 67108864;
pub const DQ_CT602_808_PXX_DIF_ERR: u32 = 33554432;
pub const DQ_CT602_808_PXX_DIF_EOF: u32 = 16777216;
pub const DQ_CT602_808_PXX_DIF_PTS15: u32 = 8388608;
pub const DQ_CT602_808_PXX_DIF_PD31: u32 = 128;
pub const DQ_CT602_808_PXX_DIF_PD24: u32 = 1;
pub const DQ_CT602_808_PXX_DIF_RES29: u32 = 536870912;
pub const DQ_CT602_808_PXX_DIF_RES24: u32 = 16777216;
pub const DQ_CT602_808_PXX_DIF_PD23: u32 = 8388608;
pub const DQ_CT602_808_PXX_DIF_PD0: u32 = 1;
pub const DQ_CT602_PGEN_CFG_STTEN: u32 = 2;
pub const DQ_CT602_PGEN_CFG_SPTEN: u32 = 1;
pub const DQ_CT602_PGEN_CFG_ENABLE: u32 = 2147483648;
pub const DQ_CT602_PGEN_EN_OUT: u32 = 1073741824;
pub const DQ_CT602_PGEN_STS_FHF: u32 = 131072;
pub const DQ_CT602_PGEN_STS_FE: u32 = 65536;
pub const DQ_CT602_PGEN_STS_IRQ: u32 = 4;
pub const DQ_CT602_PGEN_STS_CLK: u32 = 2;
pub const DQ_CT602_PGEN_STS_ERR: u32 = 1;
pub const DQ_CT602_PGEN_FCMDR_CLK: u32 = 1048576;
pub const DQ_CT602_PGEN_FCMDR_IRQ: u32 = 524288;
pub const DQ_CT602_PGEN_FCMDR_CLKSRC_DEF: u32 = 0;
pub const DQ_CT602_PGEN_FCMDR_CLKSRC_FC: u32 = 1;
pub const DQ_CT602_PGEN_FCMDR_CLKSRC_WC: u32 = 2;
pub const DQ_CT602_PGEN_FCMDR_CLKSRC_TC: u32 = 3;
pub const DQ_CT602_PGEN_FCMDR_CLKSRC_PW: u32 = 4;
pub const DQ_CT602_PGEN_PGEN7: u32 = 128;
pub const DQ_CT602_PGEN_PGEN6: u32 = 64;
pub const DQ_CT602_PGEN_PGEN5: u32 = 32;
pub const DQ_CT602_PGEN_PGEN4: u32 = 16;
pub const DQ_CT602_PGEN_PGEN3: u32 = 8;
pub const DQ_CT602_PGEN_PGEN2: u32 = 4;
pub const DQ_CT602_PGEN_PGEN1: u32 = 2;
pub const DQ_CT602_PGEN_PGEN0: u32 = 1;
pub const DQ_PL_601_MODESCAN: u32 = 0;
pub const DQ_PL_601_MODEFIFO: u32 = 131072;
pub const DQ_PL_601_MODECONT: u32 = 196608;
pub const DQ_PL_601_TSCOPY: u32 = 262144;
pub const DQ_PL_601_FIFO_GET_DATA: u32 = 16;
pub const DQ_PL_601_NAMELEN: u32 = 16;
pub const DQ_M272_MASK_PRF_1kmin: u32 = 1;
pub const DQ_M272_MASK_PRF_1kmax: u32 = 2;
pub const DQ_M272_MASK_PRF_1klen: u32 = 4;
pub const DQ_M272_MASK_PRF_1kpmin: u32 = 8;
pub const DQ_M272_MASK_PRF_1kpmax: u32 = 16;
pub const DQ_M272_MASK_PRF_1kidle: u32 = 32;
pub const DQ_M272_MASK_PRF_1kcmin: u32 = 64;
pub const DQ_M272_MASK_PRF_1kcmax: u32 = 128;
pub const DQ_M272_MASK_PIM_10kmin: u32 = 256;
pub const DQ_M272_MASK_PIM_10kmax: u32 = 512;
pub const DQ_M272_MASK_PIM_10klen: u32 = 1024;
pub const DQ_M272_MASK_PIM_10kpmin: u32 = 2048;
pub const DQ_M272_MASK_PIM_10kpmax: u32 = 4096;
pub const DQ_M272_MASK_PIM_10kidle: u32 = 8192;
pub const DQ_M272_MASK_PXX_accdly: u32 = 16384;
pub const DQ_M272_MASK_PXX_acclen: u32 = 32768;
pub const DQ_M272_MASK_PIM_16clkdly: u32 = 65536;
pub const DQ_M272_MASK_272_2mdiv: u32 = 131072;
pub const DQ_M272_MASK_272_ackdodly: u32 = 262144;
pub const DQ_M272_MASK_272_ackdidly: u32 = 524288;
pub const DQ_M272_MASK_272_dwgap: u32 = 1048576;
pub const DQ_M272_MASK_272_clkdly: u32 = 2097152;
pub const DQ_M272_MASK_272_merrlen: u32 = 4194304;
pub const DQ_M272_MASK_272_serrlen: u32 = 8388608;
pub const DQ_M272_MASK_272_rxtxdly: u32 = 16777216;
pub const DQ_M272_MASK_NODEF: u32 = 2147483648;
pub const DQ_M272_MASK_PRF_1kmin_def: u32 = 0;
pub const DQ_M272_MASK_PRF_1kmax_def: u32 = 0;
pub const DQ_M272_MASK_PRF_1klen_def: u32 = 0;
pub const DQ_M272_MASK_PRF_1kpmin_def: u32 = 0;
pub const DQ_M272_MASK_PRF_1kpmax_def: u32 = 0;
pub const DQ_M272_MASK_PRF_1kidle_def: u32 = 0;
pub const DQ_M272_MASK_PRF_1kcmin_def: u32 = 0;
pub const DQ_M272_MASK_PRF_1kcmax_def: u32 = 0;
pub const DQ_M272_MASK_PIM_10kmin_def: u32 = 0;
pub const DQ_M272_MASK_PIM_10kmax_def: u32 = 0;
pub const DQ_M272_MASK_PIM_10klen_def: u32 = 0;
pub const DQ_M272_MASK_PIM_10kpmin_def: u32 = 0;
pub const DQ_M272_MASK_PIM_10kpmax_def: u32 = 0;
pub const DQ_M272_MASK_PIM_10kidle_def: u32 = 0;
pub const DQ_M272_MASK_PXX_accdly_def: u32 = 0;
pub const DQ_M272_MASK_PXX_acclen_def: u32 = 0;
pub const DQ_M272_MASK_PIM_16clkdly_def: u32 = 0;
pub const DQ_M272_MASK_272_2mdiv_def: u32 = 0;
pub const DQ_M272_MASK_272_ackdodly_def: u32 = 0;
pub const DQ_M272_MASK_272_ackdidly_def: u32 = 0;
pub const DQ_M272_MASK_272_dwgap_def: u32 = 0;
pub const DQ_M272_MASK_272_clkdly_def: u32 = 0;
pub const DQ_M272_MASK_272_merrlen_def: u32 = 0;
pub const DQ_M272_MASK_272_serrlen_def: u32 = 0;
pub const DQ_M272_MASK_272_rxtxdly_def: u32 = 0;
pub const DQ_M272_CFG_EN_272: u32 = 1;
pub const DQ_M272_CFG_EN_PIM: u32 = 2;
pub const DQ_M272_CFG_EN_PRF: u32 = 4;
pub const DQ_M272_CFG_PIM_ACC_EN: u32 = 16;
pub const DQ_M272_CFG_PRF_ACC_EN: u32 = 32;
pub const DQ_M272_CFG_FIFO_DIDO: u32 = 64;
pub const DQ_M272_CFG_MERR_EN: u32 = 128;
pub const DQ_CT602_PGEN_SRC_SW: u32 = 0;
pub const DQ_CT602_PGEN_SRC_TMR0: u32 = 1;
pub const DQ_CT602_PGEN_SRC_CROSS: u32 = 2;
pub const DQ_CT602_PGEN_SRC_TMR1: u32 = 3;
pub const DQ_CT602_PGEN_SRC_EXT0: u32 = 4;
pub const DQ_CT602_PGEN_SRC_EXT1: u32 = 5;
pub const DQ_CT602_PGEN_SRC_TB: u32 = 6;
pub const DQ_CT602_PGEN_SRC_INTER0: u32 = 8;
pub const DQ_CT602_PGEN_SRC_INTER1: u32 = 9;
pub const DQ_CT602_PGEN_SRC_SYNC0: u32 = 12;
pub const DQ_CT602_PGEN_SRC_SYNC1: u32 = 13;
pub const DQ_CT602_PGEN_SRC_SYNC2: u32 = 14;
pub const DQ_CT602_PGEN_SRC_SYNC3: u32 = 15;
pub const DQ_CT602_PGEN_TSCFG_NA: u32 = 0;
pub const DQ_CT602_PGEN_TSCFG_SW: u32 = 1;
pub const DQ_CT602_PGEN_TSCFG_EXT0: u32 = 4;
pub const DQ_CT602_PGEN_TSCFG_EXT1: u32 = 5;
pub const DQ_CT602_PGEN_TSCFG_TB: u32 = 6;
pub const DQ_CT602_PGEN_TSCFG_PB: u32 = 7;
pub const DQ_CT602_PGEN_TSCFG_SYNC0: u32 = 12;
pub const DQ_CT602_PGEN_TSCFG_SYNC1: u32 = 13;
pub const DQ_CT602_PGEN_TSCFG_SYNC2: u32 = 14;
pub const DQ_CT602_PGEN_TSCFG_SYNC3: u32 = 15;
pub const DQ_CT602_PGEN_TSCFG_EDGE: u32 = 16;
pub const DQ_PL_604_CHAN: u32 = 4;
pub const DQ_PL_604_CHANSVC: u32 = 4;
pub const DQ_PL_604_INFOSZ: u32 = 4096;
pub const DQ_PL_604_BASE: u32 = 66000000;
pub const DQ_PL_604_PLL: u32 = 16500000;
pub const DQ_PL_604_MAXCLFRQ: u32 = 50000;
pub const DQ_PL_604_MAXCVFRQ: u32 = 50000;
pub const DQ_PL604_CHNLMASK: u32 = 240;
pub const DQ_PL604_MSGNORM: u32 = 0;
pub const DQL_IOCTL604_SETCHNL_CFG: u32 = 1;
pub const DQL_IOCTL604_SET_REG: u32 = 2;
pub const DQL_IOCTL604_GET_REG: u32 = 3;
pub const DQL_IOCTL604_CTR_EN: u32 = 4;
pub const DQL_IOCTL604_CTR_DIS: u32 = 5;
pub const DQL_IOCTL604_ENALL: u32 = 6;
pub const DQL_IOCTL604_DISALL: u32 = 7;
pub const DQL_IOCTL604_READCHNL: u32 = 8;
pub const DQL_IOCTL604_CTR_CLR: u32 = 9;
pub const DQL_IOCTL604_SET_WM: u32 = 10;
pub const DQL_IOCTL604_GET_DIN: u32 = 11;
pub const DQL_IOCTL604_GET_DOUT: u32 = 12;
pub const DQL_IOCTL604_SET_DOUT: u32 = 13;
pub const DQ_L604_FIFOSZ: u32 = 1024;
pub const DQ_ICR_QDU3: u32 = 3;
pub const DQ_ICR_QDU2: u32 = 2;
pub const DQ_ICR_QDU1: u32 = 1;
pub const DQ_ICR_QDU0: u32 = 0;
pub const DQ_ICR_QDU_MASK: u32 = 15;
pub const DQ_PL_604_NAMELEN: u32 = 16;
pub const DQ_VR608_CHAN: u32 = 8;
pub const DQ_VR608_CHAN_PAIRS: u32 = 4;
pub const DQ_VR608_INFOSZ: u32 = 4096;
pub const DQ_VR608_BASE: u32 = 66000000;
pub const DQ_VR608_LISTSZ: u32 = 350;
pub const DQ_VR608_MAXCLFRQ: u32 = 320000;
pub const DQ_VR608_MAXFIFORATE: u32 = 20000;
pub const DQ_VR608_FIFOSZ: u32 = 512;
pub const DQ_VR608_CHNLTYPE_MASK: u32 = 240;
pub const DQ_VR608_CHNLNUM_MASK: u32 = 7;
pub const DQ_VR608_CHNLTYPE_STATUS: u32 = 16;
pub const DQ_VR608_CHNLTYPE_CRH: u32 = 32;
pub const DQ_VR608_CHNLTYPE_CRL: u32 = 48;
pub const DQ_VR608_CHNLTYPE_CR: u32 = 64;
pub const DQ_VR608_CHNLTYPE_CRR: u32 = 80;
pub const DQ_VR608_CHNLTYPE_SHADOW: u32 = 96;
pub const DQ_VR608_CHNLTYPE_TSTAMP: u32 = 112;
pub const DQ_VR608_CHNLTYPE_SDRH: u32 = 128;
pub const DQ_VR608_CHNLTYPE_SDRL: u32 = 144;
pub const DQ_VR608_CHNLTYPE_SDRT: u32 = 160;
pub const DQ_VR608_CHNLTYPE_AINSTS: u32 = 176;
pub const DQ_VR608_ADC_SPAN: f64 = 12.0;
pub const DQ_VR608_ADC_OFFS: f64 = 6.0;
pub const DQ_VR608_ADC_MAX: u32 = 65535;
pub const DQ_VR608_ADC_MULT: f64 = 1.1;
pub const DQ_VR608_DFLT_ADC_RATE: u32 = 200000;
pub const DQ_VR608_ADC_OPENLOW: f64 = 0.5;
pub const DQ_VR608_ADC_OPENHIGH: f64 = 1.5;
pub const DQ_VR608_ADC_TOOSMALL: u32 = 256;
pub const DQ_VR608_DAC_SPAN: f64 = 5.0;
pub const DQ_VR608_DAC_OFFS: f64 = 0.0;
pub const DQ_VR608_DAC_MAX: u32 = 65535;
pub const DQ_VR608_DFLT_APT_TH: f64 = 2.0;
pub const DQ_VR608_DFLT_TMODE_RATE: f64 = 10.0;
pub const DQ_VR608_RD_FLAG_CKT_MASK: u32 = 3;
pub const DQ_VR608_RD_FLAG_CKT_OPEN: u32 = 3;
pub const DQ_VR608_RD_FLAG_CKT_CLOSED: u32 = 2;
pub const DQ_VR608_RD_FLAG_CKT_NODATA: u32 = 0;
pub const DQ_VR608_RD_FLAG_NOTREADY: u32 = 2147483648;
pub const DQ_VR608_CHNLRQ_MASK: u32 = 240;
pub const DQ_VR608_CHNLRQ_STATUS: u32 = 16;
pub const DQ_VR608_CHNLRQ_TSTAMP: u32 = 32;
pub const DQ_VR608_CHNLRQ_ADC_RD: u32 = 64;
pub const DQL_IOCTL608_START: u32 = 10;
pub const DQL_IOCTL608_STOP: u32 = 11;
pub const DQL_IOCTL608_READ_FIFO: u32 = 12;
pub const DQL_IOCTL608_READ_ADC_FIFO: u32 = 13;
pub const DQL_IOCTL608_READ_ADC_STS: u32 = 14;
pub const DQL_IOCTL608_GET_REG: u32 = 3;
pub const DQL_IOCTL608_GETCHNL_CFG: u32 = 8;
pub const DQL_IOCTL608_SETCHNL_CFG: u32 = 1;
pub const DQL_IOCTL608_SET_REG: u32 = 2;
pub const DQL_IOCTL608_CTR_EN: u32 = 4;
pub const DQL_IOCTL608_CTR_DIS: u32 = 5;
pub const DQL_IOCTL608_ENALL: u32 = 6;
pub const DQL_IOCTL608_DISALL: u32 = 7;
pub const DQL_IOCTL608_CTR_CLR: u32 = 10;
pub const DQL_IOCTL608_SET_WM: u32 = 11;
pub const DQL_IOCTL608_SET_ADCRATE: u32 = 12;
pub const DQ_VR608_ZC_FIXED: u32 = 0;
pub const DQ_VR608_ZC_ONCHIP: u32 = 1;
pub const DQ_VR608_ZC_LOGIC: u32 = 2;
pub const DQ_VR608_APT_ONCHIP: u32 = 0;
pub const DQ_VR608_APT_FIXED: u32 = 16;
pub const DQ_VR608_APT_LOGIC: u32 = 32;
pub const DQ_VR608_APT_TTL: u32 = 48;
pub const DQ_VR608_APT_MASK: u32 = 240;
pub const DQ_VR608_MODE_COUNTER: u32 = 0;
pub const DQ_VR608_MODE_DECODER: u32 = 1;
pub const DQ_VR608_FIFO_POS: u32 = 16;
pub const DQ_VR608_FIFO_TS: u32 = 128;
pub const DQ_VR608_MODE_TIMED: u32 = 0;
pub const DQ_VR608_MODE_NPULSE: u32 = 256;
pub const DQ_VR608_MODE_ZPULSE: u32 = 512;
pub const DQ_VR608_MODE_MASK: u32 = 3840;
pub const DQ_VR608_FLAG_CH_USEFALLEDGE: u32 = 268435456;
pub const DQ_VR608_FLAG_CH_AUTOSTART: u32 = 536870912;
pub const DQ_VR608_FLAG_CH_VALID: u32 = 1073741824;
pub const DQ_VR608_FIFO_ENTRIES_TIMED: u32 = 3;
pub const DQ_VR608_FIFO_ENTRIES_NPULSE: u32 = 2;
pub const DQ_VR608_FIFO_ENTRIES_ZPULSE: u32 = 3;
pub const DQ_VR608_FIFO_ENTRIES_DECOD: u32 = 1;
pub const DQ_VR608_CFGVLD_ADC_RATE: u32 = 268435456;
pub const DQ_VR608_CFGVLD_TMODE_RATE: u32 = 134217728;
pub const DQ_VR608_CFGVLD_OFS_BIAS: u32 = 67108864;
pub const DQ_VR608_CFGVLD_ZC_LEVEL: u32 = 33554432;
pub const DQ_VR608_CFGVLD_APT_TH: u32 = 16777216;
pub const DQ_VR608_CFGVLD_APT_DIV: u32 = 8388608;
pub const DQ_VR608_CFGVLD_ADC_MV_AVG: u32 = 4194304;
pub const DQ_VR608_CFGVLD_SYNC_IN: u32 = 2097152;
pub const DQ_VR608_CFGVLD_SYNC_OUT: u32 = 1048576;
pub const DQ_VR608_CFGVLD_D_OUT: u32 = 524288;
pub const DQ_VR608_CFGVLD_NUM_TEETH: u32 = 262144;
pub const DQ_VR608_CFGVLD_Z_TOOTH_SZ: u32 = 131072;
pub const DQ_VR608_CFGFLG_CLEAR: u32 = 1;
pub const DQ_VR608_DFLT_ADC_MV_AVG: u32 = 3;
pub const DQ_VR608_DFLT_APT_DIV: u32 = 2;
pub const DQ_VR608_CFG_DO_DBG_OFF: u32 = 63;
pub const DQ_VR608_CFG_DO_FORCE1: u32 = 57;
pub const DQ_VR608_CFG_DO_FORCE0: u32 = 56;
pub const DQ_VR608_CFG_DO_ADC_DETA3: u32 = 47;
pub const DQ_VR608_CFG_DO_ADC_DETA2: u32 = 46;
pub const DQ_VR608_CFG_DO_ADC_DETA1: u32 = 45;
pub const DQ_VR608_CFG_DO_ADC_DETA0: u32 = 44;
pub const DQ_VR608_CFG_DO_ADC_DETB3: u32 = 43;
pub const DQ_VR608_CFG_DO_ADC_DETB2: u32 = 42;
pub const DQ_VR608_CFG_DO_ADC_DETB1: u32 = 41;
pub const DQ_VR608_CFG_DO_ADC_DETB0: u32 = 40;
pub const DQ_VR608_CFG_DO_ZDET7: u32 = 19;
pub const DQ_VR608_CFG_DO_ZDET6: u32 = 18;
pub const DQ_VR608_CFG_DO_ZDET5: u32 = 17;
pub const DQ_VR608_CFG_DO_ZDET4: u32 = 16;
pub const DQ_VR608_CFG_DO_ZDET3: u32 = 15;
pub const DQ_VR608_CFG_DO_ZDET2: u32 = 14;
pub const DQ_VR608_CFG_DO_ZDET1: u32 = 13;
pub const DQ_VR608_CFG_DO_ZDET0: u32 = 12;
pub const DQ_VR608_CFG_DO_VR_INPULS7: u32 = 11;
pub const DQ_VR608_CFG_DO_VR_INPULS6: u32 = 10;
pub const DQ_VR608_CFG_DO_VR_INPULS5: u32 = 9;
pub const DQ_VR608_CFG_DO_VR_INPULS4: u32 = 8;
pub const DQ_VR608_CFG_DO_VR_INPULS3: u32 = 7;
pub const DQ_VR608_CFG_DO_VR_INPULS2: u32 = 6;
pub const DQ_VR608_CFG_DO_VR_INPULS1: u32 = 5;
pub const DQ_VR608_CFG_DO_VR_INPULS0: u32 = 4;
pub const DQ_VR608_CFG_DO_VR_DRN3: u32 = 3;
pub const DQ_VR608_CFG_DO_VR_DRN2: u32 = 2;
pub const DQ_VR608_CFG_DO_VR_DRN1: u32 = 1;
pub const DQ_VR608_CFG_DO_VR_DRN0: u32 = 0;
pub const DQ_VR608_AIN_STS_ZLHB: u32 = 1048576;
pub const DQ_VR608_AIN_STS_ZHLB: u32 = 524288;
pub const DQ_VR608_AIN_STS_ZLHA: u32 = 262144;
pub const DQ_VR608_AIN_STS_ZHLA: u32 = 131072;
pub const DQ_VR608_AIN_STS_ABD: u32 = 65536;
pub const DQ_VR608_EECFG_FORMAT_VER: u32 = 24705;
pub const DQ_CT650_CHAN: u32 = 1;
pub const DQ_CT650_INFOSZ: u32 = 4096;
pub const DQ_CT650_BASE: u32 = 100000000;
pub const DQ_CT650_PERIOD_nS: u32 = 10;
pub const DQ_CT650_BASE_uS: u32 = 100;
pub const DQ_CT650_BASE_mS: u32 = 100000;
pub const DQ_CT650_MAXCLFRQ: u32 = 2000;
pub const DQ_CT650_MAXCVFRQ: u32 = 2000;
pub const DQL_LCR650_LED: u32 = 2;
pub const DQL_CT650_GPS_BAUD: u32 = 9600;
pub const DQ_CT650_RXGPSFIFOSIZE: u32 = 512;
pub const DQ_CT650_TXGPSFIFOSIZE: u32 = 512;
pub const DQ_CT650_EVTFIFOSIZE: u32 = 1024;
pub const DQ_CT650_RXGPSFIFOWM: u32 = 2048;
pub const DQ_CT650_TXGPSFIFOWM: u32 = 2048;
pub const DQ_CT650_BASE_PERIOD_uS: u32 = 100;
pub const DQ_650_FIFO_GET_DATA: u32 = 16;
pub const DQ_650_FIFO_SET_DATA: u32 = 16;
pub const DQ_L650_EV_CHAN: u32 = 9;
pub const DQL_IOCTL650_SETMODE: u32 = 1;
pub const DQL_IOCTL650_SETINMODE: u32 = 2;
pub const DQL_IOCTL650_SETOUTMODE: u32 = 3;
pub const DQL_IOCTL650_TIME: u32 = 4;
pub const DQL_IOCTL650_READ_FIFO: u32 = 6;
pub const DQL_IOCTL650_WRITE_FIFO: u32 = 7;
pub const DQL_IOCTL650_TRIGGER: u32 = 8;
pub const DQL_IOCTL650_CONTROL: u32 = 9;
pub const DQL_IOCTL650_START: u32 = 10;
pub const DQL_IOCTL650_SET_TTL: u32 = 11;
pub const DQL_IOCTL650_ADJUST: u32 = 12;
pub const DQL_IOCTL650_EVENTS: u32 = 13;
pub const DQL_IOCTL650_RESERVED_E: u32 = 14;
pub const DQL_IOCTL650_STATUS: u32 = 15;
pub const DQL_IOCTL650_RD_MSGDEC: u32 = 4097;
pub const DQL_IOCTL650_RD_TREG: u32 = 4098;
pub const DQL_IOCTL650_CALIBR: u32 = 4099;
pub const DQL_IOCTL650_SET_PROP: u32 = 1;
pub const DQL_IOCTL650_SET_AMOUT: u32 = 2;
pub const DQL_IOCTL650_SET_LOCAL: u32 = 3;
pub const DQL_IOCTL650_READ_REG: u32 = 4;
pub const DQL_IOCTL650_WRITE_REG: u32 = 5;
pub const DQL_IOCTL650_PROG_PLL: u32 = 6;
pub const DQL_IOCTL650_SET_AMZC: u32 = 7;
pub const DQL_IOCTL650_PROG_GPS: u32 = 8;
pub const DQL_IOCTL650_TRACK_GPS: u32 = 9;
pub const DQL_IOCTL650_SETTIME_GPS: u32 = 10;
pub const DQL_IOCTL650_GETTM_SBS: u32 = 1;
pub const DQL_IOCTL650_GETTM_ANSI: u32 = 2;
pub const DQL_IOCTL650_GETTM_BCD: u32 = 3;
pub const DQL_IOCTL650_SETTM_SBS: u32 = 4;
pub const DQL_IOCTL650_SETTM_ANSI: u32 = 5;
pub const DQL_IOCTL650_SETTM_BCD: u32 = 6;
pub const DQL_IOCTL650_GETTM_BCD_RESET_TS: u32 = 7;
pub const DQL_IOCTL650_GETTM_ANSI_RESET_TS: u32 = 8;
pub const DQL_IOCTL650_GETTM_SETTO_uS: u32 = 131072;
pub const DQL_IOCTL650_GETTM_SETTO_TS: u32 = 65536;
pub const DQL_IOCTL650_EVENT_FIFO: u32 = 1;
pub const DQL_IOCTL650_GPS_FIFO: u32 = 2;
pub const DQL_IOCTL650_GPS_STATUS: u32 = 1;
pub const DQL_IOCTL650_TK_STATUS: u32 = 2;
pub const DQL_IOCTL650_TIN_STATUS: u32 = 4;
pub const DQL_IOCTL650_TOUT_STATUS: u32 = 8;
pub const DQL_IOCTL650_EVT_STS: u32 = 256;
pub const DQL_IOCTL650_CAL_CT_ENABLE: u32 = 1;
pub const DQL_IOCTL650_CAL_CT_DISABLE: u32 = 2;
pub const DQL_IOCTL650_CAL_DATA_READY: u32 = 4;
pub const DQL_IOCTL650_CAL_CT_RD: u32 = 8;
pub const DQL_IOCTL650_CAL_CT_WR: u32 = 16;
pub const DQL_IOCTL650_CAL_TTL_IN_RD: u32 = 32;
pub const DQL_IOCTL650_CAL_GPSICID_RD: u32 = 64;
pub const DQL_IOCTL650_IRQ_EN: u32 = 1;
pub const DQL_IOCTL650_EVT_EN: u32 = 2147483648;
pub const DQ_CT650_GPS_RST: u32 = 8;
pub const DQ_CT650_GPS_PTP: u32 = 4;
pub const DQ_CT650_GPS_COM1: u32 = 2;
pub const DQ_CT650_TTL_SYNCX: u32 = 2147483648;
pub const DQ_CT650_ACC_GPS_HW_ANT_MASK: u32 = 768;
pub const DQ_CT650_ACC_GPS_HW_ANTSHORTED: u32 = 0;
pub const DQ_CT650_ACC_GPS_HW_ANTINVALID: u32 = 256;
pub const DQ_CT650_ACC_GPS_HW_ANTPASVOPN: u32 = 512;
pub const DQ_CT650_ACC_GPS_HW_ANTACTIVE: u32 = 768;
pub const DQ_CT650_NAMELEN: u32 = 32;
pub const DQ_CT650_EECFG_FORMAT_VER: u32 = 25857;
pub const DQ_CT_651_CHAN: u32 = 4;
pub const DQ_CT_651_CHAN_MASK: u32 = 3;
pub const DQ_CT_651_INFOSZ: u32 = 4096;
pub const DQ_CT_651_BASE_66: u32 = 66000000;
pub const DQ_CT_651_BASE_100: u32 = 100000000;
pub const DQ_CT_651_BASE_160: u32 = 160000000;
pub const DQ_LCR651_RXT: u32 = 16;
pub const DQ_LCR651_CLK_160MHZ: u32 = 4;
pub const DQ_LCR651_CLK_100MHZ: u32 = 0;
pub const DQ_LCR651_LED: u32 = 2;
pub const DQ_LCR651_DCEN: u32 = 1;
pub const DQL_IOCTL651_SET_LCR: u32 = 1;
pub const DQL_IOCTL651_SET_FWCFG: u32 = 3;
pub const DQL_IOCTL651_SET_DW: u32 = 4;
pub const DQL_IOCTL651_SET_FWDC: u32 = 5;
pub const DQL_IOCTL651_SET_FWDIV: u32 = 6;
pub const DQL_IOCTL651_SET_FWCLK_MIN: u32 = 7;
pub const DQL_IOCTL651_SET_FWCLK_MAX: u32 = 8;
pub const DQL_IOCTL651_GET_LCR: u32 = 1;
pub const DQL_IOCTL651_GET_STS: u32 = 2;
pub const DQL_IOCTL651_GET_FWCFG: u32 = 3;
pub const DQL_IOCTL651_GET_FWDC: u32 = 5;
pub const DQL_IOCTL651_GET_FWDIV: u32 = 6;
pub const DQL_IOCTL651_GET_FWCLK_MIN: u32 = 7;
pub const DQL_IOCTL651_GET_FWCLK_MAX: u32 = 8;
pub const DQL_IOCTL651_GET_FWCRH: u32 = 9;
pub const DQL_IOCTL651_GET_FWCRP: u32 = 10;
pub const DQL_IOCTL651_GET_FWCNT: u32 = 11;
pub const DQ_LCR651_STS_ICF: u32 = 4;
pub const DQ_LCR651_DB: u32 = 2;
pub const DQ_LCR651_STS_ICIV: u32 = 1;
pub const DQ_CT651_DW_C_LD_LDAC: u32 = 3145728;
pub const DQ_CT651_DW_C_RESET: u32 = 2621440;
pub const DQ_CT651_DW_C_PWR_DN: u32 = 2097152;
pub const DQ_CT651_DW_C_WR_UPD_CH: u32 = 1572864;
pub const DQ_CT651_DW_C_WRUPD_ALL: u32 = 1048576;
pub const DQ_CT651_DW_C_UPD_CH: u32 = 524288;
pub const DQ_CT651_DW_A_ALLAOUTS: u32 = 458752;
pub const DQ_CT651_DW_A_AOUTD: u32 = 196608;
pub const DQ_CT651_DW_A_AOUTC: u32 = 131072;
pub const DQ_CT651_DW_A_AOUTB: u32 = 65536;
pub const DQ_CT651_DW_A_AOUTA: u32 = 0;
pub const DQ_CT651_DW_D_MSB: u32 = 32768;
pub const DQ_CT651_DW_D_LSB: u32 = 1;
pub const DQ_CT651_DW_D_MIDSCALE: u32 = 32768;
pub const DQ_CT651_DW_D_HYST_DEF: u32 = 2048;
pub const DQ_CT651_FWCFG_EIH: u32 = 524288;
pub const DQ_CT651_FWCFG_ACRFW: u32 = 262144;
pub const DQ_CT651_FWCFG_ACFWDC: u32 = 131072;
pub const DQ_CT651_FWCFG_ACFWDIV: u32 = 65536;
pub const DQ_CT651_FWCFG_CH3_M3: u32 = 32768;
pub const DQ_CT651_FWCFG_CH3_M0: u32 = 4096;
pub const DQ_CT651_FWCFG_CH2_M3: u32 = 2048;
pub const DQ_CT651_FWCFG_CH2_M0: u32 = 256;
pub const DQ_CT651_FWCFG_CH1_M3: u32 = 128;
pub const DQ_CT651_FWCFG_CH1_M0: u32 = 16;
pub const DQ_CT651_FWCFG_CH0_M3: u32 = 8;
pub const DQ_CT651_FWCFG_CH0_M0: u32 = 1;
pub const DQ_CT651_FWCFG_CH0: u32 = 0;
pub const DQ_CT651_FWCFG_CH1: u32 = 4;
pub const DQ_CT651_FWCFG_CH2: u32 = 8;
pub const DQ_CT651_FWCFG_CH3: u32 = 12;
pub const DQ_CT651_CH_M_DIS_BUF: u32 = 0;
pub const DQ_CT651_CH_M_FOLLOW: u32 = 1;
pub const DQ_CT651_CH_M_FLYWHEEL: u32 = 2;
pub const DQ_CT651_CH_M_AUTO_FOL: u32 = 3;
pub const DQ_CT651_CH_M_OUT_0: u32 = 4;
pub const DQ_CT651_CH_M_OUT_1: u32 = 5;
pub const DQ_CT651_CH_M_FOL_DUTY: u32 = 6;
pub const DQ_CT651_CH_M_AUTO_DUTY: u32 = 7;
pub const DQ_CT651_CH_M_SYNC_0: u32 = 8;
pub const DQ_CT651_CH_M_SYNC_1: u32 = 9;
pub const DQ_CT651_CH_M_SYNC_2: u32 = 10;
pub const DQ_CT651_CH_M_SYNC_3: u32 = 11;
pub const DQ_CT651_CH_MODE_MASK: u32 = 15;
pub const DQ_CT651_FWDC_D31: u32 = 2147483648;
pub const DQ_CT651_FWDC_D0: u32 = 1;
pub const DQ_CT651_FWDIV_D31: u32 = 2147483648;
pub const DQ_CT651_FWDIV_D0: u32 = 1;
pub const DQ_CT651_FWCLK_MIN_D31: u32 = 2147483648;
pub const DQ_CT651_FWCLK_MIN_D0: u32 = 1;
pub const DQ_CT651_FWCLK_MAX_D31: u32 = 2147483648;
pub const DQ_CT651_FWCLK_MAX_D0: u32 = 1;
pub const DQ_CT651_FWCRH_STOP: u32 = 2147483648;
pub const DQ_CT651_FWCRH_D30: u32 = 1073741824;
pub const DQ_CT651_FWCRH_D0: u32 = 1;
pub const DQ_CT651_FWCRP_STOP: u32 = 2147483648;
pub const DQ_CT651_FWCRP_D31: u32 = 1073741824;
pub const DQ_CT651_FWCRP_D0: u32 = 1;
pub const DQ_CT651_FWCNT_D31: u32 = 2147483648;
pub const DQ_CT651_FWCNT_D0: u32 = 1;
pub const DQ_L651_NAMELEN: u32 = 32;
pub const DQ_AR664_CHAN: u32 = 2;
pub const DQ_AR664_INFOSZ: u32 = 4096;
pub const DQ_AR664_BASE: u32 = 66000000;
pub const DQ_AR664_MAXCLFRQ: u32 = 2000;
pub const DQ_AR664_MAXCVFRQ: u32 = 2000;
pub const DQ_AR664_MAXDLYCNT: u32 = 65535;
pub const DQ_AR664_LED: u32 = 2;
pub const DQ_AR664_READMEM_CYCLES: u32 = 2000;
pub const DQ_AR664_WAIT4BOOT: u32 = 200;
pub const DQ_AR664_SCH_ARR_SZ: u32 = 512;
pub const DQL_IOCTL664_SETCFG: u32 = 1;
pub const DQL_IOCTL664_RESERVED5: u32 = 5;
pub const DQL_IOCTL664_RESERVED6: u32 = 6;
pub const DQL_IOCTL664_READ_CHNL: u32 = 7;
pub const DQL_IOCTL664_WRITE_CHNL: u32 = 8;
pub const DQL_IOCTL664_09: u32 = 9;
pub const DQL_IOCTL664_START: u32 = 10;
pub const DQL_IOCTL664_SETCHNL_CFG: u32 = 11;
pub const DQL_IOCTL664_CONTROL: u32 = 12;
pub const DQL_IOCTL664_STATUS: u32 = 13;
pub const DQL_IOCTL664_LL_CMD: u32 = 14;
pub const DQL_IOCTL664_IO_CMD: u32 = 15;
pub const DQL_IOCTL664_SETCHNL_CHCFG: u32 = 1;
pub const DQL_IOCTL664_SETCHNL_CLRCFG: u32 = 2;
pub const DQL_IOCTL664_SETCHNL_ADDVL: u32 = 3;
pub const DQL_IOCTL664_SETCHNL_ADDPORT: u32 = 4;
pub const DQL_IOCTL664_SETCHNL_UPDVL: u32 = 5;
pub const DQL_IOCTL664_SETCHNL_UPDPORT: u32 = 6;
pub const DQL_IOCTL664_GETCHNL_VLPORT: u32 = 7;
pub const DQL_IOCTL664_SETCHNL_VMAP: u32 = 8;
pub const DQL_IOCTL664_SETSCH_BINS: u32 = 9;
pub const DQL_IOCTL664_SETSCH_TABLE: u32 = 10;
pub const DQL_IOCTL664_START_ENOPS: u32 = 1;
pub const DQL_IOCTL664_START_ENVLPORT: u32 = 2;
pub const DQL_IOCTL664_START_ENENDSYS: u32 = 3;
pub const DQL_IOCTL664_START_ENPART: u32 = 4;
pub const DQL_IOCTL664_RC_FRAME_SE: u32 = 2;
pub const DQL_IOCTL664_RC_FRAME_S: u32 = 4;
pub const DQL_IOCTL664_RC_FRAME_C: u32 = 6;
pub const DQL_IOCTL664_RC_FRAME_E: u32 = 8;
pub const DQL_IOCTL664_RC_FRAMEMASK: u32 = 14;
pub const DQL_IOCTL664_CONTROL_ERR: u32 = 1;
pub const DQL_IOCTL664_CONTROL_BUS: u32 = 2;
pub const DQL_IOCTL664_CONTROL_SYNC: u32 = 3;
pub const DQL_IOCTL664_STATUS_BUS: u32 = 1;
pub const DQL_IOCTL664_STATUS_VLPORT: u32 = 2;
pub const DQL_IOCTL664_STATUS_PORTMSG: u32 = 3;
pub const DQL_IOCTL664_STATUS_PORTARRAY: u32 = 8;
pub const DQL_IOCTL664_STATUS_DEVICE: u32 = 16;
pub const DQL_IOCTL664_STATUS_PORTCTR: u32 = 4;
pub const DQ_AR664_FIFO_GET_DATA: u32 = 16;
pub const DQ_AR664_FIFO_SET_DATA: u32 = 16;
pub const DQ_AR664_OPERATION_DISABLE: u32 = 0;
pub const DQ_AR664_CFG_XML_CHRBUF: u32 = 536870912;
pub const DQ_AR664_LISTSZ: u32 = 360;
pub const DQ_AR664_VL_ARR_SZ: u32 = 2048;
pub const DQ_AR664_PORT_ARR_SZ: u32 = 4096;
pub const DQL_CMD664_HEARTBIT: u32 = 4097;
pub const DQL_CMD664_GETHEARTBIT: u32 = 4098;
pub const DQL_CMD664_SETFLASHPTR: u32 = 4099;
pub const DQL_CMD664_WRITEFLASH: u32 = 4100;
pub const DQL_CMD664_RUN_BIT: u32 = 4101;
pub const DQL_CMD664_WAKEUP_ASYNC: u32 = 4102;
pub const DQL_CMD664_LEDTEST: u32 = 4103;
pub const DQL_CMD664_GETSTATUS: u32 = 4353;
pub const DQL_CMD664_WRFRAME: u32 = 4354;
pub const DQL_CMD664_RDFRAME: u32 = 4355;
pub const DQL_CMD664_WR_NFRAMES: u32 = 4356;
pub const DQL_CMD664_RD_NFRAMES: u32 = 4357;
pub const DQL_CMD664_MEMTEST: u32 = 4366;
pub const DQL_CMD664_GET_DEVINFO: u32 = 4367;
pub const DQL_CMD664_RESET: u32 = 4609;
pub const DQL_CMD664_AEVENT: u32 = 4610;
pub const DQL_WR664_FLAGS_HDR: u32 = 1073741824;
pub const DQ_AR664_EN_HMF_B: u32 = 32;
pub const DQ_AR664_EN_HMF_A: u32 = 16;
pub const DQ_AR664_MAX_LOGIC_VER: u32 = 16912742;
pub const DQ_AR664_MAX_DAQLIBVER: u32 = 67699261;
pub const DQ_AR664_MAX_AFDXFWVER: u32 = 16777309;
pub const DQ_AR664_MIN_DAQLIBVER: u32 = 67633180;
pub const DQ_AR664_MIN_AFDXFWVER: u32 = 16777304;
pub const DQ_AR664_DEV_INFO_PRMB: u32 = 22439;
pub const DQ_AR664_DEV_INFO_SVER: u32 = 1;
pub const DQ_AR664_ERR_OLD_AR_FW: u32 = 2;
pub const DQ_AR664_ERR_OLD_DQBIOS: u32 = 4;
pub const DQMAXTRL: u32 = 256;
pub const DQMAXCHNLS: u32 = 32;
pub const DQ_VDD_DMAPID_IN: u32 = 4080;
pub const DQ_VDD_DMAPID_OUT: u32 = 4081;
pub const DQ_VDD_SS: u32 = 2;
pub const DQ_PL_801_CHAN: u32 = 4;
pub const DQ_PL_801_CHANSVC: u32 = 4;
pub const DQ_PL_801_INFOSZ: u32 = 4096;
pub const DQ_PL_801_BASE: u32 = 66000000;
pub const DQ_PL_801_MAXCLFRQ: u32 = 50000;
pub const DQ_PL_801_MAXCVFRQ: u32 = 50000;
pub const DQ_PL801_CHNLMASK: u32 = 240;
pub const DQ_PL801_MSGNORM: u32 = 0;
pub const DQ_PL801_SW8: u32 = 1;
pub const DQ_PL801_SW16: u32 = 2;
pub const DQ_PL801_SW32: u32 = 4;
pub const DQ_CDS_STR: u32 = 0;
pub const DQ_CDS_CTR: u32 = 0;
pub const DQ_CDS_IFWR: u32 = 12;
pub const DQ_CDS_OFWR: u32 = 16;
pub const DQ_CDS_FDTI: u32 = 20;
pub const DQ_CDS_FDTO: u32 = 24;
pub const DQ_CDS_FCNTI: u32 = 28;
pub const DQ_CDS_FCNTO: u32 = 32;
pub const DQ_COM_CNT: u32 = 36;
pub const DQ_COM_DATA: u32 = 40;
pub const DQ_COM_TS: u32 = 44;
pub const DQ_CDU_START_MASK: u32 = 2096126;
pub const DQ_CDU_STOP_MASK: u32 = 2098176;
pub const DQ_FGC_MSGSIZE: u32 = 8;
pub const DQ_CDU_MSGSIZE: u32 = 1;
pub const DQL_IOCTL801_START: u32 = 10;
pub const DQL_IOCTL801_SETCHNL_CFG: u32 = 1;
pub const DQL_IOCTL801_SET_REG: u32 = 2;
pub const DQL_IOCTL801_GET_REG: u32 = 3;
pub const DQL_IOCTL801_SET_LCR: u32 = 4;
pub const DQL_IOCTL801_GET_LCR: u32 = 5;
pub const DQL_IOCTL801_SET_WM: u32 = 11;
pub const DQ_L801_FIFOSZ: u32 = 256;
pub const DQ_CLI_CDS0S: u32 = 8192;
pub const DQ_CR801_TXF: u32 = 131072;
pub const DQ_CR801_RXF: u32 = 65536;
pub const DQ_CR801_LB: u32 = 16;
pub const DQ_CR801_TS: u32 = 8;
pub const DQ_CR801_OED: u32 = 4;
pub const DQ_CR801_OES: u32 = 2;
pub const DQ_CR801_OEC: u32 = 1;
pub const DQ_PL_801_MODESCAN: u32 = 0;
pub const DQ_PL_801_MODEFIFO: u32 = 131072;
pub const DQ_PL_801_MODECONT: u32 = 196608;
pub const DQ_PL_801_TSCOPY: u32 = 262144;
pub const DQ_PL_801_FIFO_GET_DATA: u32 = 16;
pub const DQ_PL_801_NAMELEN: u32 = 16;
pub const DQ_PL_802_CHAN: u32 = 4;
pub const DQ_PL_802_CHANSVC: u32 = 4;
pub const DQ_PL_802_INFOSZ: u32 = 4096;
pub const DQ_PL_802_BASE: u32 = 66000000;
pub const DQ_PL_802_MAXCLFRQ: u32 = 50000;
pub const DQ_PL_802_MAXCVFRQ: u32 = 50000;
pub const DQ_PL802_CHNLMASK: u32 = 240;
pub const DQ_PL802_MSGNORM: u32 = 0;
pub const DQ_PL802_SW8: u32 = 1;
pub const DQ_PL802_SW16: u32 = 2;
pub const DQ_PL802_SW32: u32 = 4;
pub const DQ_MAN_STR: u32 = 0;
pub const DQ_MAN_CTR: u32 = 0;
pub const DQ_MAN_IFWR: u32 = 12;
pub const DQ_MAN_OFWR: u32 = 16;
pub const DQ_MAN_FDTI: u32 = 20;
pub const DQ_MAN_FDTO: u32 = 24;
pub const DQ_MAN_FCNTI: u32 = 28;
pub const DQ_MAN_FCNTO: u32 = 32;
pub const DQ_MAN_MSGSIZE: u32 = 256;
pub const DQL_IOCTL802_START: u32 = 10;
pub const DQL_IOCTL802_SETCHNL_CFG: u32 = 1;
pub const DQL_IOCTL802_SET_REG: u32 = 2;
pub const DQL_IOCTL802_GET_REG: u32 = 3;
pub const DQL_IOCTL802_SET_LCR: u32 = 4;
pub const DQL_IOCTL802_GET_LCR: u32 = 5;
pub const DQL_IOCTL802_SET_WM: u32 = 11;
pub const DQ_L802_FIFOSZ: u32 = 256;
pub const DQ_CLI_MANSS: u32 = 8448;
pub const DQ_CR802_TXF: u32 = 131072;
pub const DQ_CR802_RXF: u32 = 65536;
pub const DQ_CR802_LB: u32 = 16;
pub const DQ_CR802_RAW: u32 = 8;
pub const DQ_CR802_PRIMUS: u32 = 4;
pub const DQ_PL_802_MODESCAN: u32 = 0;
pub const DQ_PL_802_MODEFIFO: u32 = 131072;
pub const DQ_PL_802_MODECONT: u32 = 196608;
pub const DQ_PL_802_TSCOPY: u32 = 262144;
pub const DQ_PL_802_FIFO_GET_DATA: u32 = 16;
pub const DQ_PL_802_NAMELEN: u32 = 16;
pub const DQ_PL820_LINES: u32 = 104;
pub const DQ_PL820_CHAN: u32 = 2;
pub const DQ_PL820_CHANSVC: u32 = 2;
pub const DQ_PL820_INFOSZ: u32 = 4096;
pub const DQ_PL820_BASE: u32 = 66000000;
pub const DQ_PL820_PLL_DEF: u32 = 24000000;
pub const DQ_PL820_PORTS: u32 = 4;
pub const DQ_PL820_NIS_PORTS: u32 = 2;
pub const DQL_IOCTL820_SETCHNL_CFG: u32 = 1;
pub const DQ_PL820_NAMELEN: u32 = 32;
pub const DQ_PL820_MAXINITSPI: u32 = 32;
pub const DQ_L90x_CHAN: u32 = 2;
pub const DQ_L90x_INFOSZ: u32 = 4096;
pub const DQ_L90x_BASE: u32 = 66000000;
pub const DQ_L90x_NAMELEN: u32 = 32;
pub const DQ_DIO_440_DATA_WORDS: u32 = 4;
pub const DQ_DIO_470_CHAN: u32 = 1;
pub const DQ_PC_91x_OCHAN: u32 = 2;
pub const DQ_PC_91x_ICHAN: u32 = 5;
pub const DQ_PC_921_ICHAN: u32 = 5;
pub const DQ_PC_925_ICHAN: u32 = 4;
pub const DQ_PC_926_ICHAN: u32 = 4;
pub const DQ_PC_91x_CL_MASK: u32 = 7;
pub const DQ_PC_91x_INFOSZ: u32 = 4096;
pub const DQ_PC_91x_BASE: u32 = 66000000;
pub const DQ_PC91X_AI_SPAN: f64 = 2.5;
pub const DQ_PC91X_OFFSET: f64 = 1.25;
pub const DQ_PC91X_V_SCALER: f64 = 42.667;
pub const DQ_PC91X_I_SCALER_TH: f64 = 166.5;
pub const DQ_PC91X_I_SCALER_INT: f64 = 61.5;
pub const DQ_PC91X_I_SCALER_EXT: f64 = 83.5;
pub const DQ_PC91X_T_OFFSET: f64 = 273.0;
pub const DQ_PC91X_DEF_OFFSET_CAL: u32 = 0;
pub const DQ_PC91X_MAX_OFFSET_CAL_DEV: u32 = 4096;
pub const DQ_PC91X_DEF_GAIN_CAL: u32 = 32768;
pub const DQ_PC91X_MAX_GAIN_CAL_DEV: u32 = 3277;
pub const DQ_PC91X_MIN_ADC_WAIT: u32 = 160;
pub const DQ_PC91X_ADC_EOC: u32 = 262144;
pub const DQ_PC91X_ADC_SIG: u32 = 65536;
pub const DQ_PC91X_ADC_MSB: u32 = 32768;
pub const DQ_PC921_V_SCALER_02: f64 = 42.667;
pub const DQ_PC921_V_SCALER_3: f64 = 5.167;
pub const DQ_PC921_I_SCALER_1: f64 = -235.0;
pub const DQ_PC926_V_SCALER_02: f64 = 42.667;
pub const DQ_PC926_V_SCALER_3: f64 = 106.24;
pub const DQ_PC91X_CH_EXT_V: u32 = 0;
pub const DQ_PC91X_CH_INPUT_I: u32 = 1;
pub const DQ_PC91X_CH_INT_V: u32 = 2;
pub const DQ_PC91X_CH_DCDC_INPUT_V: u32 = 3;
pub const DQ_PC91X_CH_THERM: u32 = 4;
pub const DQ_PC921_CH_HOLD_V: u32 = 0;
pub const DQ_PC921_CH_INPUT_I: u32 = 1;
pub const DQ_PC921_CH_INT_V: u32 = 2;
pub const DQ_PC921_CH_3_3_V: u32 = 3;
pub const DQ_PC921_CH_THERM: u32 = 4;
pub const DQ_PC926_CH_V24: u32 = 0;
pub const DQ_PC926_CH_24V: u32 = 1;
pub const DQ_PC926_CH_100V: u32 = 2;
pub const DQ_PC926_CH_THERM: u32 = 3;
pub const DQ_PC925_AI_SPAN: f64 = 2.5;
pub const DQ_PC925_OFFSET: f64 = 1.25;
pub const DQ_PC925_I_SCALER: f64 = 1.2195;
pub const DQ_PC925_V_SCALER_I: f64 = 42.667;
pub const DQ_PC925_V_SCALER_F: f64 = 14.75;
pub const DQ_PC925_T_OFFSET: f64 = 273.0;
pub const DQ_PC925_DEF_OFFSET_CAL: u32 = 0;
pub const DQ_PC925_MAX_OFFSET_CAL_DEV: u32 = 4096;
pub const DQ_PC925_DEF_GAIN_CAL: u32 = 32768;
pub const DQ_PC925_MAX_GAIN_CAL_DEV: u32 = 3277;
pub const DQ_PC925_MIN_ADC_WAIT: u32 = 160;
pub const DQ_PC925_ADC_EOC: u32 = 262144;
pub const DQ_PC925_ADC_SIG: u32 = 65536;
pub const DQ_PC925_ADC_MSB: u32 = 32768;
pub const DQ_PC925_RPM_FACTOR: f64 = 46.875;
pub const DQ_PC926_AI_SPAN: f64 = 2.5;
pub const DQ_PC926_OFFSET: f64 = 1.25;
pub const DQ_PC926_GND_SCALER: f64 = 42.667;
pub const DQ_PC926_V24_SCALER: f64 = 42.667;
pub const DQ_PC926_24V_SCALER: f64 = 42.667;
pub const DQ_PC926_100V_SCALER: f64 = 204.5;
pub const DQ_PC926_T_OFFSET: f64 = 273.0;
pub const DQ_PC926_DEF_OFFSET_CAL: u32 = 0;
pub const DQ_PC926_MAX_OFFSET_CAL_DEV: u32 = 4096;
pub const DQ_PC926_DEF_GAIN_CAL: u32 = 32768;
pub const DQ_PC926_MAX_GAIN_CAL_DEV: u32 = 3277;
pub const DQ_PC926_MIN_ADC_WAIT: u32 = 160;
pub const DQ_PC926_ADC_EOC: u32 = 262144;
pub const DQ_PC926_ADC_SIG: u32 = 65536;
pub const DQ_PC926_ADC_MSB: u32 = 32768;
pub const DQ_PC925_FAN_OFF_TEMP: f64 = 15.0;
pub const DQ_PC925_FAN_ON_TEMP: f64 = 45.0;
pub const DQ_PC926_FAN_OFF_TEMP: f64 = 35.0;
pub const DQ_PC926_FAN_ON_TEMP: f64 = 45.0;
pub const DQ_DIO440_V_SCALER: f64 = 201.4;
pub const DQ_MUX461_V_SCALER: f64 = 23.1;
pub const DQ_PC925_CH_FAN_I: u32 = 0;
pub const DQ_PC925_CH_INPUT_V: u32 = 1;
pub const DQ_PC925_CH_FAN_V: u32 = 2;
pub const DQ_PC925_CH_THERM: u32 = 3;
pub const DQ_91X_STS_JMAIN_ON: u32 = 4;
pub const DQ_91X_STS_JIO_ON: u32 = 2;
pub const DQ_91X_STS_JIO: u32 = 1;
pub const DQ_PC921_STS_PFAIL: u32 = 64;
pub const DQ_PC921_STS_IN3: u32 = 32;
pub const DQ_PC921_STS_IN2: u32 = 16;
pub const DQ_PC921_STS_IN1: u32 = 8;
pub const DQ_PC921_STS_IN0: u32 = 4;
pub const DQ_PC921_STS_CCHRG: u32 = 2;
pub const DQ_PC921_STS_CDCHRG: u32 = 1;
pub const DQ_925_STS_FAN_ROTATING: u32 = 2;
pub const DQ_925_STS_FAN_PWR_ON: u32 = 1;
pub const DQ_PC921_CONFIG_SETTINGS: u32 = 17;
pub const DQ_PC91x_CONFIG_SETTINGS: u32 = 18;
pub const DQ_DIO470_SETPARAM_SETTINGS: u32 = 16;
pub const DQ_DIO470_SETPARAM_MIN_DELAY: u32 = 5;
pub const DQ_DIO470_DEFAULT_DELAY: u32 = 7;
pub const DQ_DIO470_SETPARAM_MAX_DELAY: u32 = 65540;
pub const DQ_PC92x_CHECK_us: u32 = 100000;
pub const DQ_DIO440_SETPARAM_WRITE: u32 = 18;
pub const DQ_PC921_CFG_POFF_EN: u32 = 2147483648;
pub const DQ_PC921_CFG_DCDC_EN: u32 = 1073741824;
pub const DQ_PC921_CFG_IN_PWR_EN: u32 = 536870912;
pub const DQ_PC921_CFG_INSEL1: u32 = 268435456;
pub const DQ_PC921_CFG_INSEL0: u32 = 134217728;
pub const DQ_PC921_CFG_IN_0_PWR_OFF: u32 = 536870912;
pub const DQ_PC921_CFG_IN_1_PWR_OFF: u32 = 671088640;
pub const DQ_PC921_CFG_IN_2_PWR_OFF: u32 = 805306368;
pub const DQ_PC921_CFG_IN_3_PWR_OFF: u32 = 939524096;
pub const DQ_PC921_CFG_PWR_ON: u32 = 0;
pub const DQ_PC921_CFG_POFF_CODE: u32 = 45311;
pub const DQ_PC921_CFG_POFF_MASK: u32 = 65535;
pub const DQ_PC921_SYNCCFG_OV3_HI: u32 = 2048;
pub const DQ_PC921_SYNCCFG_OV2_HI: u32 = 1024;
pub const DQ_PC921_SYNCCFG_OV1_HI: u32 = 512;
pub const DQ_PC921_SYNCCFG_OV0_HI: u32 = 256;
pub const DQ_PC921_SYNCCFG_OV3_LO: u32 = 0;
pub const DQ_PC921_SYNCCFG_OV2_LO: u32 = 0;
pub const DQ_PC921_SYNCCFG_OV1_LO: u32 = 0;
pub const DQ_PC921_SYNCCFG_OV0_LO: u32 = 0;
pub const DQ_PC921_SYNCCFG_SRC3: u32 = 128;
pub const DQ_PC921_SYNCCFG_SRC2: u32 = 64;
pub const DQ_PC921_SYNCCFG_SRC1: u32 = 32;
pub const DQ_PC921_SYNCCFG_SRC0: u32 = 16;
pub const DQ_PC921_SYNCCFG_S3EN: u32 = 8;
pub const DQ_PC921_SYNCCFG_S2EN: u32 = 4;
pub const DQ_PC921_SYNCCFG_S1EN: u32 = 2;
pub const DQ_PC921_SYNCCFG_S0EN: u32 = 1;
pub const DQ_PC921_SYNCCFG_PWR_MASK: u32 = 2176;
pub const DQ_PC_91X_CFG_EJIO: u32 = 2147483648;
pub const DQ_91X_CFG_DCEN3: u32 = 1073741824;
pub const DQ_91X_CFG_DCEN2: u32 = 536870912;
pub const DQ_91X_CFG_DCEN1: u32 = 268435456;
pub const DQ_PC_91X_CFG_AUTO: u32 = 134217728;
pub const DQ_925_FAN_OFF: u32 = 0;
pub const DQ_925_FAN_ON: u32 = 268435456;
pub const DQ_91X_POWER_OFF: u32 = 0;
pub const DQ_910_P10_15W: u32 = 268435456;
pub const DQ_910_P10_N10_30W: u32 = 1342177280;
pub const DQ_910_N10_15W: u32 = 1073741824;
pub const DQ_911_P5_N5_12W: u32 = 536870912;
pub const DQ_911_P10_N10_24W: u32 = 1342177280;
pub const DQ_911_P15_N15_36W: u32 = 1879048192;
pub const DQ_911_P15_N5_24W: u32 = 805306368;
pub const DQ_911_P5_N15_24W: u32 = 1610612736;
pub const DQ_911_P15_20W: u32 = 268435456;
pub const DQ_911_P15_N15_40W: u32 = 1879048192;
pub const DQ_911_N15_20W: u32 = 1073741824;
pub const DQ_912_P12_20W: u32 = 268435456;
pub const DQ_912_P24_40W: u32 = 1342177280;
pub const DQ_913_P15_N15_12W: u32 = 536870912;
pub const DQ_913_P30_N30_24W: u32 = 1342177280;
pub const DQ_913_P45_N45_36W: u32 = 1879048192;
pub const DQ_913_P45_N15_24W: u32 = 805306368;
pub const DQ_913_P15_N45_24W: u32 = 1610612736;
pub const DQ_91X_INTERNAL_POWER: u32 = 0;
pub const DQ_91X_EXT_JIO_POWER: u32 = 2147483648;
pub const DQ_91X_EXT_JIO_AUTOSWITCH: u32 = 2281701376;
pub const DQ_L91x_NAMELEN: u32 = 32;
pub const DQ_LAYER_CHAN: u32 = 4;
pub const DQ_LAYER_CALDACS: u32 = 4;
pub const DQ_LAYER_NAMELEN: u32 = 20;
pub const DQ_NOERROR: u32 = 0;
pub const DQ_SUCCESS: u32 = 1;
pub const DQ_WAIT_ENDED: u32 = 2;
pub const DQ_DATA_NOTREADY: u32 = 3;
pub const DQ_DATA_NOTEXIST: u32 = 4;
pub const DQ_DEV_STARTED: u32 = 5;
pub const DQ_DEV_STOPPED: u32 = 6;
pub const DQ_ILLEGAL_ENTRY: i32 = -1;
pub const DQ_ILLEGAL_HANDLE: i32 = -2;
pub const DQ_SOCK_LIB_ERROR: i32 = -3;
pub const DQ_TIMEOUT_ERROR: i32 = -4;
pub const DQ_SEND_ERROR: i32 = -5;
pub const DQ_RECV_ERROR: i32 = -6;
pub const DQ_IOM_ERROR: i32 = -7;
pub const DQ_PKT_TOOLONG: i32 = -8;
pub const DQ_ILLEGAL_PKTSIZE: i32 = -9;
pub const DQ_INIT_ERROR: i32 = -10;
pub const DQ_BAD_PARAMETER: i32 = -11;
pub const DQ_BAD_DEVN: i32 = -12;
pub const DQ_NOT_IMPLEMENTED: i32 = -13;
pub const DQ_NO_MEMORY: i32 = -14;
pub const DQ_NOT_ENOUGH_ROOM: i32 = -15;
pub const DQ_DEVICE_BUSY: i32 = -16;
pub const DQ_EVENT_ERROR: i32 = -17;
pub const DQ_BAD_CONFIG: i32 = -18;
pub const DQ_DATA_ERROR: i32 = -19;
pub const DQ_DEVICE_NOTREADY: i32 = -20;
pub const DQ_CALIBRATION_ERROR: i32 = -21;
pub const DQ_WRONG_DMAP: i32 = -22;
pub const DQ_DATA_NOT_AVAILABLE: i32 = -23;
pub const DQ_FIFO_OVERFLOW: i32 = -24;
pub const DQ_ILLEGAL_INDEX: i32 = -25;
pub const DQ_DIO_LINE_NOT_EXIST: i32 = -26;
pub const DQ_WRONG_PKT_COUNTER: i32 = -27;
pub const DQ_ASYNC_OUT_REREQST: i32 = -28;
pub const DQ_PROTOCOL_MISMATCH: i32 = -29;
pub const DQ_CMD_NOTALLOWED: i32 = -30;
pub const DQ_CMD_ACCESSDENIED: i32 = -31;
pub const DQ_DEVLOCKED: i32 = -32;
pub const DQ_CRC_CHECK_FAILED: i32 = -33;
pub const DQ_BAD_PARAMETER_0: i32 = -200;
pub const DQ_BAD_PARAMETER_1: i32 = -201;
pub const DQ_BAD_PARAMETER_2: i32 = -202;
pub const DQ_BAD_PARAMETER_3: i32 = -203;
pub const DQ_BAD_PARAMETER_4: i32 = -204;
pub const DQ_BAD_PARAMETER_5: i32 = -205;
pub const DQ_BAD_PARAMETER_6: i32 = -206;
pub const DQ_BAD_PARAMETER_7: i32 = -207;
pub const DQ_BAD_PARAMETER_8: i32 = -208;
pub const DQ_BAD_PARAMETER_9: i32 = -209;
pub const DQ_BAD_PARAMETER_10: i32 = -210;
pub const DQ_BAD_PARAMETER_11: i32 = -211;
pub const DQ_BAD_PARAMETER_12: i32 = -212;
pub const DQ_BAD_PARAMETER_13: i32 = -213;
pub const DQ_BAD_PARAMETER_14: i32 = -214;
pub const DQ_BAD_PARAMETER_15: i32 = -215;
pub const DQ_BAD_PARAMETER_16: i32 = -216;
pub const DQ_BAD_PARAMETER_17: i32 = -217;
pub const DQ_BAD_PARAMETER_18: i32 = -218;
pub const DQ_BAD_PARAMETER_19: i32 = -219;
pub const DQ_BAD_PARAMETER_20: i32 = -220;
pub const DQ_BAD_PARAMETER_21: i32 = -221;
pub const DQ_BAD_PARAMETER_22: i32 = -222;
pub const DQ_BAD_PARAMETER_23: i32 = -223;
pub const DQ_BAD_PARAMETER_24: i32 = -224;
pub const DQ_BAD_PARAMETER_25: i32 = -225;
pub const DQ_BAD_PARAMETER_26: i32 = -226;
pub const DQ_BAD_PARAMETER_27: i32 = -227;
pub const DQ_BAD_PARAMETER_28: i32 = -228;
pub const DQ_BAD_PARAMETER_29: i32 = -229;
pub const DQ_BAD_PARAMETER_30: i32 = -230;
pub const DQ_BAD_PARAMETER_31: i32 = -231;
pub const DQ_BAD_PARAMETER_32: i32 = -232;
pub const DQ_BAD_PARAMETER_33: i32 = -233;
pub const DQ_BAD_PARAMETER_34: i32 = -234;
pub const DQ_BAD_PARAMETER_35: i32 = -235;
pub const DQ_BAD_PARAMETER_36: i32 = -236;
pub const DQ_BAD_PARAMETER_37: i32 = -237;
pub const DQ_BAD_PARAMETER_38: i32 = -238;
pub const DQ_BAD_PARAMETER_39: i32 = -239;
pub const DQ_ERR_NEGATIVE_RETURN: u32 = 2147483648;
pub const DQ_CHK_ERROR_NONE: u32 = 0;
pub const DQ_CHK_ERROR_IGNORE: u32 = 1;
pub const DQ_CHK_ERROR_NONCRITICAL: u32 = 2;
pub const DQ_CHK_ERROR_CRITICAL: u32 = 3;
pub const DQ_CHECK_ALIVE: u32 = 1;
pub const DQ_ERROR_TIMEOUT_CTN: u32 = 2;
pub const DQ_MILLI_SECOND: u32 = 1000;
pub const DQ_MICRO_SECOND: u32 = 1000000;
pub const DQ_UDP_DAQ_PORT: u32 = 6334;
pub const DQ_UDP_DAQ_PORT_ASYNC: u32 = 6344;
pub const DQ_SO_RCVBUF_BUFFER_SIZE: u32 = 100000;
pub const DQ_SO_SNDBUF_BUFFER_SIZE: u32 = 12144;
pub const DQ_TABLE_ENTRY_FREE: i32 = -1;
pub const DQPAYLOADHDR: u32 = 2;
pub const DQ_MAX_UDP_PAYLOAD: u32 = 530;
pub const DQ_MAX_ETH_SIZE_100_ALIGNED: u32 = 1520;
pub const DQ_MAX_UDP_PAYLOAD_100: u32 = 1472;
pub const DQ_MAX_ETH_JUMBO: u32 = 9600;
pub const DQ_CQ_ENTRIES: u32 = 128;
pub const DQ_RING_BUFS: u32 = 1024;
pub const DQ_ZERO: u32 = 0;
pub const DQ_LASTDEV: u32 = 128;
pub const DQ_LASTCHAN: u32 = 128;
pub const DQ_NULLDEV: u32 = 255;
pub const DQ_WAIT_INDEFINITELY: u32 = 4294967295;
pub const DQCMD_RECEIVE_RETRIES: u32 = 2;
pub const DQ_MAX_RCV_ATTEMPTS: u32 = 2;
pub const DQ_MAXTRLISTSZ: u32 = 2048;
pub const DQ_MAXCLSIZE: u32 = 64;
pub const DQ_MAXTRIGS: u32 = 4;
pub const DQ_MAX_ACB_TABLE_SIZE: u32 = 256;
pub const DQ_MINIMALPERIOD: u32 = 1;
pub const DQ_MAX_IOM_TABLE_SIZE: u32 = 64;
pub const DQ_MAX_IOM_TABLE_MASK: u32 = 63;
pub const DQ_IOM_SECOND_PORT_HANDLE: u32 = 4096;
pub const DQ_IOM_EVENT_PORT_HANDLE: u32 = 8192;
pub const DQ_IOM_HANDLE_PORT_MASK: u32 = 12288;
pub const DQ_IOM_HANDLE_NOREPLY_BIT: u32 = 32768;
pub const DQ_IOM_HANDLE_MASK: u32 = 63;
pub const DQ_IOM_EVENT_MASK: u32 = 4128768;
pub const DQ_MAX_INST_TABLE_SIZE: u32 = 65;
pub const DQ_INSTMODE_NTOH: u32 = 32768;
pub const DQ_RB_REQUESTED: u32 = 1073741824;
pub const DQ_MAXFIFO: u32 = 48;
pub const DQ_RBINS_FULL: i32 = -1;
pub const DQ_RBINS_PARAM: i32 = -2;
pub const DQ_RBINS_FILLED: u32 = 3;
pub const DQ_RBINS_INVREQ: i32 = -4;
pub const DQ_RBINS_OLDPKT: i32 = -5;
pub const DQ_DIO404_REF_3_3V: u32 = 3;
pub const DQ_DIO404_REF_5V: u32 = 5;
pub const DQ_DIO404_REF_12V: u32 = 12;
pub const DQ_DIO404_REF_24V: u32 = 24;
pub const DQ_DIO404_REF_28V: u32 = 28;
pub const DQ_DIO404_REF_36V: u32 = 36;
pub const DQ_BUFFER_ACB: u32 = 1;
pub const DQ_BUFFER_DMAP: u32 = 2;
pub const DQ_BUFFER_MSGQ: u32 = 3;
pub const DQ_TRLENTRY_NOTREADY: u32 = 0;
pub const DQ_TRLENTRY_SELECTED: u32 = 1;
pub const DQ_TRLENTRY_READY: u32 = 2;
pub const DQ_SYNC_OBJ_NUM: u32 = 4;
pub const DQ_EVT_NUM_MMT: u32 = 0;
pub const DQ_EVT_NUM_1: u32 = 1;
pub const DQ_EVT_NUM_2: u32 = 2;
pub const DQ_EVT_NUM_3: u32 = 3;
pub const DQESID: u32 = 3738037470;
pub const DQ_TS: u32 = 0;
pub const DQ_VT: u32 = 1;
pub const DQE_TIMEOUT: u32 = 200;
pub const DQE_REREQUEST_TIMEOUT: u32 = 500;
pub const DQE_LAST_REREQUEST_TIMEOUT: u32 = 2000;
pub const DQE_RETRIES_ASYNC: u32 = 3;
pub const DQE_RETRIES_RECEIVE: u32 = 3;
pub const DQE_RETRIES_SEND: u32 = 3;
pub const DQE_RETRIES_REREQ: u32 = 3;
pub const DQE_MAX_COOLDOWN: u32 = 20;
pub const DQE_INBOUND_PACKETSZ: u32 = 512;
pub const DQE_OUTBOUND_PACKETSZ: u32 = 512;
pub const DQE_ABORT_AFTER: u32 = 10;
pub const DQE_USE_PROTOCOL: u32 = 0;
pub const DQE_PACKETS_AT_ONCE: u32 = 3;
pub const DQE_RDWRTHREAD_TIMEOUT: u32 = 250;
pub const DQE_PERIOD_ACB: u32 = 1000;
pub const DQE_PERIOD_MAPPED: u32 = 10000;
pub const DQE_MAX_TIMEOUT: u32 = 10000;
pub const DQE_MAX_RETRIES_ASYNC: u32 = 10;
pub const DQE_MAX_RETRIES_RECEIVE: u32 = 10;
pub const DQE_MAX_RETRIES_SEND: u32 = 10;
pub const DQE_MAX_INBOUND_PACKETSZ: u32 = 512;
pub const DQE_MAX_OUTBOUND_PACKETSZ: u32 = 512;
pub const DQE_MAX_ABORT_AFTER: u32 = 10;
pub const DQE_MAX_PACKETS_AT_ONCE: u32 = 10;
pub const DQ_ACBMODE_SINGLE: u32 = 1;
pub const DQ_ACBMODE_CYCLE: u32 = 2;
pub const DQ_ACBMODE_RECYCLED: u32 = 4;
pub const DQ_MAX_ACB_CLSIZE: u32 = 64;
pub const DQ_MAX_ACB_FRAMES: u32 = 64;
pub const DQ_MAX_ACB_FRAMESIZE: u32 = 1000000;
pub const DQ_DEFAULT_ACB_FRAMES: u32 = 2;
pub const DQ_DEFAULT_ACB_FRAMESIZE: u32 = 100;
pub const DQ_ACB_DIRECTION_INPUT: u32 = 0;
pub const DQ_ACB_DIRECTION_OUTPUT: u32 = 1;
pub const DQ_ACB_DATA_SINGLE: u32 = 256;
pub const DQ_ACB_DATA_DOUBLE: u32 = 512;
pub const DQ_ACB_DATA_RAW: u32 = 768;
pub const DQ_ACB_DATA_ENHANCED: u32 = 2048;
pub const DQ_ACB_DATA_SIZE_MASK: u32 = 3840;
pub const DQ_ACB_DATA_TSCOPY: u32 = 4096;
pub const DQ_ACB_NOCALIBRATION: u32 = 8192;
pub const DQ_ACB_DIRFLAGS_MASK: u32 = 65535;
pub const DQ_eDataAvailable: u32 = 1;
pub const DQ_eFrameDone: u32 = 2;
pub const DQ_eBufferDone: u32 = 4;
pub const DQ_ePacketDone: u32 = 8;
pub const DQ_eTransmitError: u32 = 16;
pub const DQ_eReceiveError: u32 = 32;
pub const DQ_eStarted: u32 = 64;
pub const DQ_eStopped: u32 = 128;
pub const DQ_eStartTrig: u32 = 256;
pub const DQ_eStopTrig: u32 = 512;
pub const DQ_eBufferError: u32 = 1024;
pub const DQ_ePacketLost: u32 = 2048;
pub const DQ_eTimeOut: u32 = 4096;
pub const DQ_ePacketOOB: u32 = 8192;
pub const DQ_eStatusError: u32 = 16384;
pub const DQ_eNoHeartReply: u32 = 32768;
pub const DQ_eAllEvents: u32 = 16383;
pub const DQ_MSG_MAX_ADDR_LEN: u32 = 16;
pub const DQ_MSG_MIN_QUEUE_SIZE: u32 = 8;
pub const DQ_MSG_DIRECTION_RECEIVING: u32 = 0;
pub const DQ_MSG_DIRECTION_SENDING: u32 = 1;
pub const DQ_MSG_MAX_MESSAGES: u32 = 1024;
pub const DQ_TIMEOUT_DELAY_RECEIVE: u32 = 2;
pub const DQ_STRFILEVER: &'static [u8; 14usize] = b"4, 10, 1, 14\0\0";
pub const DQ_STRPRODUCTVER: &'static [u8; 14usize] = b"4, 10, 1, 14\0\0";
pub const DQ_HEXFILEVER: u32 = 67764494;
pub const DQ_HEXPRODUCTVER: u32 = 67764494;
pub const DQ_VMAP_MODE_REREQ: u32 = 1;
pub const DQ_VMAP_ASYNC_CONFD: u32 = 2;
pub const DQ_VMAP_ASYNC_RUNNING: u32 = 4;
pub const DQ_AVMAP_INPKT_NEXT: u32 = 1;
pub const DQ_AVMAP_INPKT_MISSED: u32 = 2;
pub const DQ_AVMAP_INPKT_RESENT: u32 = 3;
pub const DQ_AVMAP_OUTPKT_ACK: u32 = 4;
pub const DQ_AVMAP_OUTPKT_MISSED: u32 = 5;
pub const DQ_AVMAP_TIMEOUT: u32 = 6;
pub const DQ_AVMAP_IN_ERROR: u32 = 7;
pub const DQ_SS_TYPES: u32 = 2;
pub const DQRT_USE_BLOCK_CONVERSION: u32 = 1;
pub const DQRT_DEFAULT_DEBUG_OPTION: u32 = 1;
pub const DQ_RTRE_WAIT_PACKET: u32 = 2;
pub const DQ_RTRE_PROC_PACKET: u32 = 4;
pub const DQ_RTA_QUEUE_DEPTH: u32 = 64;
pub const DQ_RTA_MAX_QUEUE_DEPTH: u32 = 1024;
pub const DQ_RTA_NUM_PACKETS_WAIT: u32 = 3;
pub const DQ_AVMAP_TRIG_SOFT: u32 = 0;
pub const DQ_AVMAP_TRIG_RISING: u32 = 1;
pub const DQ_AVMAP_TRIG_FALLING: u32 = 2;
pub const DQ_AVMAP_TRIG_NOCFG: i32 = -1;
pub const DQ_AVMAP_TYP_WMRK: u32 = 0;
pub const DQ_AVMAP_TYP_TIME: u32 = 1;
pub const DQ_AVMAP_TYP_CLCK: u32 = 2;
pub type size_t = ::std::os::raw::c_ulong;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type u_short = __u_short;
pub type u_long = __u_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type sa_family_t = ::std::os::raw::c_ushort;
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
pub type in_port_t = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
pub type SOCKET = ::std::os::raw::c_int;
pub type uint8 = ::std::os::raw::c_uchar;
pub type uint16 = ::std::os::raw::c_ushort;
pub type uint32 = ::std::os::raw::c_uint;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type int8 = ::std::os::raw::c_char;
pub type int16 = ::std::os::raw::c_short;
pub type int32 = ::std::os::raw::c_int;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _SIGS {
    pub clocksrc: [uint8; 4usize],
    pub clockedge: [uint8; 4usize],
    pub trigsrc: [uint8; 4usize],
    pub trigedge: [uint8; 4usize],
    pub diosrc: [uint8; 4usize],
    pub diodir: [uint8; 4usize],
    pub isosrc: [uint8; 4usize],
    pub syncxsrc: [uint8; 4usize],
    pub cmd: uint32,
}
#[test]
fn bindgen_test_layout__SIGS() {
    assert_eq!(
        ::std::mem::size_of::<_SIGS>(),
        36usize,
        concat!("Size of: ", stringify!(_SIGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_SIGS>(),
        1usize,
        concat!("Alignment of ", stringify!(_SIGS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).clocksrc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(clocksrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).clockedge as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(clockedge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).trigsrc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(trigsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).trigedge as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(trigedge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).diosrc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(diosrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).diodir as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(diodir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).isosrc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(isosrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).syncxsrc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(syncxsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SIGS>())).cmd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SIGS),
            "::",
            stringify!(cmd)
        )
    );
}
pub type SGNLS = _SIGS;
pub type pSGNLS = *mut _SIGS;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _SYNCPAL {
    pub pll_frq: f32,
    pub pll_Pt: uint16,
    pub pll_Qt: uint16,
    pub pll_Div: uint32,
    pub log_Div: uint32,
}
#[test]
fn bindgen_test_layout__SYNCPAL() {
    assert_eq!(
        ::std::mem::size_of::<_SYNCPAL>(),
        16usize,
        concat!("Size of: ", stringify!(_SYNCPAL))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYNCPAL>(),
        1usize,
        concat!("Alignment of ", stringify!(_SYNCPAL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYNCPAL>())).pll_frq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYNCPAL),
            "::",
            stringify!(pll_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYNCPAL>())).pll_Pt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYNCPAL),
            "::",
            stringify!(pll_Pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYNCPAL>())).pll_Qt as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYNCPAL),
            "::",
            stringify!(pll_Qt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYNCPAL>())).pll_Div as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYNCPAL),
            "::",
            stringify!(pll_Div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYNCPAL>())).log_Div as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYNCPAL),
            "::",
            stringify!(log_Div)
        )
    );
}
pub type SYNCPLL = _SYNCPAL;
pub type pSYNCPLL = *mut _SYNCPAL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYNCRT {
    pub sync_x: [[uint8; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout__SYNCRT() {
    assert_eq!(
        ::std::mem::size_of::<_SYNCRT>(),
        16usize,
        concat!("Size of: ", stringify!(_SYNCRT))
    );
    assert_eq!(
        ::std::mem::align_of::<_SYNCRT>(),
        1usize,
        concat!("Alignment of ", stringify!(_SYNCRT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SYNCRT>())).sync_x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SYNCRT),
            "::",
            stringify!(sync_x)
        )
    );
}
pub type SYNCRT = _SYNCRT;
pub type pSYNCRT = *mut _SYNCRT;
#[repr(C, packed)]
pub struct DQPKT {
    pub dqProlog: uint32,
    pub dqTStamp: uint16,
    pub dqCounter: uint16,
    pub dqCommand: uint32,
    pub rqId: uint32,
    pub dqData: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQPKT() {
    assert_eq!(
        ::std::mem::size_of::<DQPKT>(),
        16usize,
        concat!("Size of: ", stringify!(DQPKT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQPKT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQPKT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPKT>())).dqProlog as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPKT),
            "::",
            stringify!(dqProlog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPKT>())).dqTStamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPKT),
            "::",
            stringify!(dqTStamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPKT>())).dqCounter as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPKT),
            "::",
            stringify!(dqCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPKT>())).dqCommand as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPKT),
            "::",
            stringify!(dqCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPKT>())).rqId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPKT),
            "::",
            stringify!(rqId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPKT>())).dqData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPKT),
            "::",
            stringify!(dqData)
        )
    );
}
pub type pDQPKT = *mut DQPKT;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQRDCFG {
    pub model: uint32,
    pub ipaddr: uint32,
    pub sernum: uint32,
    pub caldate: uint32,
    pub mfgdate: uint32,
    pub devmod: [uint16; 32usize],
    pub option: [uint16; 32usize],
    pub tx_n: [uint32; 32usize],
    pub rx_n: [uint32; 32usize],
}
#[test]
fn bindgen_test_layout_DQRDCFG() {
    assert_eq!(
        ::std::mem::size_of::<DQRDCFG>(),
        404usize,
        concat!("Size of: ", stringify!(DQRDCFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQRDCFG>(),
        1usize,
        concat!("Alignment of ", stringify!(DQRDCFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).model as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).ipaddr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(ipaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).sernum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(sernum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).caldate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(caldate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).mfgdate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(mfgdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).devmod as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(devmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).option as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).tx_n as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(tx_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCFG>())).rx_n as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCFG),
            "::",
            stringify!(rx_n)
        )
    );
}
pub type pDQRDCFG = *mut DQRDCFG;
#[repr(C, packed)]
pub struct DQWRVALM {
    pub addr: uint32,
    pub increment: int16,
    pub size: uint8,
    pub count: uint8,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQWRVALM() {
    assert_eq!(
        ::std::mem::size_of::<DQWRVALM>(),
        8usize,
        concat!("Size of: ", stringify!(DQWRVALM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWRVALM>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWRVALM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRVALM>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRVALM),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRVALM>())).increment as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRVALM),
            "::",
            stringify!(increment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRVALM>())).size as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRVALM),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRVALM>())).count as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRVALM),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRVALM>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRVALM),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQWRVALM = *mut DQWRVALM;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct wDQRDVALM {
    pub addr: uint32,
    pub increment: int16,
    pub size: uint8,
    pub count: uint8,
}
#[test]
fn bindgen_test_layout_wDQRDVALM() {
    assert_eq!(
        ::std::mem::size_of::<wDQRDVALM>(),
        8usize,
        concat!("Size of: ", stringify!(wDQRDVALM))
    );
    assert_eq!(
        ::std::mem::align_of::<wDQRDVALM>(),
        1usize,
        concat!("Alignment of ", stringify!(wDQRDVALM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wDQRDVALM>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wDQRDVALM),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wDQRDVALM>())).increment as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wDQRDVALM),
            "::",
            stringify!(increment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wDQRDVALM>())).size as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(wDQRDVALM),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wDQRDVALM>())).count as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(wDQRDVALM),
            "::",
            stringify!(count)
        )
    );
}
pub type pwDQRDVALM = *mut wDQRDVALM;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSETCFG {
    pub dev: uint8,
    pub ss: uint8,
    pub cfg: uint32,
}
#[test]
fn bindgen_test_layout_DQSETCFG() {
    assert_eq!(
        ::std::mem::size_of::<DQSETCFG>(),
        6usize,
        concat!("Size of: ", stringify!(DQSETCFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETCFG>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETCFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCFG>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCFG),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCFG>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCFG),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCFG>())).cfg as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCFG),
            "::",
            stringify!(cfg)
        )
    );
}
#[repr(C, packed)]
pub struct DQEVENT {
    pub dev: uint8,
    pub ss: uint8,
    pub size: uint16,
    pub event: uint32,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQEVENT() {
    assert_eq!(
        ::std::mem::size_of::<DQEVENT>(),
        8usize,
        concat!("Size of: ", stringify!(DQEVENT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEVENT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEVENT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEVENT>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEVENT),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEVENT>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEVENT),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEVENT>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEVENT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEVENT>())).event as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEVENT),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEVENT>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEVENT),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQEVENT = *mut DQEVENT;
#[repr(C, packed)]
pub struct DQAXMAP {
    pub dev: uint8,
    pub ss: uint8,
    pub size: uint16,
    pub mode: uint32,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQAXMAP() {
    assert_eq!(
        ::std::mem::size_of::<DQAXMAP>(),
        8usize,
        concat!("Size of: ", stringify!(DQAXMAP))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAXMAP>(),
        1usize,
        concat!("Alignment of ", stringify!(DQAXMAP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAXMAP>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAXMAP),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAXMAP>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAXMAP),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAXMAP>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAXMAP),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAXMAP>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAXMAP),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAXMAP>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAXMAP),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct DQGETCFG {
    pub dev: uint8,
    pub ss: uint8,
    pub chan: uint32,
    pub cfg: uint32,
    pub cldiv: uint32,
    pub cvdiv: uint32,
    pub clsize: uint32,
    pub cl: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQGETCFG() {
    assert_eq!(
        ::std::mem::size_of::<DQGETCFG>(),
        22usize,
        concat!("Size of: ", stringify!(DQGETCFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQGETCFG>(),
        1usize,
        concat!("Alignment of ", stringify!(DQGETCFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).chan as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(chan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).cfg as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).cldiv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(cldiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).cvdiv as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(cvdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).clsize as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(clsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG>())).cl as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG),
            "::",
            stringify!(cl)
        )
    );
}
pub type pDQGETCFG = *mut DQGETCFG;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQGETCFG_RQ {
    pub dev: uint8,
    pub ss: uint8,
    pub chan: uint32,
}
#[test]
fn bindgen_test_layout_DQGETCFG_RQ() {
    assert_eq!(
        ::std::mem::size_of::<DQGETCFG_RQ>(),
        6usize,
        concat!("Size of: ", stringify!(DQGETCFG_RQ))
    );
    assert_eq!(
        ::std::mem::align_of::<DQGETCFG_RQ>(),
        1usize,
        concat!("Alignment of ", stringify!(DQGETCFG_RQ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG_RQ>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG_RQ),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG_RQ>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG_RQ),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQGETCFG_RQ>())).chan as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQGETCFG_RQ),
            "::",
            stringify!(chan)
        )
    );
}
pub type pDQGETCFG_RQ = *mut DQGETCFG_RQ;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQWRCHNL {
    pub dev: uint8,
    pub ss: uint8,
    pub chnl: uint8,
    pub data: uint32,
}
#[test]
fn bindgen_test_layout_DQWRCHNL() {
    assert_eq!(
        ::std::mem::size_of::<DQWRCHNL>(),
        7usize,
        concat!("Size of: ", stringify!(DQWRCHNL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWRCHNL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWRCHNL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRCHNL>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRCHNL),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRCHNL>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRCHNL),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRCHNL>())).chnl as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRCHNL),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRCHNL>())).data as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRCHNL),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQWRCHNL = *mut DQWRCHNL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCHNL {
    pub dev: uint8,
    pub ss: uint8,
    pub chnl: uint8,
}
#[test]
fn bindgen_test_layout_DQCHNL() {
    assert_eq!(
        ::std::mem::size_of::<DQCHNL>(),
        3usize,
        concat!("Size of: ", stringify!(DQCHNL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCHNL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCHNL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNL>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNL),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNL>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNL),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNL>())).chnl as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNL),
            "::",
            stringify!(chnl)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQWRCHNL32 {
    pub devch: DQCHNL,
    pub data: uint32,
}
#[test]
fn bindgen_test_layout_DQWRCHNL32() {
    assert_eq!(
        ::std::mem::size_of::<DQWRCHNL32>(),
        7usize,
        concat!("Size of: ", stringify!(DQWRCHNL32))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWRCHNL32>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWRCHNL32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRCHNL32>())).devch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRCHNL32),
            "::",
            stringify!(devch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRCHNL32>())).data as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRCHNL32),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQRDCHNL {
    pub dev: uint8,
    pub ss: uint8,
    pub chnl: uint8,
}
#[test]
fn bindgen_test_layout_DQRDCHNL() {
    assert_eq!(
        ::std::mem::size_of::<DQRDCHNL>(),
        3usize,
        concat!("Size of: ", stringify!(DQRDCHNL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQRDCHNL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQRDCHNL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCHNL>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCHNL),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCHNL>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCHNL),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRDCHNL>())).chnl as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRDCHNL),
            "::",
            stringify!(chnl)
        )
    );
}
pub type pDQRDCHNL = *mut DQRDCHNL;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSETCLK {
    pub dev: uint8,
    pub ss: uint8,
    pub clocksel: uint8,
    pub frq: f32,
}
#[test]
fn bindgen_test_layout_DQSETCLK() {
    assert_eq!(
        ::std::mem::size_of::<DQSETCLK>(),
        7usize,
        concat!("Size of: ", stringify!(DQSETCLK))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETCLK>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETCLK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCLK>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCLK),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCLK>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCLK),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCLK>())).clocksel as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCLK),
            "::",
            stringify!(clocksel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCLK>())).frq as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCLK),
            "::",
            stringify!(frq)
        )
    );
}
pub type pDQSETCLK = *mut DQSETCLK;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSETCL {
    pub dev: uint8,
    pub ss: uint8,
    pub entry: uint32,
}
#[test]
fn bindgen_test_layout_DQSETCL() {
    assert_eq!(
        ::std::mem::size_of::<DQSETCL>(),
        6usize,
        concat!("Size of: ", stringify!(DQSETCL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETCL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETCL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCL>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCL),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCL>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCL),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCL>())).entry as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCL),
            "::",
            stringify!(entry)
        )
    );
}
pub type pDQSETCL = *mut DQSETCL;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSETTRL {
    pub dmapid: uint16,
    pub dev: uint8,
    pub ss: uint8,
    pub ch: uint32,
    pub flags: uint32,
    pub samples: uint16,
}
#[test]
fn bindgen_test_layout_DQSETTRL() {
    assert_eq!(
        ::std::mem::size_of::<DQSETTRL>(),
        14usize,
        concat!("Size of: ", stringify!(DQSETTRL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETTRL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETTRL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRL>())).dmapid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRL),
            "::",
            stringify!(dmapid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRL>())).dev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRL),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRL>())).ss as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRL),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRL>())).ch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRL),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRL>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRL),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRL>())).samples as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRL),
            "::",
            stringify!(samples)
        )
    );
}
pub type pDQSETTRL = *mut DQSETTRL;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSETTRIG {
    pub dev: uint8,
    pub ss: uint8,
    pub ch: uint8,
    pub mode: uint8,
    pub trigtypeS: uint32,
    pub uS: DQSETTRIG__bindgen_ty_1,
    pub trigtypeP: uint32,
    pub uP: DQSETTRIG__bindgen_ty_2,
    pub hyster: f32,
    pub prescans: ::std::os::raw::c_int,
    pub postscans: ::std::os::raw::c_int,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union DQSETTRIG__bindgen_ty_1 {
    pub levelS: f32,
    pub maskS: uint32,
    _bindgen_union_align: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_DQSETTRIG__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<DQSETTRIG__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(DQSETTRIG__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETTRIG__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETTRIG__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG__bindgen_ty_1>())).levelS as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG__bindgen_ty_1),
            "::",
            stringify!(levelS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG__bindgen_ty_1>())).maskS as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG__bindgen_ty_1),
            "::",
            stringify!(maskS)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union DQSETTRIG__bindgen_ty_2 {
    pub levelP: f32,
    pub maskP: uint32,
    _bindgen_union_align: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_DQSETTRIG__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<DQSETTRIG__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(DQSETTRIG__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETTRIG__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETTRIG__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG__bindgen_ty_2>())).levelP as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG__bindgen_ty_2),
            "::",
            stringify!(levelP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG__bindgen_ty_2>())).maskP as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG__bindgen_ty_2),
            "::",
            stringify!(maskP)
        )
    );
}
#[test]
fn bindgen_test_layout_DQSETTRIG() {
    assert_eq!(
        ::std::mem::size_of::<DQSETTRIG>(),
        32usize,
        concat!("Size of: ", stringify!(DQSETTRIG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETTRIG>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETTRIG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).ch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).mode as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).trigtypeS as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(trigtypeS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).uS as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(uS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).trigtypeP as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(trigtypeP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).uP as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(uP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).hyster as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(hyster)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).prescans as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(prescans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETTRIG>())).postscans as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETTRIG),
            "::",
            stringify!(postscans)
        )
    );
}
pub type pDQSETTRIG = *mut DQSETTRIG;
#[repr(C, packed)]
pub struct DQWRRD {
    pub dmapid: uint32,
    pub size: uint32,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQWRRD() {
    assert_eq!(
        ::std::mem::size_of::<DQWRRD>(),
        8usize,
        concat!("Size of: ", stringify!(DQWRRD))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWRRD>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWRRD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD>())).dmapid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD),
            "::",
            stringify!(dmapid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQWRRD = *mut DQWRRD;
#[repr(C, packed)]
pub struct DQWRRD32 {
    pub dev: uint16,
    pub read_1st: uint16,
    pub addr_w: uint16,
    pub size_w: uint16,
    pub addr_r: uint16,
    pub size_r: uint16,
    pub data: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQWRRD32() {
    assert_eq!(
        ::std::mem::size_of::<DQWRRD32>(),
        12usize,
        concat!("Size of: ", stringify!(DQWRRD32))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWRRD32>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWRRD32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD32>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD32),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD32>())).read_1st as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD32),
            "::",
            stringify!(read_1st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD32>())).addr_w as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD32),
            "::",
            stringify!(addr_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD32>())).size_w as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD32),
            "::",
            stringify!(size_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD32>())).addr_r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD32),
            "::",
            stringify!(addr_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD32>())).size_r as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD32),
            "::",
            stringify!(size_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRD32>())).data as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRD32),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQWRRD32 = *mut DQWRRD32;
#[repr(C, packed)]
pub struct DQFIFO {
    pub dev: uint8,
    pub ss: uint8,
    pub size: uint16,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQFIFO() {
    assert_eq!(
        ::std::mem::size_of::<DQFIFO>(),
        4usize,
        concat!("Size of: ", stringify!(DQFIFO))
    );
    assert_eq!(
        ::std::mem::align_of::<DQFIFO>(),
        1usize,
        concat!("Alignment of ", stringify!(DQFIFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQFIFO = *mut DQFIFO;
#[repr(C, packed)]
pub struct DQFIFO32 {
    pub dev: uint8,
    pub ss: uint8,
    pub size: uint16,
    pub data: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQFIFO32() {
    assert_eq!(
        ::std::mem::size_of::<DQFIFO32>(),
        4usize,
        concat!("Size of: ", stringify!(DQFIFO32))
    );
    assert_eq!(
        ::std::mem::align_of::<DQFIFO32>(),
        1usize,
        concat!("Alignment of ", stringify!(DQFIFO32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO32>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO32),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO32>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO32),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO32>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO32),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFIFO32>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFIFO32),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQFIFO32 = *mut DQFIFO32;
#[repr(C, packed)]
pub struct DQWRRDFIFO {
    pub dev: uint8,
    pub sswr: uint8,
    pub ssrd: uint8,
    pub chwr: uint8,
    pub chrd: uint8,
    pub sizewr: uint16,
    pub sizerd: uint16,
    pub avlwr: uint16,
    pub avlrd: uint16,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQWRRDFIFO() {
    assert_eq!(
        ::std::mem::size_of::<DQWRRDFIFO>(),
        13usize,
        concat!("Size of: ", stringify!(DQWRRDFIFO))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWRRDFIFO>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWRRDFIFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).sswr as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(sswr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).ssrd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(ssrd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).chwr as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(chwr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).chrd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(chrd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).sizewr as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(sizewr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).sizerd as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(sizerd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).avlwr as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(avlwr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).avlrd as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(avlrd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWRRDFIFO>())).data as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWRRDFIFO),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQWRRDFIFO = *mut DQWRRDFIFO;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQFLASHDATA {
    pub Sector: uint16,
    pub Address: uint32,
    pub Size: uint32,
}
#[test]
fn bindgen_test_layout_DQFLASHDATA() {
    assert_eq!(
        ::std::mem::size_of::<DQFLASHDATA>(),
        10usize,
        concat!("Size of: ", stringify!(DQFLASHDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQFLASHDATA>(),
        1usize,
        concat!("Alignment of ", stringify!(DQFLASHDATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFLASHDATA>())).Sector as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFLASHDATA),
            "::",
            stringify!(Sector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFLASHDATA>())).Address as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFLASHDATA),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFLASHDATA>())).Size as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFLASHDATA),
            "::",
            stringify!(Size)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQFPGADATA {
    pub BaseAddr: uint32,
    pub Page: uint16,
    pub Size: uint32,
    pub CrcVerification: uint8,
}
#[test]
fn bindgen_test_layout_DQFPGADATA() {
    assert_eq!(
        ::std::mem::size_of::<DQFPGADATA>(),
        11usize,
        concat!("Size of: ", stringify!(DQFPGADATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQFPGADATA>(),
        1usize,
        concat!("Alignment of ", stringify!(DQFPGADATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFPGADATA>())).BaseAddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFPGADATA),
            "::",
            stringify!(BaseAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFPGADATA>())).Page as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFPGADATA),
            "::",
            stringify!(Page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFPGADATA>())).Size as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFPGADATA),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFPGADATA>())).CrcVerification as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFPGADATA),
            "::",
            stringify!(CrcVerification)
        )
    );
}
#[repr(C, packed)]
pub struct DQJTAGDATA {
    pub baseAddr: uint32,
    pub size: uint32,
    pub err: uint32,
    pub config: uint8,
    pub tms_tdi_tck: uint8,
    pub buffer: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQJTAGDATA() {
    assert_eq!(
        ::std::mem::size_of::<DQJTAGDATA>(),
        14usize,
        concat!("Size of: ", stringify!(DQJTAGDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQJTAGDATA>(),
        1usize,
        concat!("Alignment of ", stringify!(DQJTAGDATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQJTAGDATA>())).baseAddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQJTAGDATA),
            "::",
            stringify!(baseAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQJTAGDATA>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQJTAGDATA),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQJTAGDATA>())).err as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQJTAGDATA),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQJTAGDATA>())).config as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQJTAGDATA),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQJTAGDATA>())).tms_tdi_tck as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(DQJTAGDATA),
            "::",
            stringify!(tms_tdi_tck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQJTAGDATA>())).buffer as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(DQJTAGDATA),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCRCINFO {
    pub fwcrc: uint32,
    pub fwver: uint32,
    pub paramcrc: uint32,
    pub initcrc: uint32,
    pub opercrc: uint32,
    pub sdcrc: uint32,
    pub build: uint32,
}
#[test]
fn bindgen_test_layout_DQCRCINFO() {
    assert_eq!(
        ::std::mem::size_of::<DQCRCINFO>(),
        28usize,
        concat!("Size of: ", stringify!(DQCRCINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCRCINFO>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCRCINFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCRCINFO>())).fwcrc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCRCINFO),
            "::",
            stringify!(fwcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCRCINFO>())).fwver as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCRCINFO),
            "::",
            stringify!(fwver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCRCINFO>())).paramcrc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCRCINFO),
            "::",
            stringify!(paramcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCRCINFO>())).initcrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCRCINFO),
            "::",
            stringify!(initcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCRCINFO>())).opercrc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCRCINFO),
            "::",
            stringify!(opercrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCRCINFO>())).sdcrc as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCRCINFO),
            "::",
            stringify!(sdcrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCRCINFO>())).build as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCRCINFO),
            "::",
            stringify!(build)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSETCOMM {
    pub todo: uint8,
    pub MAC: [uint8; 6usize],
    pub netip: uint32,
    pub gateway: uint32,
    pub netmask: uint32,
    pub startup: uint32,
    pub baudrate: uint32,
    pub udpport: uint16,
    pub signature: [uint8; 28usize],
}
#[test]
fn bindgen_test_layout_DQSETCOMM() {
    assert_eq!(
        ::std::mem::size_of::<DQSETCOMM>(),
        57usize,
        concat!("Size of: ", stringify!(DQSETCOMM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETCOMM>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETCOMM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).todo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(todo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).MAC as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(MAC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).netip as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(netip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).gateway as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(gateway)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).netmask as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(netmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).startup as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(startup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).baudrate as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(baudrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).udpport as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(udpport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCOMM>())).signature as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCOMM),
            "::",
            stringify!(signature)
        )
    );
}
pub type pDQSETCOMM = *mut DQSETCOMM;
#[repr(C)]
pub struct DQSETPRM {
    pub dev: uint8,
    pub ss: uint8,
    pub mode: uint8,
    pub value: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQSETPRM() {
    assert_eq!(
        ::std::mem::size_of::<DQSETPRM>(),
        3usize,
        concat!("Size of: ", stringify!(DQSETPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETPRM>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETPRM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETPRM>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETPRM),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETPRM>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETPRM),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETPRM>())).mode as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETPRM),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETPRM>())).value as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETPRM),
            "::",
            stringify!(value)
        )
    );
}
pub type pDQSETPRM = *mut DQSETPRM;
pub type DQGETPRM = DQSETPRM;
pub type pDQGETPRM = *mut DQSETPRM;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSETCAL {
    pub dev: uint8,
    pub ss: uint8,
    pub channel: uint8,
    pub dac: uint8,
    pub value: uint32,
}
#[test]
fn bindgen_test_layout_DQSETCAL() {
    assert_eq!(
        ::std::mem::size_of::<DQSETCAL>(),
        8usize,
        concat!("Size of: ", stringify!(DQSETCAL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSETCAL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSETCAL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCAL>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCAL),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCAL>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCAL),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCAL>())).channel as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCAL),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCAL>())).dac as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCAL),
            "::",
            stringify!(dac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSETCAL>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSETCAL),
            "::",
            stringify!(value)
        )
    );
}
pub type pDQSETCAL = *mut DQSETCAL;
#[repr(C, packed)]
pub struct DQIOCTL {
    pub dev: uint8,
    pub ss: uint8,
    pub cmd: uint32,
    pub arg: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQIOCTL() {
    assert_eq!(
        ::std::mem::size_of::<DQIOCTL>(),
        6usize,
        concat!("Size of: ", stringify!(DQIOCTL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQIOCTL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQIOCTL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQIOCTL>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQIOCTL),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQIOCTL>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQIOCTL),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQIOCTL>())).cmd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQIOCTL),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQIOCTL>())).arg as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQIOCTL),
            "::",
            stringify!(arg)
        )
    );
}
pub type pDQIOCTL = *mut DQIOCTL;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQBURST {
    pub dev: uint8,
    pub ss: uint8,
    pub pre: uint32,
    pub post: uint32,
    pub trigger: uint32,
}
#[test]
fn bindgen_test_layout_DQBURST() {
    assert_eq!(
        ::std::mem::size_of::<DQBURST>(),
        14usize,
        concat!("Size of: ", stringify!(DQBURST))
    );
    assert_eq!(
        ::std::mem::align_of::<DQBURST>(),
        1usize,
        concat!("Alignment of ", stringify!(DQBURST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBURST>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBURST),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBURST>())).ss as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBURST),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBURST>())).pre as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBURST),
            "::",
            stringify!(pre)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBURST>())).post as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBURST),
            "::",
            stringify!(post)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBURST>())).trigger as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBURST),
            "::",
            stringify!(trigger)
        )
    );
}
pub type pDQBURST = *mut DQBURST;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCLRMEM {
    pub devmask: uint32,
    pub cmd: uint32,
    pub mode: uint32,
    pub status: int32,
}
#[test]
fn bindgen_test_layout_DQCLRMEM() {
    assert_eq!(
        ::std::mem::size_of::<DQCLRMEM>(),
        16usize,
        concat!("Size of: ", stringify!(DQCLRMEM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCLRMEM>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCLRMEM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCLRMEM>())).devmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCLRMEM),
            "::",
            stringify!(devmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCLRMEM>())).cmd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCLRMEM),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCLRMEM>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCLRMEM),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCLRMEM>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCLRMEM),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQRBF {
    pub err: uint32,
    pub processed_bytes: uint32,
    pub crc: uint32,
}
#[test]
fn bindgen_test_layout_DQRBF() {
    assert_eq!(
        ::std::mem::size_of::<DQRBF>(),
        12usize,
        concat!("Size of: ", stringify!(DQRBF))
    );
    assert_eq!(
        ::std::mem::align_of::<DQRBF>(),
        1usize,
        concat!("Alignment of ", stringify!(DQRBF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBF>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBF),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBF>())).processed_bytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBF),
            "::",
            stringify!(processed_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBF>())).crc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBF),
            "::",
            stringify!(crc)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQRBFDEV {
    pub status: ::std::os::raw::c_int,
    pub system_type_dnr: uint8,
    pub logic_programmed: [uint8; 16usize],
    pub msp_present: [uint8; 16usize],
    pub layer_model: [uint16; 16usize],
    pub base_addr: [uint16; 16usize],
    pub logic_ver: [uint32; 16usize],
    pub error: [uint32; 16usize],
    pub msp_fw_ver: [uint8; 16usize],
    pub scd_silicon_id: [uint32; 16usize],
}
#[test]
fn bindgen_test_layout_DQRBFDEV() {
    assert_eq!(
        ::std::mem::size_of::<DQRBFDEV>(),
        309usize,
        concat!("Size of: ", stringify!(DQRBFDEV))
    );
    assert_eq!(
        ::std::mem::align_of::<DQRBFDEV>(),
        1usize,
        concat!("Alignment of ", stringify!(DQRBFDEV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).system_type_dnr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(system_type_dnr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).logic_programmed as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(logic_programmed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).msp_present as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(msp_present)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).layer_model as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(layer_model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).base_addr as *const _ as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).logic_ver as *const _ as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(logic_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).error as *const _ as usize },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).msp_fw_ver as *const _ as usize },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(msp_fw_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRBFDEV>())).scd_silicon_id as *const _ as usize },
        245usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRBFDEV),
            "::",
            stringify!(scd_silicon_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_SCHEME {
    pub sync_device: uint32,
    pub sync_source: uint32,
    pub sync_line: uint32,
    pub sync_mode: uint32,
    pub nPPS: uint32,
    pub nPPS_us: uint32,
    pub sync_server: uint32,
    pub srv_param: uint32,
    pub trig_server: uint32,
    pub clock_src: [uint32; 4usize],
    pub clock_tmr: [uint32; 4usize],
    pub clock_frq: [uint32; 4usize],
    pub clock_div: [uint32; 4usize],
    pub trig_source: uint32,
    pub trig_line: uint32,
    pub trig_start: uint32,
    pub trig_delay: uint32,
    pub trig_period_ms: uint32,
    pub trig_stop: uint32,
    pub trig_stop_src: uint32,
    pub trig_duration: uint32,
    pub clclk_dest: [uint32; 4usize],
    pub pps_dest: uint32,
    pub trig_dest: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_SCHEME() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_SCHEME>(),
        156usize,
        concat!("Size of: ", stringify!(DQ_SYNC_SCHEME))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_SCHEME>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_SCHEME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).sync_device as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(sync_device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).sync_source as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(sync_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).sync_line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(sync_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).sync_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(sync_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).nPPS as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(nPPS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).nPPS_us as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(nPPS_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).sync_server as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(sync_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).srv_param as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(srv_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_server as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).clock_src as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(clock_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).clock_tmr as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(clock_tmr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).clock_frq as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(clock_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).clock_div as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(clock_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_source as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_line as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_start as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_delay as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_period_ms as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_period_ms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_stop as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_stop_src as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_stop_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_duration as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).clclk_dest as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(clclk_dest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).pps_dest as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(pps_dest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME>())).trig_dest as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME),
            "::",
            stringify!(trig_dest)
        )
    );
}
pub type pDQ_SYNC_SCHEME = *mut DQ_SYNC_SCHEME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_SCHEME_AUX {
    pub syncpll: SYNCPLL,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_SCHEME_AUX() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_SCHEME_AUX>(),
        16usize,
        concat!("Size of: ", stringify!(DQ_SYNC_SCHEME_AUX))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_SCHEME_AUX>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_SCHEME_AUX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_SCHEME_AUX>())).syncpll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_SCHEME_AUX),
            "::",
            stringify!(syncpll)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_ADPLL_STAT {
    pub status: uint32,
    pub min_per: uint32,
    pub avg_per: uint32,
    pub max_per: uint32,
    pub lst_per: uint32,
    pub acc_err: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_ADPLL_STAT() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_ADPLL_STAT>(),
        24usize,
        concat!("Size of: ", stringify!(DQ_SYNC_ADPLL_STAT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_ADPLL_STAT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_ADPLL_STAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_ADPLL_STAT>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_ADPLL_STAT),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_ADPLL_STAT>())).min_per as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_ADPLL_STAT),
            "::",
            stringify!(min_per)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_ADPLL_STAT>())).avg_per as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_ADPLL_STAT),
            "::",
            stringify!(avg_per)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_ADPLL_STAT>())).max_per as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_ADPLL_STAT),
            "::",
            stringify!(max_per)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_ADPLL_STAT>())).lst_per as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_ADPLL_STAT),
            "::",
            stringify!(lst_per)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_ADPLL_STAT>())).acc_err as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_ADPLL_STAT),
            "::",
            stringify!(acc_err)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_STATUS {
    pub adpll_sts: DQ_SYNC_ADPLL_STAT,
    pub pll_stat: [uint32; 2usize],
    pub pps_status: uint32,
    pub gps_irig: uint32,
    pub evm_stat: uint32,
    pub sync_snap: uint32,
    pub sync_conn: uint32,
    pub reserved: [uint32; 4usize],
    pub time_since_pps: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_STATUS>(),
        72usize,
        concat!("Size of: ", stringify!(DQ_SYNC_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_STATUS>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).adpll_sts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(adpll_sts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).pll_stat as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(pll_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).pps_status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(pps_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).gps_irig as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(gps_irig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).evm_stat as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(evm_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).sync_snap as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(sync_snap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).sync_conn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(sync_conn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).reserved as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_STATUS>())).time_since_pps as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_STATUS),
            "::",
            stringify!(time_since_pps)
        )
    );
}
pub type pDQ_SYNC_STATUS = *mut DQ_SYNC_STATUS;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_DEFNTP {
    pub strata: uint32,
    pub resolution: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_DEFNTP() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_DEFNTP>(),
        8usize,
        concat!("Size of: ", stringify!(DQ_SYNC_DEFNTP))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_DEFNTP>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_DEFNTP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFNTP>())).strata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFNTP),
            "::",
            stringify!(strata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFNTP>())).resolution as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFNTP),
            "::",
            stringify!(resolution)
        )
    );
}
pub type pDQ_SYNC_DEFNTP = *mut DQ_SYNC_DEFNTP;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_DEFPTP {
    pub cfg: uint32,
    pub subdomain: uint8,
    pub priority1: uint8,
    pub priority2: uint8,
    pub logSyncInterval: int8,
    pub logMinDelayRequestInterval: int8,
    pub logAnnounceInterval: int8,
    pub announceTimeout: uint8,
    pub utcOffset: uint8,
    pub reserved: [uint32; 5usize],
    pub static_master_ip: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_DEFPTP() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_DEFPTP>(),
        36usize,
        concat!("Size of: ", stringify!(DQ_SYNC_DEFPTP))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_DEFPTP>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_DEFPTP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).subdomain as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(subdomain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).priority1 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(priority1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).priority2 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(priority2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).logSyncInterval as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(logSyncInterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).logMinDelayRequestInterval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(logMinDelayRequestInterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).logAnnounceInterval as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(logAnnounceInterval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).announceTimeout as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(announceTimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).utcOffset as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(utcOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).reserved as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEFPTP>())).static_master_ip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEFPTP),
            "::",
            stringify!(static_master_ip)
        )
    );
}
pub type pDQ_SYNC_DEFPTP = *mut DQ_SYNC_DEFPTP;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_PTP_STAT {
    pub reserved: uint32,
    pub state: uint32,
    pub grandMasterClockID: uint64,
    pub masterClockID: uint64,
    pub stepsFromGrandMaster: uint32,
    pub grandMasterClockClass: uint32,
    pub reserved0: [uint32; 2usize],
    pub meanPathDelay: int32,
    pub lastMeasuredOffset: int32,
    pub maxMeasuredOffset: int32,
    pub minMeasuredOffset: int32,
    pub avgMeasuredOffset: int32,
    pub reserved1: [uint32; 8usize],
    pub totalPkts: uint32,
    pub announceRcvd: uint32,
    pub announceSnt: uint32,
    pub syncRcvd: uint32,
    pub syncSnt: uint32,
    pub followUpRcvd: uint32,
    pub followUpSnt: uint32,
    pub delyReqRcvd: uint32,
    pub delyReqSnt: uint32,
    pub delyRspRcvd: uint32,
    pub delyRspSnt: uint32,
    pub signalingRcvd: uint32,
    pub signalingSnt: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_PTP_STAT() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_PTP_STAT>(),
        144usize,
        concat!("Size of: ", stringify!(DQ_SYNC_PTP_STAT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_PTP_STAT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_PTP_STAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).reserved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).grandMasterClockID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(grandMasterClockID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).masterClockID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(masterClockID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).stepsFromGrandMaster as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(stepsFromGrandMaster)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).grandMasterClockClass as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(grandMasterClockClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).reserved0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).meanPathDelay as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(meanPathDelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).lastMeasuredOffset as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(lastMeasuredOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).maxMeasuredOffset as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(maxMeasuredOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).minMeasuredOffset as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(minMeasuredOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).avgMeasuredOffset as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(avgMeasuredOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).reserved1 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).totalPkts as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(totalPkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).announceRcvd as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(announceRcvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).announceSnt as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(announceSnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).syncRcvd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(syncRcvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).syncSnt as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(syncSnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).followUpRcvd as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(followUpRcvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).followUpSnt as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(followUpSnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).delyReqRcvd as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(delyReqRcvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).delyReqSnt as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(delyReqSnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).delyRspRcvd as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(delyRspRcvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).delyRspSnt as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(delyRspSnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).signalingRcvd as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(signalingRcvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_PTP_STAT>())).signalingSnt as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_PTP_STAT),
            "::",
            stringify!(signalingSnt)
        )
    );
}
pub type pDQ_SYNC_PTP_STAT = *mut DQ_SYNC_PTP_STAT;
pub const evsync_t_EVSYNC_CLEAR: evsync_t = 4096;
pub const evsync_t_EVSYNC_1PPS: evsync_t = 257;
pub const evsync_t_EVSYNC_ADPLL_LOST: evsync_t = 258;
pub const evsync_t_EVSYNC_NTP_LOST: evsync_t = 259;
pub const evsync_t_EVSYNC_PTP_LOST: evsync_t = 260;
pub const evsync_t_EVSYNC_GLOB_START: evsync_t = 261;
pub const evsync_t_EVSYNC_GLOB_STOP: evsync_t = 262;
pub type evsync_t = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_DEF_CLOCKS {
    pub clk_line: ::std::os::raw::c_int,
    pub divider: ::std::os::raw::c_int,
    pub grp_delay: ::std::os::raw::c_int,
    pub flags: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_DEF_CLOCKS() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_DEF_CLOCKS>(),
        16usize,
        concat!("Size of: ", stringify!(DQ_SYNC_DEF_CLOCKS))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_DEF_CLOCKS>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_DEF_CLOCKS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEF_CLOCKS>())).clk_line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEF_CLOCKS),
            "::",
            stringify!(clk_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEF_CLOCKS>())).divider as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEF_CLOCKS),
            "::",
            stringify!(divider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEF_CLOCKS>())).grp_delay as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEF_CLOCKS),
            "::",
            stringify!(grp_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_DEF_CLOCKS>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_DEF_CLOCKS),
            "::",
            stringify!(flags)
        )
    );
}
pub type pDQ_SYNC_DEF_CLOCKS = *mut DQ_SYNC_DEF_CLOCKS;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_SYNC_UTC_TIME {
    pub reserved: uint32,
    pub sec: uint32,
    pub nsec: uint32,
    pub timestamp: uint32,
    pub flags: uint32,
}
#[test]
fn bindgen_test_layout_DQ_SYNC_UTC_TIME() {
    assert_eq!(
        ::std::mem::size_of::<DQ_SYNC_UTC_TIME>(),
        20usize,
        concat!("Size of: ", stringify!(DQ_SYNC_UTC_TIME))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_SYNC_UTC_TIME>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_SYNC_UTC_TIME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_UTC_TIME>())).reserved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_UTC_TIME),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_UTC_TIME>())).sec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_UTC_TIME),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_UTC_TIME>())).nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_UTC_TIME),
            "::",
            stringify!(nsec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_UTC_TIME>())).timestamp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_UTC_TIME),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_SYNC_UTC_TIME>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_SYNC_UTC_TIME),
            "::",
            stringify!(flags)
        )
    );
}
pub type pDQ_SYNC_UTC_TIME = *mut DQ_SYNC_UTC_TIME;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQEECMNDEVS {
    pub model: uint16,
    pub option: uint16,
    pub total: uint16,
    pub sernum: uint32,
    pub mfgdate: uint32,
    pub caldate: uint32,
    pub calexpd: uint32,
}
#[test]
fn bindgen_test_layout_DQEECMNDEVS() {
    assert_eq!(
        ::std::mem::size_of::<DQEECMNDEVS>(),
        22usize,
        concat!("Size of: ", stringify!(DQEECMNDEVS))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEECMNDEVS>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEECMNDEVS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEECMNDEVS>())).model as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEECMNDEVS),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEECMNDEVS>())).option as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEECMNDEVS),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEECMNDEVS>())).total as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEECMNDEVS),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEECMNDEVS>())).sernum as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEECMNDEVS),
            "::",
            stringify!(sernum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEECMNDEVS>())).mfgdate as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEECMNDEVS),
            "::",
            stringify!(mfgdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEECMNDEVS>())).caldate as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEECMNDEVS),
            "::",
            stringify!(caldate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEECMNDEVS>())).calexpd as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEECMNDEVS),
            "::",
            stringify!(calexpd)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQEEPROMTAIL {
    pub ee_ver: uint16,
    pub crc: uint32,
}
#[test]
fn bindgen_test_layout_DQEEPROMTAIL() {
    assert_eq!(
        ::std::mem::size_of::<DQEEPROMTAIL>(),
        6usize,
        concat!("Size of: ", stringify!(DQEEPROMTAIL))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEEPROMTAIL>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEEPROMTAIL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEEPROMTAIL>())).ee_ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEEPROMTAIL),
            "::",
            stringify!(ee_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEEPROMTAIL>())).crc as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEEPROMTAIL),
            "::",
            stringify!(crc)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQPRMFLAGS {
    pub flag_ver: uint32,
    pub dcard_sn: uint32,
    pub card_info: uint32,
    pub val: [uint32; 62usize],
}
#[test]
fn bindgen_test_layout_DQPRMFLAGS() {
    assert_eq!(
        ::std::mem::size_of::<DQPRMFLAGS>(),
        260usize,
        concat!("Size of: ", stringify!(DQPRMFLAGS))
    );
    assert_eq!(
        ::std::mem::align_of::<DQPRMFLAGS>(),
        1usize,
        concat!("Alignment of ", stringify!(DQPRMFLAGS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGS>())).flag_ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGS),
            "::",
            stringify!(flag_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGS>())).dcard_sn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGS),
            "::",
            stringify!(dcard_sn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGS>())).card_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGS),
            "::",
            stringify!(card_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGS>())).val as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGS),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQPRMFLAGSA {
    pub flag_ver: uint32,
    pub dcard_sn: uint32,
    pub card_info: uint32,
}
#[test]
fn bindgen_test_layout_DQPRMFLAGSA() {
    assert_eq!(
        ::std::mem::size_of::<DQPRMFLAGSA>(),
        12usize,
        concat!("Size of: ", stringify!(DQPRMFLAGSA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQPRMFLAGSA>(),
        1usize,
        concat!("Alignment of ", stringify!(DQPRMFLAGSA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGSA>())).flag_ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGSA),
            "::",
            stringify!(flag_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGSA>())).dcard_sn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGSA),
            "::",
            stringify!(dcard_sn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGSA>())).card_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGSA),
            "::",
            stringify!(card_info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_104 {
    pub cname: [[::std::os::raw::c_char; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_104() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_104>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_104))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_104>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_104))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_104>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_104),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_104 {
    pub cal: [uint8; 2usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_104() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_104>(),
        2usize,
        concat!("Size of: ", stringify!(DQCALSET_104))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_104>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_104))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_104>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_104),
            "::",
            stringify!(cal)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_104 {
    pub chlst: [uint32; 4usize],
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_104() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_104>(),
        20usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_104))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_104>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_104))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_104>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_104),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_104>())).clperint as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_104),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_105 {
    pub cname: [[::std::os::raw::c_char; 32usize]; 1usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_105() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_105>(),
        32usize,
        concat!("Size of: ", stringify!(DQCNAMES_105))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_105>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_105))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_105>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_105),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_105 {
    pub cal: [uint8; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_105() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_105>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_105))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_105>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_105))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_105>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_105),
            "::",
            stringify!(cal)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_105 {
    pub chlst: [uint32; 2usize],
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_105() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_105>(),
        12usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_105))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_105>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_105))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_105>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_105),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_105>())).clperint as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_105),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_105 {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_105() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_105>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_105))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_105>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_105))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_105>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_105),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_105 {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_105() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_105>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_105))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_105>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_105))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_105>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_105),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_2000_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 16usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_2000_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_2000_>(),
        320usize,
        concat!("Size of: ", stringify!(DQCNAMES_2000_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_2000_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_2000_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_2000_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_2000_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_2000_ {
    pub level: [uint32; 16usize],
    pub gain: [uint32; 16usize],
    pub offset: [uint32; 16usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_2000_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_2000_>(),
        192usize,
        concat!("Size of: ", stringify!(DQCALSET_2000_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_2000_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_2000_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_2000_>())).level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_2000_),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_2000_>())).gain as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_2000_),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_2000_>())).offset as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_2000_),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_2000_ {
    pub ovr_lim: [uint32; 16usize],
    pub undr_lim: [uint32; 16usize],
    pub fan_on: uint32,
    pub fan_off: uint32,
    pub led_state: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_2000_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_2000_>(),
        140usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_2000_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_2000_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_2000_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_2000_>())).ovr_lim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_2000_),
            "::",
            stringify!(ovr_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_2000_>())).undr_lim as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_2000_),
            "::",
            stringify!(undr_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_2000_>())).fan_on as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_2000_),
            "::",
            stringify!(fan_on)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_2000_>())).fan_off as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_2000_),
            "::",
            stringify!(fan_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_2000_>())).led_state as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_2000_),
            "::",
            stringify!(led_state)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_2000_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_2000_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_2000_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_2000_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_2000_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_2000_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_2000_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_2000_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_2000_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_2000_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_2000_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_2000_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_2000_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_2000_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_2000_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_2000_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_201_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 24usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_201_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_201_>(),
        480usize,
        concat!("Size of: ", stringify!(DQCNAMES_201_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_201_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_201_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_201_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_201_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_201_ {
    pub cal: [uint8; 4usize],
    pub precref: [uint16; 2usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_201_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_201_>(),
        8usize,
        concat!("Size of: ", stringify!(DQCALSET_201_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_201_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_201_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_201_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_201_),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_201_>())).precref as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_201_),
            "::",
            stringify!(precref)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_201_ {
    pub chlst: [uint32; 48usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_201_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_201_>(),
        212usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_201_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_201_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_201_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_201_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_201_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_201_>())).conf as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_201_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_201_>())).cvclk as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_201_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_201_>())).clclk as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_201_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_201_>())).trig as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_201_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_201_>())).clperint as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_201_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_204_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 31usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_204_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_204_>(),
        496usize,
        concat!("Size of: ", stringify!(DQCNAMES_204_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_204_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_204_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_204_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_204_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_204_ {
    pub gain: [[int32; 4usize]; 28usize],
    pub offs: [[int32; 4usize]; 28usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_204_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_204_>(),
        896usize,
        concat!("Size of: ", stringify!(DQCALSET_204_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_204_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_204_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_204_>())).gain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_204_),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_204_>())).offs as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_204_),
            "::",
            stringify!(offs)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_204_ {
    pub chlst: [uint32; 31usize],
    pub conf: uint32,
    pub spd: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_204_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_204_>(),
        148usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_204_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_204_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_204_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_204_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_204_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_204_>())).conf as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_204_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_204_>())).spd as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_204_),
            "::",
            stringify!(spd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_204_>())).cvclk as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_204_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_204_>())).clclk as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_204_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_204_>())).trig as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_204_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_204_>())).clperint as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_204_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_204_ {
    pub res: uint32,
    pub cfg: uint32,
    pub limit: [uint32; 24usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_204_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_204_>(),
        104usize,
        concat!("Size of: ", stringify!(DQINITPRM_204_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_204_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_204_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_204_>())).res as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_204_),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_204_>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_204_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_204_>())).limit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_204_),
            "::",
            stringify!(limit)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_205_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_205_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_205_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_205_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_205_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_205_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_205_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_205_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_205_ {
    pub cal: [uint8; 8usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_205_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_205_>(),
        8usize,
        concat!("Size of: ", stringify!(DQCALSET_205_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_205_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_205_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_205_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_205_),
            "::",
            stringify!(cal)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_205_ {
    pub chlst: [uint32; 8usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub firtaps: [[uint8; 3usize]; 4usize],
    pub firdecr: [[uint8; 3usize]; 4usize],
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_205_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_205_>(),
        76usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_205_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_205_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_205_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).conf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).cvclk as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).clclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).trig as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).firtaps as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(firtaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).firdecr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(firdecr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_205_>())).clperint as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_205_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_208_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_208_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_208_>(),
        160usize,
        concat!("Size of: ", stringify!(DQCNAMES_208_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_208_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_208_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_208_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_208_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_207_ {
    pub cname: [[::std::os::raw::c_char; 14usize]; 32usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_207_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_207_>(),
        448usize,
        concat!("Size of: ", stringify!(DQCNAMES_207_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_207_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_207_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_207_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_207_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_248_ {
    pub cname: [[::std::os::raw::c_char; 14usize]; 24usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_248_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_248_>(),
        336usize,
        concat!("Size of: ", stringify!(DQCNAMES_248_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_248_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_248_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_248_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_248_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_208_ {
    pub cal: [uint8; 4usize],
    pub offs_gain: [uint32; 12usize],
    pub gain_gain: [uint32; 12usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_208_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_208_>(),
        100usize,
        concat!("Size of: ", stringify!(DQCALSET_208_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_208_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_208_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_208_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_208_),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_208_>())).offs_gain as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_208_),
            "::",
            stringify!(offs_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_208_>())).gain_gain as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_208_),
            "::",
            stringify!(gain_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_248_ {
    pub offs: [uint32; 4usize],
    pub gain: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_248_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_248_>(),
        32usize,
        concat!("Size of: ", stringify!(DQCALSET_248_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_248_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_248_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_248_>())).offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_248_),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_248_>())).gain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_248_),
            "::",
            stringify!(gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_208_ {
    pub chlst: [uint32; 16usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_208_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_208_>(),
        84usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_208_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_208_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_208_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_208_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_208_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_208_>())).conf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_208_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_208_>())).cvclk as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_208_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_208_>())).clclk as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_208_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_208_>())).trig as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_208_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_208_>())).clperint as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_208_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_248_ {
    pub chlst: [uint32; 26usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_248_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_248_>(),
        124usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_248_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_248_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_248_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_248_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_248_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_248_>())).conf as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_248_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_248_>())).cvclk as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_248_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_248_>())).clclk as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_248_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_248_>())).trig as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_248_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_248_>())).clperint as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_248_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_248_ {
    pub dio_init: uint16,
    pub dio_state: uint16,
}
#[test]
fn bindgen_test_layout_DQINITPRM_248_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_248_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_248_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_248_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_248_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_248_>())).dio_init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_248_),
            "::",
            stringify!(dio_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_248_>())).dio_state as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_248_),
            "::",
            stringify!(dio_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCFGCH_211 {
    pub channels: uint16,
    pub mask: uint16,
    pub biasdrive: uint16,
    pub biasonoff: uint16,
    pub comphi: uint16,
    pub complo: uint16,
    pub alarmctrl: uint16,
    pub hpf: uint16,
    pub offset: uint16,
    pub anafilt: uint16,
    pub main_enb: uint16,
    pub sec_enbs: uint16,
    pub secn: uint16,
}
#[test]
fn bindgen_test_layout_DQCFGCH_211() {
    assert_eq!(
        ::std::mem::size_of::<DQCFGCH_211>(),
        26usize,
        concat!("Size of: ", stringify!(DQCFGCH_211))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCFGCH_211>(),
        2usize,
        concat!("Alignment of ", stringify!(DQCFGCH_211))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).channels as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).mask as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).biasdrive as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(biasdrive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).biasonoff as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(biasonoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).comphi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(comphi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).complo as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(complo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).alarmctrl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(alarmctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).hpf as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(hpf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).anafilt as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(anafilt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).main_enb as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(main_enb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).sec_enbs as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(sec_enbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGCH_211>())).secn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGCH_211),
            "::",
            stringify!(secn)
        )
    );
}
pub type pDQCFGCH_211 = *mut DQCFGCH_211;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCFGLAYER_211 {
    pub mask: uint16,
    pub clksrc: uint16,
    pub clkdiv: uint16,
    pub fmtr: uint16,
    pub avg_factor: uint16,
    pub dec_factor: uint16,
}
#[test]
fn bindgen_test_layout_DQCFGLAYER_211() {
    assert_eq!(
        ::std::mem::size_of::<DQCFGLAYER_211>(),
        12usize,
        concat!("Size of: ", stringify!(DQCFGLAYER_211))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCFGLAYER_211>(),
        2usize,
        concat!("Alignment of ", stringify!(DQCFGLAYER_211))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGLAYER_211>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGLAYER_211),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGLAYER_211>())).clksrc as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGLAYER_211),
            "::",
            stringify!(clksrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGLAYER_211>())).clkdiv as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGLAYER_211),
            "::",
            stringify!(clkdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGLAYER_211>())).fmtr as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGLAYER_211),
            "::",
            stringify!(fmtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGLAYER_211>())).avg_factor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGLAYER_211),
            "::",
            stringify!(avg_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCFGLAYER_211>())).dec_factor as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCFGLAYER_211),
            "::",
            stringify!(dec_factor)
        )
    );
}
pub type pDQCFGLAYER_211 = *mut DQCFGLAYER_211;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_211_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_211_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_211_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_211_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_211_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_211_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_211_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_211_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CAL_DAC_SET_211 {
    pub cal_dac: [[uint8; 8usize]; 4usize],
}
#[test]
fn bindgen_test_layout_CAL_DAC_SET_211() {
    assert_eq!(
        ::std::mem::size_of::<CAL_DAC_SET_211>(),
        32usize,
        concat!("Size of: ", stringify!(CAL_DAC_SET_211))
    );
    assert_eq!(
        ::std::mem::align_of::<CAL_DAC_SET_211>(),
        1usize,
        concat!("Alignment of ", stringify!(CAL_DAC_SET_211))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_211>())).cal_dac as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_211),
            "::",
            stringify!(cal_dac)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_211_ {
    pub conf: [CAL_DAC_SET_211; 8usize],
    pub i_drive_8ma: [uint8; 4usize],
    pub i_drive_1ma: [uint8; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_211_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_211_>(),
        264usize,
        concat!("Size of: ", stringify!(DQCALSET_211_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_211_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_211_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_211_>())).conf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_211_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_211_>())).i_drive_8ma as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_211_),
            "::",
            stringify!(i_drive_8ma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_211_>())).i_drive_1ma as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_211_),
            "::",
            stringify!(i_drive_1ma)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CAL_DAC_SET_EXT_211 {
    pub factor: [[uint32; 8usize]; 4usize],
}
#[test]
fn bindgen_test_layout_CAL_DAC_SET_EXT_211() {
    assert_eq!(
        ::std::mem::size_of::<CAL_DAC_SET_EXT_211>(),
        128usize,
        concat!("Size of: ", stringify!(CAL_DAC_SET_EXT_211))
    );
    assert_eq!(
        ::std::mem::align_of::<CAL_DAC_SET_EXT_211>(),
        1usize,
        concat!("Alignment of ", stringify!(CAL_DAC_SET_EXT_211))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_EXT_211>())).factor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_EXT_211),
            "::",
            stringify!(factor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_EXT_AFON_211_ {
    pub conf: [CAL_DAC_SET_EXT_211; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_EXT_AFON_211_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_EXT_AFON_211_>(),
        512usize,
        concat!("Size of: ", stringify!(DQCALSET_EXT_AFON_211_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_EXT_AFON_211_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_EXT_AFON_211_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_EXT_AFON_211_>())).conf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_EXT_AFON_211_),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_EXT_AFOFF_211_ {
    pub conf: [CAL_DAC_SET_EXT_211; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_EXT_AFOFF_211_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_EXT_AFOFF_211_>(),
        512usize,
        concat!("Size of: ", stringify!(DQCALSET_EXT_AFOFF_211_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_EXT_AFOFF_211_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_EXT_AFOFF_211_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_EXT_AFOFF_211_>())).conf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_EXT_AFOFF_211_),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_211_ {
    pub chlst: [uint32; 8usize],
    pub clperint: ::std::os::raw::c_int,
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clkcfg: uint32,
    pub clkdiv: uint32,
    pub cfgamg: [uint32; 4usize],
    pub cfgdpn: [uint32; 4usize],
    pub cfgbias: [uint32; 4usize],
    pub cfgcomp: [uint32; 4usize],
    pub firtaps: [uint16; 4usize],
    pub firdecr: [uint16; 4usize],
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_211_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_211_>(),
        140usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_211_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_211_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_211_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).clperint as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).conf as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).cvclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).clclk as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).trig as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).clkcfg as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(clkcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).clkdiv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(clkdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).cfgamg as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(cfgamg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).cfgdpn as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(cfgdpn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).cfgbias as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(cfgbias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).cfgcomp as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(cfgcomp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).firtaps as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(firtaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_211_>())).firdecr as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_211_),
            "::",
            stringify!(firdecr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_212_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 12usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_212_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_212_>(),
        192usize,
        concat!("Size of: ", stringify!(DQCNAMES_212_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_212_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_212_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_212_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_212_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CAL_DAC_SET_212 {
    pub c_offs: [uint32; 7usize],
    pub c_gain: [uint32; 7usize],
}
#[test]
fn bindgen_test_layout_CAL_DAC_SET_212() {
    assert_eq!(
        ::std::mem::size_of::<CAL_DAC_SET_212>(),
        56usize,
        concat!("Size of: ", stringify!(CAL_DAC_SET_212))
    );
    assert_eq!(
        ::std::mem::align_of::<CAL_DAC_SET_212>(),
        1usize,
        concat!("Alignment of ", stringify!(CAL_DAC_SET_212))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_212>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_212),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_212>())).c_gain as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_212),
            "::",
            stringify!(c_gain)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CALVAL_222 {
    pub calval: [uint8; 3usize],
}
#[test]
fn bindgen_test_layout_CALVAL_222() {
    assert_eq!(
        ::std::mem::size_of::<CALVAL_222>(),
        3usize,
        concat!("Size of: ", stringify!(CALVAL_222))
    );
    assert_eq!(
        ::std::mem::align_of::<CALVAL_222>(),
        1usize,
        concat!("Alignment of ", stringify!(CALVAL_222))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CALVAL_222>())).calval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CALVAL_222),
            "::",
            stringify!(calval)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ222DATA2 {
    pub measured_exc_3: [f64; 12usize],
    pub measured_exc_4: [f64; 12usize],
    pub measured_exc_2: [f64; 12usize],
}
#[test]
fn bindgen_test_layout_DQ222DATA2() {
    assert_eq!(
        ::std::mem::size_of::<DQ222DATA2>(),
        288usize,
        concat!("Size of: ", stringify!(DQ222DATA2))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ222DATA2>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ222DATA2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ222DATA2>())).measured_exc_3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ222DATA2),
            "::",
            stringify!(measured_exc_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ222DATA2>())).measured_exc_4 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ222DATA2),
            "::",
            stringify!(measured_exc_4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ222DATA2>())).measured_exc_2 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ222DATA2),
            "::",
            stringify!(measured_exc_2)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CAL_DAC_SET_222 {
    pub c_offs1: [uint16; 4usize],
    pub c_offs2: [uint16; 4usize],
    pub c_gain1: [CALVAL_222; 4usize],
    pub c_gain2: [CALVAL_222; 4usize],
}
#[test]
fn bindgen_test_layout_CAL_DAC_SET_222() {
    assert_eq!(
        ::std::mem::size_of::<CAL_DAC_SET_222>(),
        40usize,
        concat!("Size of: ", stringify!(CAL_DAC_SET_222))
    );
    assert_eq!(
        ::std::mem::align_of::<CAL_DAC_SET_222>(),
        1usize,
        concat!("Alignment of ", stringify!(CAL_DAC_SET_222))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_222>())).c_offs1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_222),
            "::",
            stringify!(c_offs1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_222>())).c_offs2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_222),
            "::",
            stringify!(c_offs2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_222>())).c_gain1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_222),
            "::",
            stringify!(c_gain1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_222>())).c_gain2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_222),
            "::",
            stringify!(c_gain2)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_212_ {
    pub conf: [CAL_DAC_SET_212; 12usize],
    pub confr: [CAL_DAC_SET_212; 12usize],
    pub res1: [uint16; 5usize],
    pub res2: [int16; 5usize],
    pub iexc: [[CALVAL_222; 8usize]; 12usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_212_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_212_>(),
        1652usize,
        concat!("Size of: ", stringify!(DQCALSET_212_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_212_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_212_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_>())).conf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_>())).confr as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_),
            "::",
            stringify!(confr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_>())).res1 as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_),
            "::",
            stringify!(res1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_>())).res2 as *const _ as usize },
        1354usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_),
            "::",
            stringify!(res2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_>())).iexc as *const _ as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_),
            "::",
            stringify!(iexc)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_222_ {
    pub conf_3: [CAL_DAC_SET_222; 12usize],
    pub conf_4: [CAL_DAC_SET_222; 12usize],
    pub res1: [uint16; 5usize],
    pub res2: [int16; 5usize],
    pub iexc_3: [CALVAL_222; 12usize],
    pub iexc_4: [CALVAL_222; 12usize],
    pub iexc_2: [CALVAL_222; 12usize],
    pub conf_2: [CAL_DAC_SET_222; 12usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_222_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_222_>(),
        1568usize,
        concat!("Size of: ", stringify!(DQCALSET_222_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_222_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_222_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).conf_3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(conf_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).conf_4 as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(conf_4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).res1 as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(res1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).res2 as *const _ as usize },
        970usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(res2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).iexc_3 as *const _ as usize },
        980usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(iexc_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).iexc_4 as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(iexc_4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).iexc_2 as *const _ as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(iexc_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_222_>())).conf_2 as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_222_),
            "::",
            stringify!(conf_2)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_212_X {
    pub conf0_5: [CAL_DAC_SET_212; 6usize],
    pub conf6_11: [CAL_DAC_SET_212; 6usize],
    pub confr0_5: [CAL_DAC_SET_212; 6usize],
    pub confr6_11: [CAL_DAC_SET_212; 6usize],
    pub res1: [uint16; 5usize],
    pub res2: [int16; 5usize],
    pub iexc: [[CALVAL_222; 8usize]; 12usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_212_X() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_212_X>(),
        1652usize,
        concat!("Size of: ", stringify!(DQCALSET_212_X))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_212_X>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_212_X))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_X>())).conf0_5 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_X),
            "::",
            stringify!(conf0_5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_X>())).conf6_11 as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_X),
            "::",
            stringify!(conf6_11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_X>())).confr0_5 as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_X),
            "::",
            stringify!(confr0_5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_X>())).confr6_11 as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_X),
            "::",
            stringify!(confr6_11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_X>())).res1 as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_X),
            "::",
            stringify!(res1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_X>())).res2 as *const _ as usize },
        1354usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_X),
            "::",
            stringify!(res2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_212_X>())).iexc as *const _ as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_212_X),
            "::",
            stringify!(iexc)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_212_ {
    pub resv3: [uint32; 5usize],
    pub chlst: [uint32; 24usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
    pub movavg: uint32,
    pub resv2: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_212_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_212_>(),
        144usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_212_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_212_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_212_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).resv3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(resv3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).chlst as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).conf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).cvclk as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).clclk as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).trig as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).clperint as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).movavg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(movavg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_212_>())).resv2 as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_212_),
            "::",
            stringify!(resv2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_217_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 17usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_217_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_217_>(),
        544usize,
        concat!("Size of: ", stringify!(DQCNAMES_217_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_217_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_217_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_217_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_217_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CAL_DAC_SET_217 {
    pub c_offs: [uint32; 7usize],
    pub c_gain: [uint32; 7usize],
}
#[test]
fn bindgen_test_layout_CAL_DAC_SET_217() {
    assert_eq!(
        ::std::mem::size_of::<CAL_DAC_SET_217>(),
        56usize,
        concat!("Size of: ", stringify!(CAL_DAC_SET_217))
    );
    assert_eq!(
        ::std::mem::align_of::<CAL_DAC_SET_217>(),
        1usize,
        concat!("Alignment of ", stringify!(CAL_DAC_SET_217))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_217>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_217),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAL_DAC_SET_217>())).c_gain as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAL_DAC_SET_217),
            "::",
            stringify!(c_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_217_ {
    pub conf: [CAL_DAC_SET_217; 16usize],
    pub cjc_offs: uint32,
    pub cjc_gain: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_217_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_217_>(),
        904usize,
        concat!("Size of: ", stringify!(DQCALSET_217_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_217_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_217_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_217_>())).conf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_217_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_217_>())).cjc_offs as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_217_),
            "::",
            stringify!(cjc_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_217_>())).cjc_gain as *const _ as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_217_),
            "::",
            stringify!(cjc_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_217_X {
    pub conf0_7: [CAL_DAC_SET_217; 8usize],
    pub conf8_15: [CAL_DAC_SET_217; 8usize],
    pub cjc_offs: uint32,
    pub cjc_gain: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_217_X() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_217_X>(),
        904usize,
        concat!("Size of: ", stringify!(DQCALSET_217_X))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_217_X>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_217_X))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_217_X>())).conf0_7 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_217_X),
            "::",
            stringify!(conf0_7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_217_X>())).conf8_15 as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_217_X),
            "::",
            stringify!(conf8_15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_217_X>())).cjc_offs as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_217_X),
            "::",
            stringify!(cjc_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_217_X>())).cjc_gain as *const _ as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_217_X),
            "::",
            stringify!(cjc_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_217_ {
    pub chlst: [uint32; 18usize],
    pub clperint: ::std::os::raw::c_int,
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clkcfg: uint32,
    pub firdecr: [uint32; 4usize],
    pub firfcfg: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_217_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_217_>(),
        128usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_217_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_217_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_217_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).clperint as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).conf as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).cvclk as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).clclk as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).trig as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).clkcfg as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(clkcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).firdecr as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(firdecr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_217_>())).firfcfg as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_217_),
            "::",
            stringify!(firfcfg)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_218_ {
    pub diocfg10: [uint32; 8usize],
    pub diostate10: [uint32; 8usize],
    pub pgapen: uint32,
    pub pgarate: uint32,
    pub adctype: uint32,
    pub reserved: [uint32; 8usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_218_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_218_>(),
        108usize,
        concat!("Size of: ", stringify!(DQINITPRM_218_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_218_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_218_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_218_>())).diocfg10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_218_),
            "::",
            stringify!(diocfg10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_218_>())).diostate10 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_218_),
            "::",
            stringify!(diostate10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_218_>())).pgapen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_218_),
            "::",
            stringify!(pgapen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_218_>())).pgarate as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_218_),
            "::",
            stringify!(pgarate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_218_>())).adctype as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_218_),
            "::",
            stringify!(adctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_218_>())).reserved as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_218_),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_224_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_224_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_224_>(),
        80usize,
        concat!("Size of: ", stringify!(DQCNAMES_224_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_224_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_224_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_224_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_224_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_224_ {
    pub adc_gain: [[uint32; 10usize]; 4usize],
    pub adc_offs: [[uint32; 10usize]; 4usize],
    pub adc_null_gain: [[uint32; 10usize]; 4usize],
    pub adc_null_offs: [[uint32; 10usize]; 4usize],
    pub dac_gain: [[uint16; 4usize]; 4usize],
    pub dac_offs: [[uint16; 4usize]; 4usize],
    pub dac_c_gain: [[uint16; 10usize]; 4usize],
    pub dac_c_offs: [[uint16; 10usize]; 4usize],
    pub multiplier: [int32; 4usize],
    pub shift: [uint16; 4usize],
    pub dcalg: [[int8; 4usize]; 4usize],
    pub dcalo: [[int8; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_224_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_224_>(),
        920usize,
        concat!("Size of: ", stringify!(DQCALSET_224_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_224_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_224_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).adc_gain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(adc_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).adc_offs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(adc_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).adc_null_gain as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(adc_null_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).adc_null_offs as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(adc_null_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).dac_gain as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(dac_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).dac_offs as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(dac_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).dac_c_gain as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(dac_c_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).dac_c_offs as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(dac_c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).multiplier as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(multiplier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).shift as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).dcalg as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(dcalg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_224_>())).dcalo as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_224_),
            "::",
            stringify!(dcalo)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_224_ {
    pub chlst: [uint32; 8usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
    pub firtaps: [uint16; 4usize],
    pub firdecr: [uint8; 4usize],
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_224_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_224_>(),
        64usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_224_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_224_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_224_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).conf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).cvclk as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).clclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).trig as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).clperint as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).firtaps as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(firtaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_224_>())).firdecr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_224_),
            "::",
            stringify!(firdecr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQAI225CALDATA {
    pub cvolt: int32,
    pub cval: [int32; 26usize],
    pub coffs: [int32; 26usize],
    pub gain: [f64; 26usize],
}
#[test]
fn bindgen_test_layout_DQAI225CALDATA() {
    assert_eq!(
        ::std::mem::size_of::<DQAI225CALDATA>(),
        424usize,
        concat!("Size of: ", stringify!(DQAI225CALDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAI225CALDATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQAI225CALDATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI225CALDATA>())).cvolt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI225CALDATA),
            "::",
            stringify!(cvolt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI225CALDATA>())).cval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI225CALDATA),
            "::",
            stringify!(cval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI225CALDATA>())).coffs as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI225CALDATA),
            "::",
            stringify!(coffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI225CALDATA>())).gain as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI225CALDATA),
            "::",
            stringify!(gain)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_225_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 26usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_225_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_225_>(),
        416usize,
        concat!("Size of: ", stringify!(DQCNAMES_225_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_225_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_225_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_225_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_225_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_225_ {
    pub cvolt: int32,
    pub cval: [int32; 26usize],
    pub offs: [int32; 26usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_225_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_225_>(),
        212usize,
        concat!("Size of: ", stringify!(DQCALSET_225_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_225_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_225_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_225_>())).cvolt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_225_),
            "::",
            stringify!(cvolt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_225_>())).cval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_225_),
            "::",
            stringify!(cval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_225_>())).offs as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_225_),
            "::",
            stringify!(offs)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_225_ {
    pub chlst: [uint32; 26usize],
    pub conf: uint32,
    pub spd: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_225_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_225_>(),
        120usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_225_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_225_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_225_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_225_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_225_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_225_>())).conf as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_225_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_225_>())).spd as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_225_),
            "::",
            stringify!(spd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_225_>())).trig as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_225_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_225_>())).clperint as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_225_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ254SetExt {
    pub PositionAvg: uint32,
    pub MinMaxAvg: uint32,
    pub ZeroCrossing: uint32,
    pub ZeroLevel: uint32,
}
#[test]
fn bindgen_test_layout_DQ254SetExt() {
    assert_eq!(
        ::std::mem::size_of::<DQ254SetExt>(),
        16usize,
        concat!("Size of: ", stringify!(DQ254SetExt))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ254SetExt>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ254SetExt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ254SetExt>())).PositionAvg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ254SetExt),
            "::",
            stringify!(PositionAvg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ254SetExt>())).MinMaxAvg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ254SetExt),
            "::",
            stringify!(MinMaxAvg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ254SetExt>())).ZeroCrossing as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ254SetExt),
            "::",
            stringify!(ZeroCrossing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ254SetExt>())).ZeroLevel as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ254SetExt),
            "::",
            stringify!(ZeroLevel)
        )
    );
}
pub type pDQ254SetExt = *mut DQ254SetExt;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_254_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_254_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_254_>(),
        80usize,
        concat!("Size of: ", stringify!(DQCNAMES_254_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_254_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_254_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_254_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_254_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALCHAN_254_ {
    pub u_gain: [uint32; 4usize],
    pub u_offs: [uint32; 4usize],
    pub voff_i_a: [uint16; 4usize],
    pub gain_i_a: [uint16; 4usize],
    pub voff_i_b: [uint16; 4usize],
    pub gain_i_b: [uint16; 4usize],
    pub voff_o_a: [uint16; 4usize],
    pub gain_o_a: [uint16; 4usize],
    pub voff_o_b: [uint16; 4usize],
    pub gain_o_b: [uint16; 4usize],
    pub voff_o_c: [uint16; 4usize],
    pub gain_o_c: [uint16; 4usize],
    pub voff_o_d: [uint16; 4usize],
    pub gain_o_d: [uint16; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALCHAN_254_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALCHAN_254_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCALCHAN_254_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALCHAN_254_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALCHAN_254_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).u_gain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(u_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).u_offs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(u_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).voff_i_a as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(voff_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).gain_i_a as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(gain_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).voff_i_b as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(voff_i_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).gain_i_b as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(gain_i_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).voff_o_a as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(voff_o_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).gain_o_a as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(gain_o_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).voff_o_b as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(voff_o_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).gain_o_b as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(gain_o_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).voff_o_c as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(voff_o_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).gain_o_c as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(gain_o_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).voff_o_d as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(voff_o_d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_254_>())).gain_o_d as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_254_),
            "::",
            stringify!(gain_o_d)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_254_ {
    pub cal: DQCALCHAN_254_,
    pub voff_i_a: [[uint16; 4usize]; 4usize],
    pub gain_i_a: [[uint16; 4usize]; 4usize],
    pub voff_i_b: [[uint16; 4usize]; 4usize],
    pub gain_i_b: [[uint16; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_254_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_254_>(),
        256usize,
        concat!("Size of: ", stringify!(DQCALSET_254_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_254_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_254_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_254_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_254_),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_254_>())).voff_i_a as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_254_),
            "::",
            stringify!(voff_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_254_>())).gain_i_a as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_254_),
            "::",
            stringify!(gain_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_254_>())).voff_i_b as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_254_),
            "::",
            stringify!(voff_i_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_254_>())).gain_i_b as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_254_),
            "::",
            stringify!(gain_i_b)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_254_ {
    pub chlst: [uint32; 8usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_254_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_254_>(),
        52usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_254_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_254_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_254_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_254_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_254_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_254_>())).conf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_254_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_254_>())).cvclk as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_254_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_254_>())).clclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_254_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_254_>())).trig as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_254_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_254_>())).clperint as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_254_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WFPRM_254 {
    pub min_lvl: uint32,
    pub max_lvl: uint32,
    pub sum: uint32,
    pub cal: uint32,
    pub raw: uint32,
    pub zc0: uint32,
    pub zc1: uint32,
    pub zc0_var: uint32,
    pub zc1_var: uint32,
    pub raw_var: uint32,
    pub clk_frq: uint32,
    pub ampl: f32,
    pub freq: f32,
    pub offs: f32,
}
#[test]
fn bindgen_test_layout_WFPRM_254() {
    assert_eq!(
        ::std::mem::size_of::<WFPRM_254>(),
        56usize,
        concat!("Size of: ", stringify!(WFPRM_254))
    );
    assert_eq!(
        ::std::mem::align_of::<WFPRM_254>(),
        4usize,
        concat!("Alignment of ", stringify!(WFPRM_254))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).min_lvl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(min_lvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).max_lvl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(max_lvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).sum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(sum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).cal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).raw as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).zc0 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(zc0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).zc1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(zc1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).zc0_var as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(zc0_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).zc1_var as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(zc1_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).raw_var as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(raw_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).clk_frq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(clk_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).ampl as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(ampl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).freq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_254>())).offs as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_254),
            "::",
            stringify!(offs)
        )
    );
}
pub type pWFPRM_254 = *mut WFPRM_254;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WFMEASURE_254 {
    pub changain: uint32,
    pub zero: uint32,
    pub clock: uint32,
    pub uzb: uint32,
    pub uaz: uint32,
    pub s_e: uint32,
    pub period_ms: uint32,
}
#[test]
fn bindgen_test_layout_WFMEASURE_254() {
    assert_eq!(
        ::std::mem::size_of::<WFMEASURE_254>(),
        28usize,
        concat!("Size of: ", stringify!(WFMEASURE_254))
    );
    assert_eq!(
        ::std::mem::align_of::<WFMEASURE_254>(),
        4usize,
        concat!("Alignment of ", stringify!(WFMEASURE_254))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_254>())).changain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_254),
            "::",
            stringify!(changain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_254>())).zero as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_254),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_254>())).clock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_254),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_254>())).uzb as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_254),
            "::",
            stringify!(uzb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_254>())).uaz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_254),
            "::",
            stringify!(uaz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_254>())).s_e as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_254),
            "::",
            stringify!(s_e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_254>())).period_ms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_254),
            "::",
            stringify!(period_ms)
        )
    );
}
pub type pWFMEASURE_254 = *mut WFMEASURE_254;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ255SetExt {
    pub PositionAvg: uint32,
    pub ZeroCrossing: uint32,
}
#[test]
fn bindgen_test_layout_DQ255SetExt() {
    assert_eq!(
        ::std::mem::size_of::<DQ255SetExt>(),
        8usize,
        concat!("Size of: ", stringify!(DQ255SetExt))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ255SetExt>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ255SetExt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ255SetExt>())).PositionAvg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ255SetExt),
            "::",
            stringify!(PositionAvg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ255SetExt>())).ZeroCrossing as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ255SetExt),
            "::",
            stringify!(ZeroCrossing)
        )
    );
}
pub type pDQ255SetExt = *mut DQ255SetExt;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_255_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 2usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_255_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_255_>(),
        40usize,
        concat!("Size of: ", stringify!(DQCNAMES_255_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_255_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_255_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_255_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_255_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALCHAN_255_ {
    pub u_gain: [uint32; 2usize],
    pub u_offs: [uint32; 2usize],
    pub voff_i_a: [uint16; 2usize],
    pub gain_i_a: [uint16; 2usize],
    pub voff_i_b: [uint16; 2usize],
    pub gain_i_b: [uint16; 2usize],
    pub voff_i_c: [uint16; 2usize],
    pub gain_i_c: [uint16; 2usize],
    pub voff_i_d: [uint16; 2usize],
    pub gain_i_d: [uint16; 2usize],
    pub voff_o_a: [uint16; 2usize],
    pub gain_o_a: [uint16; 2usize],
    pub voff_o_b: [uint16; 2usize],
    pub gain_o_b: [uint16; 2usize],
    pub voff_o_c: [uint16; 2usize],
    pub gain_o_c: [uint16; 2usize],
    pub voff_o_d: [uint16; 2usize],
    pub gain_o_d: [uint16; 2usize],
}
#[test]
fn bindgen_test_layout_DQCALCHAN_255_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALCHAN_255_>(),
        80usize,
        concat!("Size of: ", stringify!(DQCALCHAN_255_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALCHAN_255_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALCHAN_255_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).u_gain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(u_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).u_offs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(u_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_i_a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_i_a as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_i_b as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_i_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_i_b as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_i_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_i_c as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_i_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_i_c as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_i_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_i_d as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_i_d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_i_d as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_i_d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_o_a as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_o_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_o_a as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_o_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_o_b as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_o_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_o_b as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_o_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_o_c as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_o_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_o_c as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_o_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).voff_o_d as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(voff_o_d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALCHAN_255_>())).gain_o_d as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALCHAN_255_),
            "::",
            stringify!(gain_o_d)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_255_ {
    pub cal: DQCALCHAN_255_,
    pub voff_i_a: [[uint16; 4usize]; 2usize],
    pub gain_i_a: [[uint16; 4usize]; 2usize],
    pub voff_i_b: [[uint16; 4usize]; 2usize],
    pub gain_i_b: [[uint16; 4usize]; 2usize],
    pub voff_i_c: [[uint16; 4usize]; 2usize],
    pub gain_i_c: [[uint16; 4usize]; 2usize],
    pub voff_i_d: [[uint16; 4usize]; 2usize],
    pub gain_i_d: [[uint16; 4usize]; 2usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_255_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_255_>(),
        208usize,
        concat!("Size of: ", stringify!(DQCALSET_255_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_255_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_255_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).voff_i_a as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(voff_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).gain_i_a as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(gain_i_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).voff_i_b as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(voff_i_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).gain_i_b as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(gain_i_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).voff_i_c as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(voff_i_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).gain_i_c as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(gain_i_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).voff_i_d as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(voff_i_d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_255_>())).gain_i_d as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_255_),
            "::",
            stringify!(gain_i_d)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_255_ {
    pub chlst: [uint32; 4usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_255_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_255_>(),
        36usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_255_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_255_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_255_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_255_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_255_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_255_>())).conf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_255_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_255_>())).cvclk as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_255_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_255_>())).clclk as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_255_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_255_>())).trig as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_255_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_255_>())).clperint as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_255_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_256_ {
    pub offs: [[uint16; 4usize]; 2usize],
    pub gain: [[uint16; 4usize]; 2usize],
    pub pdac_ffff: [uint16; 2usize],
    pub pdac_0000: [uint16; 2usize],
    pub reserved: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_256_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_256_>(),
        56usize,
        concat!("Size of: ", stringify!(DQCALSET_256_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_256_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_256_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_256_>())).offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_256_),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_256_>())).gain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_256_),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_256_>())).pdac_ffff as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_256_),
            "::",
            stringify!(pdac_ffff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_256_>())).pdac_0000 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_256_),
            "::",
            stringify!(pdac_0000)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_256_>())).reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_256_),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_256_ {
    pub oclimit: [uint32; 2usize],
    pub rdcnt: int32,
    pub adc_cfg: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_256_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_256_>(),
        28usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_256_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_256_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_256_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_256_>())).oclimit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_256_),
            "::",
            stringify!(oclimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_256_>())).rdcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_256_),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_256_>())).adc_cfg as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_256_),
            "::",
            stringify!(adc_cfg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WFPRM_255 {
    pub min_lvl: uint32,
    pub max_lvl: uint32,
    pub sum: uint32,
    pub cal: uint32,
    pub raw: uint32,
    pub zc0: uint32,
    pub zc1: uint32,
    pub zc0_var: uint32,
    pub zc1_var: uint32,
    pub cal_var: uint32,
    pub clk_frq: uint32,
    pub wf_phase: uint32,
    pub ampl: f32,
    pub freq: f32,
    pub offs: f32,
}
#[test]
fn bindgen_test_layout_WFPRM_255() {
    assert_eq!(
        ::std::mem::size_of::<WFPRM_255>(),
        60usize,
        concat!("Size of: ", stringify!(WFPRM_255))
    );
    assert_eq!(
        ::std::mem::align_of::<WFPRM_255>(),
        4usize,
        concat!("Alignment of ", stringify!(WFPRM_255))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).min_lvl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(min_lvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).max_lvl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(max_lvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).sum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(sum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).cal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).raw as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).zc0 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(zc0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).zc1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(zc1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).zc0_var as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(zc0_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).zc1_var as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(zc1_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).cal_var as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(cal_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).clk_frq as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(clk_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).wf_phase as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(wf_phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).ampl as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(ampl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).freq as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFPRM_255>())).offs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WFPRM_255),
            "::",
            stringify!(offs)
        )
    );
}
pub type pWFPRM_255 = *mut WFPRM_255;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WFMEASURE_255 {
    pub changain: uint32,
    pub zero: uint32,
    pub clock: uint32,
    pub uzb: uint32,
    pub uaz: uint32,
    pub s_e: uint32,
    pub period_ms: uint32,
    pub phase_meas: uint32,
}
#[test]
fn bindgen_test_layout_WFMEASURE_255() {
    assert_eq!(
        ::std::mem::size_of::<WFMEASURE_255>(),
        32usize,
        concat!("Size of: ", stringify!(WFMEASURE_255))
    );
    assert_eq!(
        ::std::mem::align_of::<WFMEASURE_255>(),
        4usize,
        concat!("Alignment of ", stringify!(WFMEASURE_255))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).changain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(changain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).zero as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).clock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).uzb as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(uzb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).uaz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(uaz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).s_e as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(s_e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).period_ms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(period_ms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WFMEASURE_255>())).phase_meas as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WFMEASURE_255),
            "::",
            stringify!(phase_meas)
        )
    );
}
pub type pWFMEASURE_255 = *mut WFMEASURE_255;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQAI256DATAIN {
    pub adcsts: int32,
    pub rdcnt: int32,
    pub adccfg: [int32; 4usize],
}
#[test]
fn bindgen_test_layout_DQAI256DATAIN() {
    assert_eq!(
        ::std::mem::size_of::<DQAI256DATAIN>(),
        24usize,
        concat!("Size of: ", stringify!(DQAI256DATAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAI256DATAIN>(),
        4usize,
        concat!("Alignment of ", stringify!(DQAI256DATAIN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAIN>())).adcsts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAIN),
            "::",
            stringify!(adcsts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAIN>())).rdcnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAIN),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAIN>())).adccfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAIN),
            "::",
            stringify!(adccfg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQAI256DATAOUT {
    pub cfgmask: int32,
    pub cfg: int32,
    pub portocm: int32,
    pub portocv0: int32,
    pub portocv1: int32,
    pub rdcnt: int32,
    pub adccfg: [int32; 4usize],
    pub reserved: [int32; 2usize],
}
#[test]
fn bindgen_test_layout_DQAI256DATAOUT() {
    assert_eq!(
        ::std::mem::size_of::<DQAI256DATAOUT>(),
        48usize,
        concat!("Size of: ", stringify!(DQAI256DATAOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAI256DATAOUT>(),
        4usize,
        concat!("Alignment of ", stringify!(DQAI256DATAOUT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).cfgmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(cfgmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).portocm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(portocm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).portocv0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(portocv0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).portocv1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(portocv1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).rdcnt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).adccfg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(adccfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAI256DATAOUT>())).reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAI256DATAOUT),
            "::",
            stringify!(reserved)
        )
    );
}
pub type pDQAI256DATAOUT = *mut DQAI256DATAOUT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_261_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 17usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_261_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_261_>(),
        272usize,
        concat!("Size of: ", stringify!(DQCNAMES_261_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_261_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_261_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_261_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_261_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCAL_DAC_INT_261_IDC {
    pub c_offs: [uint32; 11usize],
    pub c_gain: [uint32; 11usize],
}
#[test]
fn bindgen_test_layout_DQCAL_DAC_INT_261_IDC() {
    assert_eq!(
        ::std::mem::size_of::<DQCAL_DAC_INT_261_IDC>(),
        88usize,
        concat!("Size of: ", stringify!(DQCAL_DAC_INT_261_IDC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCAL_DAC_INT_261_IDC>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCAL_DAC_INT_261_IDC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_IDC>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_IDC),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_IDC>())).c_gain as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_IDC),
            "::",
            stringify!(c_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCAL_DAC_INT_261_IAC {
    pub c_offs: [uint32; 10usize],
    pub c_gain: [uint32; 10usize],
    pub pk_offs: [uint32; 10usize],
    pub pk_gain: [uint32; 10usize],
}
#[test]
fn bindgen_test_layout_DQCAL_DAC_INT_261_IAC() {
    assert_eq!(
        ::std::mem::size_of::<DQCAL_DAC_INT_261_IAC>(),
        160usize,
        concat!("Size of: ", stringify!(DQCAL_DAC_INT_261_IAC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCAL_DAC_INT_261_IAC>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCAL_DAC_INT_261_IAC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_IAC>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_IAC),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_IAC>())).c_gain as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_IAC),
            "::",
            stringify!(c_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_IAC>())).pk_offs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_IAC),
            "::",
            stringify!(pk_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_IAC>())).pk_gain as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_IAC),
            "::",
            stringify!(pk_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCAL_DAC_INT_261_VDC {
    pub c_offs: [uint32; 19usize],
    pub c_gain: [uint32; 19usize],
}
#[test]
fn bindgen_test_layout_DQCAL_DAC_INT_261_VDC() {
    assert_eq!(
        ::std::mem::size_of::<DQCAL_DAC_INT_261_VDC>(),
        152usize,
        concat!("Size of: ", stringify!(DQCAL_DAC_INT_261_VDC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCAL_DAC_INT_261_VDC>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCAL_DAC_INT_261_VDC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_VDC>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_VDC),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_VDC>())).c_gain as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_VDC),
            "::",
            stringify!(c_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCAL_DAC_INT_261_VAC {
    pub c_offs: [uint32; 12usize],
    pub c_gain: [uint32; 12usize],
    pub pk_offs: [uint32; 12usize],
    pub pk_gain: [uint32; 12usize],
}
#[test]
fn bindgen_test_layout_DQCAL_DAC_INT_261_VAC() {
    assert_eq!(
        ::std::mem::size_of::<DQCAL_DAC_INT_261_VAC>(),
        192usize,
        concat!("Size of: ", stringify!(DQCAL_DAC_INT_261_VAC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCAL_DAC_INT_261_VAC>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCAL_DAC_INT_261_VAC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_VAC>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_VAC),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_VAC>())).c_gain as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_VAC),
            "::",
            stringify!(c_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_VAC>())).pk_offs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_VAC),
            "::",
            stringify!(pk_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_INT_261_VAC>())).pk_gain as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_INT_261_VAC),
            "::",
            stringify!(pk_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCAL_OFF_GN_261 {
    pub c_offs: uint32,
    pub c_gain: uint32,
}
#[test]
fn bindgen_test_layout_DQCAL_OFF_GN_261() {
    assert_eq!(
        ::std::mem::size_of::<DQCAL_OFF_GN_261>(),
        8usize,
        concat!("Size of: ", stringify!(DQCAL_OFF_GN_261))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCAL_OFF_GN_261>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCAL_OFF_GN_261))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_OFF_GN_261>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_OFF_GN_261),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_OFF_GN_261>())).c_gain as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_OFF_GN_261),
            "::",
            stringify!(c_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCAL_DAC_SETRDEF_261 {
    pub c_offs: [int32; 8usize],
    pub c_gain: [uint32; 8usize],
    pub ref_offs: int32,
    pub ref_gain: uint32,
    pub excite: [uint32; 8usize],
}
#[test]
fn bindgen_test_layout_DQCAL_DAC_SETRDEF_261() {
    assert_eq!(
        ::std::mem::size_of::<DQCAL_DAC_SETRDEF_261>(),
        104usize,
        concat!("Size of: ", stringify!(DQCAL_DAC_SETRDEF_261))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCAL_DAC_SETRDEF_261>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCAL_DAC_SETRDEF_261))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_SETRDEF_261>())).c_offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_SETRDEF_261),
            "::",
            stringify!(c_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_SETRDEF_261>())).c_gain as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_SETRDEF_261),
            "::",
            stringify!(c_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_SETRDEF_261>())).ref_offs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_SETRDEF_261),
            "::",
            stringify!(ref_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_SETRDEF_261>())).ref_gain as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_SETRDEF_261),
            "::",
            stringify!(ref_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_SETRDEF_261>())).excite as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_SETRDEF_261),
            "::",
            stringify!(excite)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCAL_DAC_SETGVT_261 {
    pub vt: DQCAL_OFF_GN_261,
}
#[test]
fn bindgen_test_layout_DQCAL_DAC_SETGVT_261() {
    assert_eq!(
        ::std::mem::size_of::<DQCAL_DAC_SETGVT_261>(),
        8usize,
        concat!("Size of: ", stringify!(DQCAL_DAC_SETGVT_261))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCAL_DAC_SETGVT_261>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCAL_DAC_SETGVT_261))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCAL_DAC_SETGVT_261>())).vt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCAL_DAC_SETGVT_261),
            "::",
            stringify!(vt)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_261_ {
    pub confgvt: [DQCAL_DAC_SETGVT_261; 5usize],
    pub confgi: DQCAL_OFF_GN_261,
    pub limit_ma: uint32,
    pub hyst_ma: uint32,
    pub ref_r_res_x100: uint32,
    pub rn1_res: uint32,
    pub reserved: [uint32; 4usize],
    pub confgiac: DQCAL_OFF_GN_261,
    pub limit_ma_ac: uint32,
    pub hyst_ma_ac: uint32,
    pub confrd: DQCAL_DAC_SETRDEF_261,
    pub calidc: DQCAL_DAC_INT_261_IDC,
    pub caliac: DQCAL_DAC_INT_261_IAC,
    pub calvdc: DQCAL_DAC_INT_261_VDC,
    pub calvac: DQCAL_DAC_INT_261_VAC,
    pub vref5_10nv: int32,
    pub vref25v_10nv: int32,
    pub vref25i_10nv: int32,
}
#[test]
fn bindgen_test_layout_DQCALSET_261_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_261_>(),
        804usize,
        concat!("Size of: ", stringify!(DQCALSET_261_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_261_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_261_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).confgvt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(confgvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).confgi as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(confgi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).limit_ma as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(limit_ma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).hyst_ma as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(hyst_ma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).ref_r_res_x100 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(ref_r_res_x100)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).rn1_res as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(rn1_res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).reserved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).confgiac as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(confgiac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).limit_ma_ac as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(limit_ma_ac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).hyst_ma_ac as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(hyst_ma_ac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).confrd as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(confrd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).calidc as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(calidc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).caliac as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(caliac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).calvdc as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(calvdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).calvac as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(calvac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).vref5_10nv as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(vref5_10nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).vref25v_10nv as *const _ as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(vref25v_10nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_261_>())).vref25i_10nv as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_261_),
            "::",
            stringify!(vref25i_10nv)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_261_ {
    pub chlst: [uint32; 16usize],
    pub clperint: ::std::os::raw::c_int,
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clkcfg: uint32,
    pub resvd: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_261_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_261_>(),
        92usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_261_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_261_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_261_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).clperint as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).conf as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).cvclk as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).clclk as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).trig as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).clkcfg as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(clkcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_261_>())).resvd as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_261_),
            "::",
            stringify!(resvd)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_261_ {
    pub cfg: uint32,
    pub val: [uint32; 16usize],
    pub line_freq: uint32,
    pub line_cycles: uint32,
    pub v_fir: uint32,
    pub i_fir: uint32,
    pub resvd: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_261_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_261_>(),
        88usize,
        concat!("Size of: ", stringify!(DQINITPRM_261_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_261_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_261_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_261_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_261_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_261_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_261_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_261_>())).line_freq as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_261_),
            "::",
            stringify!(line_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_261_>())).line_cycles as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_261_),
            "::",
            stringify!(line_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_261_>())).v_fir as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_261_),
            "::",
            stringify!(v_fir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_261_>())).i_fir as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_261_),
            "::",
            stringify!(i_fir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_261_>())).resvd as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_261_),
            "::",
            stringify!(resvd)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_261_ {
    pub cfg: uint32,
    pub val: [uint32; 16usize],
    pub resvd: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_261_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_261_>(),
        72usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_261_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_261_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_261_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_261_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_261_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_261_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_261_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_261_>())).resvd as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_261_),
            "::",
            stringify!(resvd)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQEERSVD_261_ {
    pub res: [uint8; 680usize],
}
#[test]
fn bindgen_test_layout_DQEERSVD_261_() {
    assert_eq!(
        ::std::mem::size_of::<DQEERSVD_261_>(),
        680usize,
        concat!("Size of: ", stringify!(DQEERSVD_261_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEERSVD_261_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEERSVD_261_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEERSVD_261_>())).res as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEERSVD_261_),
            "::",
            stringify!(res)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_301_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_301_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_301_>(),
        256usize,
        concat!("Size of: ", stringify!(DQCNAMES_301_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_301_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_301_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_301_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_301_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_301_ {
    pub cal: [uint16; 4usize],
    pub dcal: [uint8; 16usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_301_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_301_>(),
        24usize,
        concat!("Size of: ", stringify!(DQCALSET_301_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_301_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_301_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_301_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_301_),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_301_>())).dcal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_301_),
            "::",
            stringify!(dcal)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_301_ {
    pub chlst: [uint32; 16usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub cfg: uint32,
    pub val: [uint16; 8usize],
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_301_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_301_>(),
        104usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_301_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_301_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_301_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).conf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).cvclk as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).clclk as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).trig as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).cfg as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).val as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_301_>())).clperint as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_301_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_301_ {
    pub cfg: uint32,
    pub val: [uint16; 8usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_301_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_301_>(),
        20usize,
        concat!("Size of: ", stringify!(DQINITPRM_301_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_301_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_301_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_301_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_301_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_301_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_301_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_301_ {
    pub cfg: uint32,
    pub val: [uint16; 8usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_301_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_301_>(),
        20usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_301_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_301_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_301_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_301_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_301_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_301_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_301_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_332_ {
    pub cname: [[::std::os::raw::c_char; 12usize]; 32usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_332_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_332_>(),
        384usize,
        concat!("Size of: ", stringify!(DQCNAMES_332_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_332_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_332_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_332_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_332_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_332_ {
    pub mreg: [uint16; 32usize],
    pub creg: [uint16; 32usize],
    pub offsdac0: uint16,
    pub offsdac1: uint16,
}
#[test]
fn bindgen_test_layout_DQCALSET_332_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_332_>(),
        132usize,
        concat!("Size of: ", stringify!(DQCALSET_332_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_332_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_332_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_332_>())).mreg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_332_),
            "::",
            stringify!(mreg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_332_>())).creg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_332_),
            "::",
            stringify!(creg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_332_>())).offsdac0 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_332_),
            "::",
            stringify!(offsdac0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_332_>())).offsdac1 as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_332_),
            "::",
            stringify!(offsdac1)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_333_ {
    pub offs: [int16; 32usize],
    pub gain: [uint16; 32usize],
    pub gain_sf: uint16,
}
#[test]
fn bindgen_test_layout_DQCALSET_333_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_333_>(),
        130usize,
        concat!("Size of: ", stringify!(DQCALSET_333_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_333_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_333_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_333_>())).offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_333_),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_333_>())).gain as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_333_),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_333_>())).gain_sf as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_333_),
            "::",
            stringify!(gain_sf)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_332_ {
    pub chlst: [uint32; 64usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub cfg: uint32,
    pub val: [uint16; 32usize],
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_332_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_332_>(),
        344usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_332_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_332_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_332_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).conf as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).cvclk as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).clclk as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).trig as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).cfg as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).val as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_332_>())).clperint as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_332_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_332_ {
    pub cfg: uint32,
    pub val: [uint16; 32usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_332_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_332_>(),
        68usize,
        concat!("Size of: ", stringify!(DQINITPRM_332_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_332_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_332_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_332_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_332_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_332_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_332_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_332_ {
    pub cfg: uint32,
    pub val: [uint16; 32usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_332_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_332_>(),
        68usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_332_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_332_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_332_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_332_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_332_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_332_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_332_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQAO318BRK_CFG {
    pub CB_val_min_f: [f32; 3usize],
    pub CB_val_max_f: [f32; 3usize],
    pub units: [uint8; 3usize],
}
#[test]
fn bindgen_test_layout_DQAO318BRK_CFG() {
    assert_eq!(
        ::std::mem::size_of::<DQAO318BRK_CFG>(),
        27usize,
        concat!("Size of: ", stringify!(DQAO318BRK_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAO318BRK_CFG>(),
        1usize,
        concat!("Alignment of ", stringify!(DQAO318BRK_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318BRK_CFG>())).CB_val_min_f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318BRK_CFG),
            "::",
            stringify!(CB_val_min_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318BRK_CFG>())).CB_val_max_f as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318BRK_CFG),
            "::",
            stringify!(CB_val_max_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318BRK_CFG>())).units as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318BRK_CFG),
            "::",
            stringify!(units)
        )
    );
}
pub type pDQAO318BRK_CFG = *mut DQAO318BRK_CFG;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQAO318CFG {
    pub prmmask: uint32,
    pub en_DAC: uint32,
    pub ADC_CL: [uint32; 5usize],
    pub ADC_rate: f32,
    pub CB_val_min: [uint32; 3usize],
    pub CB_val_max: [uint32; 3usize],
    pub CB_mode: uint32,
    pub rdcnt: uint32,
    pub CB_rate: f32,
}
#[test]
fn bindgen_test_layout_DQAO318CFG() {
    assert_eq!(
        ::std::mem::size_of::<DQAO318CFG>(),
        68usize,
        concat!("Size of: ", stringify!(DQAO318CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAO318CFG>(),
        1usize,
        concat!("Alignment of ", stringify!(DQAO318CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).prmmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(prmmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).en_DAC as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(en_DAC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).ADC_CL as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(ADC_CL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).ADC_rate as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(ADC_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).CB_val_min as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(CB_val_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).CB_val_max as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(CB_val_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).CB_mode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(CB_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).rdcnt as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO318CFG>())).CB_rate as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO318CFG),
            "::",
            stringify!(CB_rate)
        )
    );
}
pub type pDQAO318CFG = *mut DQAO318CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_318_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_318_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_318_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_318_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_318_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_318_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_318_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_318_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_318_ {
    pub gain_a: [uint16; 8usize],
    pub offs_a: [uint16; 8usize],
    pub gain_b: [uint16; 8usize],
    pub offs_b: [uint16; 8usize],
    pub gain_adc: [[uint16; 5usize]; 8usize],
    pub offs_adc: [[uint16; 5usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_318_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_318_>(),
        224usize,
        concat!("Size of: ", stringify!(DQCALSET_318_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_318_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_318_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_318_>())).gain_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_318_),
            "::",
            stringify!(gain_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_318_>())).offs_a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_318_),
            "::",
            stringify!(offs_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_318_>())).gain_b as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_318_),
            "::",
            stringify!(gain_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_318_>())).offs_b as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_318_),
            "::",
            stringify!(offs_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_318_>())).gain_adc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_318_),
            "::",
            stringify!(gain_adc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_318_>())).offs_adc as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_318_),
            "::",
            stringify!(offs_adc)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_318_ {
    pub chlst: [uint32; 16usize],
    pub conf: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub cfg: uint32,
    pub val_a: [uint16; 8usize],
    pub val_b: [uint16; 8usize],
    pub cb_minmax: [[uint32; 3usize]; 8usize],
    pub cb_mode: [uint32; 8usize],
    pub clperint: ::std::os::raw::c_int,
    pub rsv: [uint32; 8usize],
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_318_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_318_>(),
        276usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_318_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_318_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_318_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).conf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).clclk as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).trig as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).cfg as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).val_a as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(val_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).val_b as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(val_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).cb_minmax as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(cb_minmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).cb_mode as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(cb_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).clperint as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_318_>())).rsv as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_318_),
            "::",
            stringify!(rsv)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_318_ {
    pub cfg: uint32,
    pub val_a: [uint16; 8usize],
    pub val_b: [uint16; 8usize],
    pub adc_cl: [[uint32; 5usize]; 8usize],
    pub cb_minmax: [[uint32; 3usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_318_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_318_>(),
        292usize,
        concat!("Size of: ", stringify!(DQINITPRM_318_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_318_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_318_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_318_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_318_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_318_>())).val_a as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_318_),
            "::",
            stringify!(val_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_318_>())).val_b as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_318_),
            "::",
            stringify!(val_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_318_>())).adc_cl as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_318_),
            "::",
            stringify!(adc_cl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_318_>())).cb_minmax as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_318_),
            "::",
            stringify!(cb_minmax)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_318_ {
    pub cfg: uint32,
    pub val_a: [uint16; 8usize],
    pub val_b: [uint16; 8usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_318_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_318_>(),
        36usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_318_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_318_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_318_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_318_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_318_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_318_>())).val_a as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_318_),
            "::",
            stringify!(val_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_318_>())).val_b as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_318_),
            "::",
            stringify!(val_b)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_358_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_358_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_358_>(),
        256usize,
        concat!("Size of: ", stringify!(DQCNAMES_358_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_358_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_358_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_358_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_358_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_358_ {
    pub placeholder: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_358_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_358_>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_358_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_358_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_358_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_358_>())).placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_358_),
            "::",
            stringify!(placeholder)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_358_ {
    pub chlst: [uint32; 16usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub cfg: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_358_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_358_>(),
        88usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_358_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_358_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_358_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_358_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_358_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_358_>())).conf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_358_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_358_>())).cvclk as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_358_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_358_>())).clclk as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_358_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_358_>())).trig as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_358_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_358_>())).cfg as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_358_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_358_>())).clperint as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_358_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_358_ {
    pub cfg: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_358_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_358_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_358_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_358_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_358_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_358_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_358_),
            "::",
            stringify!(cfg)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_358_ {
    pub cfg: uint32,
    pub sd_coarse: [uint16; 8usize],
    pub sd_fine: [uint16; 8usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_358_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_358_>(),
        36usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_358_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_358_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_358_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_358_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_358_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_358_>())).sd_coarse as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_358_),
            "::",
            stringify!(sd_coarse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_358_>())).sd_fine as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_358_),
            "::",
            stringify!(sd_fine)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_358CAL_HEAD {
    pub adc_gain: [uint32; 5usize],
    pub adc_offs: [uint32; 5usize],
    pub dp_cal_mid_fine: uint16,
    pub dp_cal_mid_coarse: uint16,
    pub min_coarse: uint16,
    pub resvd1: uint16,
    pub r_3ff0c0: f64,
    pub resvd3: f64,
    pub r_shunt: uint32,
    pub r_prot_c: uint32,
    pub r_prot_f: uint32,
    pub r_par: uint32,
    pub r_end: uint32,
    pub r_div: uint32,
    pub r_br_1: uint32,
    pub r_br_2: uint32,
    pub r_br_3: uint32,
    pub r_wiper: uint32,
    pub r_pot_nom: uint32,
    pub r_f_at_cal: uint32,
    pub r_span: uint32,
    pub r_start: uint32,
    pub rf_at_cal: uint32,
    pub r4delta: f64,
    pub r4fdelta: f64,
    pub r_offs: uint32,
    pub r_gain: uint32,
    pub resvd2: [uint32; 27usize],
}
#[test]
fn bindgen_test_layout_DQ_358CAL_HEAD() {
    assert_eq!(
        ::std::mem::size_of::<DQ_358CAL_HEAD>(),
        256usize,
        concat!("Size of: ", stringify!(DQ_358CAL_HEAD))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_358CAL_HEAD>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_358CAL_HEAD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).adc_gain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(adc_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).adc_offs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(adc_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).dp_cal_mid_fine as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(dp_cal_mid_fine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).dp_cal_mid_coarse as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(dp_cal_mid_coarse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).min_coarse as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(min_coarse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).resvd1 as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(resvd1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_3ff0c0 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_3ff0c0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).resvd3 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(resvd3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_shunt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_shunt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_prot_c as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_prot_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_prot_f as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_prot_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_par as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_par)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_end as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_div as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_br_1 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_br_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_br_2 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_br_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_br_3 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_br_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_wiper as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_wiper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_pot_nom as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_pot_nom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_f_at_cal as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_f_at_cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_span as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_span)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_start as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).rf_at_cal as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(rf_at_cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r4delta as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r4delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r4fdelta as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r4fdelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_offs as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).r_gain as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(r_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_358CAL_HEAD>())).resvd2 as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_358CAL_HEAD),
            "::",
            stringify!(resvd2)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQEXCAL_358 {
    pub cal_data: DQ_358CAL_HEAD,
    pub dp_cal_c: [f64; 1024usize],
    pub reserved2: [f64; 992usize],
}
#[test]
fn bindgen_test_layout_DQEXCAL_358() {
    assert_eq!(
        ::std::mem::size_of::<DQEXCAL_358>(),
        16384usize,
        concat!("Size of: ", stringify!(DQEXCAL_358))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEXCAL_358>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEXCAL_358))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXCAL_358>())).cal_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXCAL_358),
            "::",
            stringify!(cal_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXCAL_358>())).dp_cal_c as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXCAL_358),
            "::",
            stringify!(dp_cal_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXCAL_358>())).reserved2 as *const _ as usize },
        8448usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXCAL_358),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQEXCAL_358_8 {
    pub chnl: [DQEXCAL_358; 8usize],
}
#[test]
fn bindgen_test_layout_DQEXCAL_358_8() {
    assert_eq!(
        ::std::mem::size_of::<DQEXCAL_358_8>(),
        131072usize,
        concat!("Size of: ", stringify!(DQEXCAL_358_8))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEXCAL_358_8>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEXCAL_358_8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXCAL_358_8>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXCAL_358_8),
            "::",
            stringify!(chnl)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQAO364STDWF {
    pub duty_cycle: f32,
    pub rise_time: f32,
    pub fall_time: f32,
}
#[test]
fn bindgen_test_layout_DQAO364STDWF() {
    assert_eq!(
        ::std::mem::size_of::<DQAO364STDWF>(),
        12usize,
        concat!("Size of: ", stringify!(DQAO364STDWF))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAO364STDWF>(),
        1usize,
        concat!("Alignment of ", stringify!(DQAO364STDWF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364STDWF>())).duty_cycle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364STDWF),
            "::",
            stringify!(duty_cycle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364STDWF>())).rise_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364STDWF),
            "::",
            stringify!(rise_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364STDWF>())).fall_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364STDWF),
            "::",
            stringify!(fall_time)
        )
    );
}
pub type pDQAO364STDWF = *mut DQAO364STDWF;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQAO364WFPRM {
    pub flags: uint32,
    pub freq: f64,
    pub span: f64,
    pub offset: f64,
    pub phase: f64,
    pub set_time: f64,
}
#[test]
fn bindgen_test_layout_DQAO364WFPRM() {
    assert_eq!(
        ::std::mem::size_of::<DQAO364WFPRM>(),
        44usize,
        concat!("Size of: ", stringify!(DQAO364WFPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAO364WFPRM>(),
        1usize,
        concat!("Alignment of ", stringify!(DQAO364WFPRM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFPRM>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFPRM),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFPRM>())).freq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFPRM),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFPRM>())).span as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFPRM),
            "::",
            stringify!(span)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFPRM>())).offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFPRM),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFPRM>())).phase as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFPRM),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFPRM>())).set_time as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFPRM),
            "::",
            stringify!(set_time)
        )
    );
}
pub type pDQAO364WFPRM = *mut DQAO364WFPRM;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQAO364BUFLST {
    pub buf_size: uint32,
    pub d_size: uint32,
    pub buf_next: uint32,
    pub flags: uint32,
}
#[test]
fn bindgen_test_layout_DQAO364BUFLST() {
    assert_eq!(
        ::std::mem::size_of::<DQAO364BUFLST>(),
        16usize,
        concat!("Size of: ", stringify!(DQAO364BUFLST))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAO364BUFLST>(),
        1usize,
        concat!("Alignment of ", stringify!(DQAO364BUFLST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364BUFLST>())).buf_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364BUFLST),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364BUFLST>())).d_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364BUFLST),
            "::",
            stringify!(d_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364BUFLST>())).buf_next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364BUFLST),
            "::",
            stringify!(buf_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364BUFLST>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364BUFLST),
            "::",
            stringify!(flags)
        )
    );
}
pub type pDQAO364BUFLST = *mut DQAO364BUFLST;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQAO364WFSWEEP {
    pub flags: uint32,
    pub steps_up: uint32,
    pub steps_dn: uint32,
    pub periods: uint32,
    pub start_freq: f64,
    pub end_freq: f64,
    pub start_ampl: f64,
    pub end_ampl: f64,
    pub start_offs: f64,
    pub end_offs: f64,
    pub start_phase: f64,
    pub end_phase: f64,
    pub sweep_time: f64,
}
#[test]
fn bindgen_test_layout_DQAO364WFSWEEP() {
    assert_eq!(
        ::std::mem::size_of::<DQAO364WFSWEEP>(),
        88usize,
        concat!("Size of: ", stringify!(DQAO364WFSWEEP))
    );
    assert_eq!(
        ::std::mem::align_of::<DQAO364WFSWEEP>(),
        1usize,
        concat!("Alignment of ", stringify!(DQAO364WFSWEEP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).steps_up as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(steps_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).steps_dn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(steps_dn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).periods as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(periods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).start_freq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(start_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).end_freq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(end_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).start_ampl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(start_ampl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).end_ampl as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(end_ampl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).start_offs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(start_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).end_offs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(end_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).start_phase as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(start_phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).end_phase as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(end_phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQAO364WFSWEEP>())).sweep_time as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQAO364WFSWEEP),
            "::",
            stringify!(sweep_time)
        )
    );
}
pub type pDQAO364WFSWEEP = *mut DQAO364WFSWEEP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_364_ {
    pub cnames: [[::std::os::raw::c_char; 32usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_364_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_364_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_364_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_364_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_364_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_364_>())).cnames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_364_),
            "::",
            stringify!(cnames)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_364_ {
    pub val: uint32,
    pub gain_dac: [[uint32; 4usize]; 4usize],
    pub offs_dac: [[uint32; 4usize]; 4usize],
    pub gain_odac: [[uint32; 4usize]; 4usize],
    pub offs_odac: [[uint32; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_364_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_364_>(),
        260usize,
        concat!("Size of: ", stringify!(DQCALSET_364_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_364_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_364_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_364_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_364_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_364_>())).gain_dac as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_364_),
            "::",
            stringify!(gain_dac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_364_>())).offs_dac as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_364_),
            "::",
            stringify!(offs_dac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_364_>())).gain_odac as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_364_),
            "::",
            stringify!(gain_odac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_364_>())).offs_odac as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_364_),
            "::",
            stringify!(offs_odac)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_364_ {
    pub val: uint32,
    pub dac_wr: [uint32; 4usize],
    pub odac_wr: [uint32; 4usize],
    pub states: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_364_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_364_>(),
        52usize,
        concat!("Size of: ", stringify!(DQINITPRM_364_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_364_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_364_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_364_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_364_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_364_>())).dac_wr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_364_),
            "::",
            stringify!(dac_wr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_364_>())).odac_wr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_364_),
            "::",
            stringify!(odac_wr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_364_>())).states as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_364_),
            "::",
            stringify!(states)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_364_ {
    pub lcr: uint32,
    pub dac_wr: [uint32; 4usize],
    pub odac_wr: [uint32; 4usize],
    pub states: [uint32; 4usize],
    pub fwcfg: uint32,
    pub fwdc: uint32,
    pub fwdiv: uint32,
    pub fwclk_min: uint32,
    pub fwclk_max: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_364_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_364_>(),
        72usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_364_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_364_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_364_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).lcr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(lcr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).dac_wr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(dac_wr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).odac_wr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(odac_wr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).states as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(states)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).fwcfg as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(fwcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).fwdc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(fwdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).fwdiv as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(fwdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).fwclk_min as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(fwclk_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_364_>())).fwclk_max as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_364_),
            "::",
            stringify!(fwclk_max)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_364_ {
    pub val: uint32,
    pub dac_wr: [uint32; 4usize],
    pub odac_wr: [uint32; 4usize],
    pub states: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_364_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_364_>(),
        52usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_364_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_364_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_364_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_364_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_364_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_364_>())).dac_wr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_364_),
            "::",
            stringify!(dac_wr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_364_>())).odac_wr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_364_),
            "::",
            stringify!(odac_wr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_364_>())).states as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_364_),
            "::",
            stringify!(states)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQPRMFLAGS_364_ {
    pub flag_ver: uint32,
}
#[test]
fn bindgen_test_layout_DQPRMFLAGS_364_() {
    assert_eq!(
        ::std::mem::size_of::<DQPRMFLAGS_364_>(),
        4usize,
        concat!("Size of: ", stringify!(DQPRMFLAGS_364_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQPRMFLAGS_364_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQPRMFLAGS_364_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGS_364_>())).flag_ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGS_364_),
            "::",
            stringify!(flag_ver)
        )
    );
}
#[repr(C, packed)]
pub struct DQEXEE_364 {
    pub size: uint32,
    pub version: uint32,
    pub datecode: uint32,
    pub crc: uint32,
    pub res: [uint32; 252usize],
    pub fpga_boot: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQEXEE_364() {
    assert_eq!(
        ::std::mem::size_of::<DQEXEE_364>(),
        1024usize,
        concat!("Size of: ", stringify!(DQEXEE_364))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEXEE_364>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEXEE_364))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_364>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_364),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_364>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_364),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_364>())).datecode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_364),
            "::",
            stringify!(datecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_364>())).crc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_364),
            "::",
            stringify!(crc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_364>())).res as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_364),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_364>())).fpga_boot as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_364),
            "::",
            stringify!(fpga_boot)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQEXEE_STS_364 {
    pub busy: uint32,
    pub ests: uint32,
    pub rdsts: uint32,
    pub rd_addr: uint32,
    pub wr_addr: uint32,
}
#[test]
fn bindgen_test_layout_DQEXEE_STS_364() {
    assert_eq!(
        ::std::mem::size_of::<DQEXEE_STS_364>(),
        20usize,
        concat!("Size of: ", stringify!(DQEXEE_STS_364))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEXEE_STS_364>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEXEE_STS_364))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_STS_364>())).busy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_STS_364),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_STS_364>())).ests as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_STS_364),
            "::",
            stringify!(ests)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_STS_364>())).rdsts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_STS_364),
            "::",
            stringify!(rdsts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_STS_364>())).rd_addr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_STS_364),
            "::",
            stringify!(rd_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEXEE_STS_364>())).wr_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEXEE_STS_364),
            "::",
            stringify!(wr_addr)
        )
    );
}
pub type pDQEXEE_STS_364 = *mut DQEXEE_STS_364;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_PLL_364 {
    pub samplerate: f32,
    pub actual: f32,
    pub base: uint32,
    pub m: uint32,
    pub n: uint32,
    pub c0: uint32,
    pub c2: uint32,
    pub I: uint32,
    pub R: uint32,
    pub C: uint32,
    pub vco_post: uint32,
    pub baseclock: uint32,
    pub mul_factor: uint32,
    pub mul_pwr: uint32,
    pub div_factor: uint32,
    pub div_pwr: uint32,
}
#[test]
fn bindgen_test_layout_DQ_PLL_364() {
    assert_eq!(
        ::std::mem::size_of::<DQ_PLL_364>(),
        64usize,
        concat!("Size of: ", stringify!(DQ_PLL_364))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_PLL_364>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_PLL_364))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).samplerate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(samplerate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).actual as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(actual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).m as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).n as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).c0 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(c0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).c2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).I as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(I)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).R as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(R)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).C as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(C)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).vco_post as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(vco_post)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).baseclock as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(baseclock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).mul_factor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(mul_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).mul_pwr as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(mul_pwr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).div_factor as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(div_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_PLL_364>())).div_pwr as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_PLL_364),
            "::",
            stringify!(div_pwr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQRTD388CFG {
    pub prmmask: uint32,
    pub rdcnt: uint32,
    pub CB_limit_i: uint32,
    pub CB_limit_t: uint32,
    pub CB_enables: uint32,
}
#[test]
fn bindgen_test_layout_DQRTD388CFG() {
    assert_eq!(
        ::std::mem::size_of::<DQRTD388CFG>(),
        20usize,
        concat!("Size of: ", stringify!(DQRTD388CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQRTD388CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(DQRTD388CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTD388CFG>())).prmmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTD388CFG),
            "::",
            stringify!(prmmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTD388CFG>())).rdcnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTD388CFG),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTD388CFG>())).CB_limit_i as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTD388CFG),
            "::",
            stringify!(CB_limit_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTD388CFG>())).CB_limit_t as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTD388CFG),
            "::",
            stringify!(CB_limit_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTD388CFG>())).CB_enables as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTD388CFG),
            "::",
            stringify!(CB_enables)
        )
    );
}
pub type pDQRTD388CFG = *mut DQRTD388CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_388_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_388_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_388_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_388_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_388_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_388_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_388_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_388_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_388_ {
    pub da_res: [[f32; 19usize]; 8usize],
    pub da_offs: [[f32; 5usize]; 8usize],
    pub gain_adc: [[uint32; 2usize]; 8usize],
    pub offs_adc: [[uint32; 2usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_388_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_388_>(),
        896usize,
        concat!("Size of: ", stringify!(DQCALSET_388_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_388_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQCALSET_388_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_388_>())).da_res as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_388_),
            "::",
            stringify!(da_res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_388_>())).da_offs as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_388_),
            "::",
            stringify!(da_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_388_>())).gain_adc as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_388_),
            "::",
            stringify!(gain_adc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_388_>())).offs_adc as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_388_),
            "::",
            stringify!(offs_adc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_388_ {
    pub val: [uint32; 9usize],
    pub conf: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub cfg: uint32,
    pub clperint: ::std::os::raw::c_int,
    pub rsv: [uint32; 8usize],
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_388_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_388_>(),
        88usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_388_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_388_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_388_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_388_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_388_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_388_>())).conf as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_388_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_388_>())).clclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_388_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_388_>())).trig as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_388_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_388_>())).cfg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_388_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_388_>())).clperint as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_388_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_388_>())).rsv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_388_),
            "::",
            stringify!(rsv)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_388_ {
    pub val: [uint32; 8usize],
    pub cb_limit: [[uint32; 2usize]; 8usize],
    pub cb_mode: [uint32; 8usize],
    pub rsv2: [uint32; 8usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_388_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_388_>(),
        160usize,
        concat!("Size of: ", stringify!(DQINITPRM_388_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_388_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_388_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_388_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_388_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_388_>())).cb_limit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_388_),
            "::",
            stringify!(cb_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_388_>())).cb_mode as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_388_),
            "::",
            stringify!(cb_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_388_>())).rsv2 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_388_),
            "::",
            stringify!(rsv2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_388_ {
    pub val: [uint32; 8usize],
    pub cfg: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_388_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_388_>(),
        36usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_388_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_388_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_388_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_388_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_388_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_388_>())).cfg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_388_),
            "::",
            stringify!(cfg)
        )
    );
}
pub const event401_t_EV401_CLEAR: event401_t = 4096;
pub const event401_t_EV401_DI_CHANGE: event401_t = 257;
pub const event401_t_EV401_PERIODIC: event401_t = 258;
pub type event401_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ414W {
    pub rflags: int32,
    pub mux_select: [int32; 2usize],
    pub relay_select: [int32; 3usize],
}
#[test]
fn bindgen_test_layout_DQ414W() {
    assert_eq!(
        ::std::mem::size_of::<DQ414W>(),
        24usize,
        concat!("Size of: ", stringify!(DQ414W))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ414W>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ414W))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414W>())).rflags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414W),
            "::",
            stringify!(rflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414W>())).mux_select as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414W),
            "::",
            stringify!(mux_select)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414W>())).relay_select as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414W),
            "::",
            stringify!(relay_select)
        )
    );
}
pub type pDQ414W = *mut DQ414W;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ414ADC {
    pub adc_in: f64,
    pub adc_3_3: f64,
    pub adc_2_5: f64,
    pub adc_deg_c: f64,
    pub status: uint32,
    pub timestamp: uint32,
}
#[test]
fn bindgen_test_layout_DQ414ADC() {
    assert_eq!(
        ::std::mem::size_of::<DQ414ADC>(),
        40usize,
        concat!("Size of: ", stringify!(DQ414ADC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ414ADC>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ414ADC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414ADC>())).adc_in as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414ADC),
            "::",
            stringify!(adc_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414ADC>())).adc_3_3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414ADC),
            "::",
            stringify!(adc_3_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414ADC>())).adc_2_5 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414ADC),
            "::",
            stringify!(adc_2_5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414ADC>())).adc_deg_c as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414ADC),
            "::",
            stringify!(adc_deg_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414ADC>())).status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414ADC),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414ADC>())).timestamp as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414ADC),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type pDQ414ADC = *mut DQ414ADC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ414CFG {
    pub on_delay: uint32,
    pub off_delay: uint32,
    pub di_mode: uint32,
    pub di_polarity: uint32,
    pub sync_out_pw: uint32,
    pub sync_out_mode: uint32,
    pub sync_skip: uint32,
}
#[test]
fn bindgen_test_layout_DQ414CFG() {
    assert_eq!(
        ::std::mem::size_of::<DQ414CFG>(),
        28usize,
        concat!("Size of: ", stringify!(DQ414CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ414CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ414CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414CFG>())).on_delay as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414CFG),
            "::",
            stringify!(on_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414CFG>())).off_delay as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414CFG),
            "::",
            stringify!(off_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414CFG>())).di_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414CFG),
            "::",
            stringify!(di_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414CFG>())).di_polarity as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414CFG),
            "::",
            stringify!(di_polarity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414CFG>())).sync_out_pw as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414CFG),
            "::",
            stringify!(sync_out_pw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414CFG>())).sync_out_mode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414CFG),
            "::",
            stringify!(sync_out_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414CFG>())).sync_skip as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414CFG),
            "::",
            stringify!(sync_skip)
        )
    );
}
pub type pDQ414CFG = *mut DQ414CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ414STATUS {
    pub relay_a: uint32,
    pub relay_b: uint32,
    pub relay_c: uint32,
    pub status: uint32,
}
#[test]
fn bindgen_test_layout_DQ414STATUS() {
    assert_eq!(
        ::std::mem::size_of::<DQ414STATUS>(),
        16usize,
        concat!("Size of: ", stringify!(DQ414STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ414STATUS>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ414STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414STATUS>())).relay_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414STATUS),
            "::",
            stringify!(relay_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414STATUS>())).relay_b as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414STATUS),
            "::",
            stringify!(relay_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414STATUS>())).relay_c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414STATUS),
            "::",
            stringify!(relay_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ414STATUS>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ414STATUS),
            "::",
            stringify!(status)
        )
    );
}
pub type pDQ414STATUS = *mut DQ414STATUS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ461COUNT {
    pub a_count: [int32; 13usize],
    pub b_count: [int32; 13usize],
    pub d_count: [int32; 4usize],
}
#[test]
fn bindgen_test_layout_DQ461COUNT() {
    assert_eq!(
        ::std::mem::size_of::<DQ461COUNT>(),
        120usize,
        concat!("Size of: ", stringify!(DQ461COUNT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ461COUNT>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ461COUNT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461COUNT>())).a_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461COUNT),
            "::",
            stringify!(a_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461COUNT>())).b_count as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461COUNT),
            "::",
            stringify!(b_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461COUNT>())).d_count as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461COUNT),
            "::",
            stringify!(d_count)
        )
    );
}
pub type pDQ461COUNT = *mut DQ461COUNT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ461ADC {
    pub adc_24: f64,
    pub adc_3_3: f64,
    pub adc_5VR: f64,
    pub adc_deg_c: f64,
    pub status: uint32,
    pub timestamp: uint32,
}
#[test]
fn bindgen_test_layout_DQ461ADC() {
    assert_eq!(
        ::std::mem::size_of::<DQ461ADC>(),
        40usize,
        concat!("Size of: ", stringify!(DQ461ADC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ461ADC>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ461ADC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461ADC>())).adc_24 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461ADC),
            "::",
            stringify!(adc_24)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461ADC>())).adc_3_3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461ADC),
            "::",
            stringify!(adc_3_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461ADC>())).adc_5VR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461ADC),
            "::",
            stringify!(adc_5VR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461ADC>())).adc_deg_c as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461ADC),
            "::",
            stringify!(adc_deg_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461ADC>())).status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461ADC),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461ADC>())).timestamp as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461ADC),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type pDQ461ADC = *mut DQ461ADC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ461CFG {
    pub dcdc_vout_holding: uint32,
    pub dcdc_vout_switching: uint32,
    pub d_bbm_mode: uint32,
    pub on_delay: uint32,
    pub off_delay: uint32,
    pub di_mode: uint32,
    pub di_polarity: uint32,
    pub sync_out_pw: uint32,
    pub sync_out_mode: uint32,
    pub sync_skip: uint32,
}
#[test]
fn bindgen_test_layout_DQ461CFG() {
    assert_eq!(
        ::std::mem::size_of::<DQ461CFG>(),
        40usize,
        concat!("Size of: ", stringify!(DQ461CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ461CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ461CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).dcdc_vout_holding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(dcdc_vout_holding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).dcdc_vout_switching as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(dcdc_vout_switching)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).d_bbm_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(d_bbm_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).on_delay as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(on_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).off_delay as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(off_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).di_mode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(di_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).di_polarity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(di_polarity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).sync_out_pw as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(sync_out_pw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).sync_out_mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(sync_out_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461CFG>())).sync_skip as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461CFG),
            "::",
            stringify!(sync_skip)
        )
    );
}
pub type pDQ461CFG = *mut DQ461CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ461STATUS {
    pub port0_write: uint32,
    pub port0_state: uint32,
    pub status: uint32,
    pub a_state: uint32,
    pub b_state: uint32,
    pub d_state: uint32,
}
#[test]
fn bindgen_test_layout_DQ461STATUS() {
    assert_eq!(
        ::std::mem::size_of::<DQ461STATUS>(),
        24usize,
        concat!("Size of: ", stringify!(DQ461STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ461STATUS>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ461STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461STATUS>())).port0_write as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461STATUS),
            "::",
            stringify!(port0_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461STATUS>())).port0_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461STATUS),
            "::",
            stringify!(port0_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461STATUS>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461STATUS),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461STATUS>())).a_state as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461STATUS),
            "::",
            stringify!(a_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461STATUS>())).b_state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461STATUS),
            "::",
            stringify!(b_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ461STATUS>())).d_state as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ461STATUS),
            "::",
            stringify!(d_state)
        )
    );
}
pub type pDQ461STATUS = *mut DQ461STATUS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_401_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 24usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_401_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_401_>(),
        480usize,
        concat!("Size of: ", stringify!(DQCNAMES_401_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_401_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_401_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_401_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_401_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_401_ {
    pub chlst: [uint32; 48usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub hyst: [uint16; 2usize],
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_401_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_401_>(),
        224usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_401_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_401_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_401_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).conf as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).chop as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).mask as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).clclk as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).cvclk as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).hyst as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(hyst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).clperint as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_401_>())).trig as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_401_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_401_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_401_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_401_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_401_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_401_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_401_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_401_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_401_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_401_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_401_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_401_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_401_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_401_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_401_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_401_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_401_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_414_ {
    pub cfg2000: uint32,
    pub a_relays: uint32,
    pub b_relays: uint32,
    pub c_relays: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_414_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_414_>(),
        16usize,
        concat!("Size of: ", stringify!(DQINITPRM_414_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_414_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_414_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_414_>())).cfg2000 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_414_),
            "::",
            stringify!(cfg2000)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_414_>())).a_relays as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_414_),
            "::",
            stringify!(a_relays)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_414_>())).b_relays as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_414_),
            "::",
            stringify!(b_relays)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_414_>())).c_relays as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_414_),
            "::",
            stringify!(c_relays)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_414_ {
    pub cfg2000: uint32,
    pub a_relays: uint32,
    pub b_relays: uint32,
    pub c_relays: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_414_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_414_>(),
        16usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_414_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_414_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_414_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_414_>())).cfg2000 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_414_),
            "::",
            stringify!(cfg2000)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_414_>())).a_relays as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_414_),
            "::",
            stringify!(a_relays)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_414_>())).b_relays as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_414_),
            "::",
            stringify!(b_relays)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_414_>())).c_relays as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_414_),
            "::",
            stringify!(c_relays)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_461_ {
    pub cfg_2000: uint32,
    pub cfg_2xch: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_461_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_461_>(),
        8usize,
        concat!("Size of: ", stringify!(DQINITPRM_461_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_461_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_461_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_461_>())).cfg_2000 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_461_),
            "::",
            stringify!(cfg_2000)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_461_>())).cfg_2xch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_461_),
            "::",
            stringify!(cfg_2xch)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_461_ {
    pub cfg_2000: uint32,
    pub cfg_2xch: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_461_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_461_>(),
        8usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_461_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_461_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_461_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_461_>())).cfg_2000 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_461_),
            "::",
            stringify!(cfg_2000)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_461_>())).cfg_2xch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_461_),
            "::",
            stringify!(cfg_2xch)
        )
    );
}
pub const event403_t_EV403_CLEAR: event403_t = 4096;
pub const event403_t_EV403_DI_CHANGE: event403_t = 257;
pub const event403_t_EV403_PERIODIC: event403_t = 258;
pub type event403_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_403_ {
    pub cname: [[::std::os::raw::c_char; 10usize]; 48usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_403_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_403_>(),
        480usize,
        concat!("Size of: ", stringify!(DQCNAMES_403_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_403_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_403_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_403_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_403_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_403_ {
    pub chlst: [::std::os::raw::c_char; 4usize],
    pub cfg: uint32,
    pub val: [uint32; 2usize],
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_403_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_403_>(),
        32usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_403_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_403_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_403_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_403_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_403_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_403_>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_403_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_403_>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_403_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_403_>())).cvclk as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_403_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_403_>())).clclk as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_403_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_403_>())).trig as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_403_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_403_>())).clperint as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_403_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_403_ {
    pub cfg: uint32,
    pub val: [uint32; 6usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_403_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_403_>(),
        28usize,
        concat!("Size of: ", stringify!(DQINITPRM_403_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_403_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_403_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_403_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_403_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_403_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_403_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_403_ {
    pub cfg: uint32,
    pub val: [uint32; 6usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_403_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_403_>(),
        28usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_403_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_403_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_403_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_403_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_403_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_403_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_403_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_448_ {
    pub cname: [[::std::os::raw::c_char; 10usize]; 48usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_448_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_448_>(),
        480usize,
        concat!("Size of: ", stringify!(DQCNAMES_448_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_448_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_448_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_448_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_448_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_448_ {
    pub chlst: [::std::os::raw::c_char; 4usize],
    pub cfg: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_448_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_448_>(),
        24usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_448_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_448_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_448_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_448_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_448_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_448_>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_448_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_448_>())).cvclk as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_448_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_448_>())).clclk as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_448_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_448_>())).trig as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_448_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_448_>())).clperint as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_448_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_448_ {
    pub cfg: uint32,
    pub v_low: [uint16; 2usize],
    pub v_high: [uint16; 2usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_448_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_448_>(),
        12usize,
        concat!("Size of: ", stringify!(DQINITPRM_448_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_448_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_448_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_448_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_448_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_448_>())).v_low as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_448_),
            "::",
            stringify!(v_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_448_>())).v_high as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_448_),
            "::",
            stringify!(v_high)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_448_ {
    pub cal: [uint8; 4usize],
    pub r_offset: [uint16; 2usize],
    pub r_usrgnd: uint16,
    pub uv_2_5_ref: uint32,
    pub uv_low: ::std::os::raw::c_int,
    pub uv_high: ::std::os::raw::c_int,
    pub r_low: [uint16; 2usize],
    pub r_high: [uint16; 2usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_448_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_448_>(),
        30usize,
        concat!("Size of: ", stringify!(DQCALSET_448_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_448_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_448_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(cal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).r_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).r_usrgnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(r_usrgnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).uv_2_5_ref as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(uv_2_5_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).uv_low as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(uv_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).uv_high as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(uv_high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).r_low as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(r_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_448_>())).r_high as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_448_),
            "::",
            stringify!(r_high)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO448DATAOUT {
    pub cfgmask: uint32,
    pub cfg: uint32,
    pub adcdly: uint32,
    pub reserved0: uint32,
    pub reserved1: uint32,
    pub reserved2: uint32,
}
#[test]
fn bindgen_test_layout_DQDIO448DATAOUT() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO448DATAOUT>(),
        24usize,
        concat!("Size of: ", stringify!(DQDIO448DATAOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO448DATAOUT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO448DATAOUT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO448DATAOUT>())).cfgmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO448DATAOUT),
            "::",
            stringify!(cfgmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO448DATAOUT>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO448DATAOUT),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO448DATAOUT>())).adcdly as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO448DATAOUT),
            "::",
            stringify!(adcdly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO448DATAOUT>())).reserved0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO448DATAOUT),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO448DATAOUT>())).reserved1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO448DATAOUT),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO448DATAOUT>())).reserved2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO448DATAOUT),
            "::",
            stringify!(reserved2)
        )
    );
}
pub type pDQDIO448DATAOUT = *mut DQDIO448DATAOUT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_416_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 16usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_416_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_416_>(),
        320usize,
        concat!("Size of: ", stringify!(DQCNAMES_416_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_416_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_416_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_416_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_416_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_432_ {
    pub cname: [[::std::os::raw::c_char; 10usize]; 32usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_432_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_432_>(),
        320usize,
        concat!("Size of: ", stringify!(DQCNAMES_432_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_432_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_432_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_432_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_432_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_416_ {
    pub iint00: [int32; 16usize],
    pub iint11: [int32; 16usize],
    pub iext00: [int32; 16usize],
    pub iext11: [int32; 16usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_416_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_416_>(),
        256usize,
        concat!("Size of: ", stringify!(DQCALSET_416_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_416_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_416_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_416_>())).iint00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_416_),
            "::",
            stringify!(iint00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_416_>())).iint11 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_416_),
            "::",
            stringify!(iint11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_416_>())).iext00 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_416_),
            "::",
            stringify!(iext00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_416_>())).iext11 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_416_),
            "::",
            stringify!(iext11)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_432_ {
    pub i_offset: [int16; 32usize],
    pub i_gain: [int16; 32usize],
    pub v_offset: [int16; 32usize],
    pub v_gain: [int16; 32usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_432_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_432_>(),
        256usize,
        concat!("Size of: ", stringify!(DQCALSET_432_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_432_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_432_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_432_>())).i_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_432_),
            "::",
            stringify!(i_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_432_>())).i_gain as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_432_),
            "::",
            stringify!(i_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_432_>())).v_offset as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_432_),
            "::",
            stringify!(v_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_432_>())).v_gain as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_432_),
            "::",
            stringify!(v_gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_416_ {
    pub chlst: [uint32; 32usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub oclimit: [uint32; 16usize],
    pub uclimit: [uint32; 16usize],
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_416_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_416_>(),
        284usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_416_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_416_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_416_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).conf as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).chop as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).mask as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).clclk as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).cvclk as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).oclimit as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(oclimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).uclimit as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(uclimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).clperint as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_416_>())).trig as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_416_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_432_ {
    pub chlst: [uint32; 32usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub oclimit: [uint32; 32usize],
    pub uclimit: [uint32; 32usize],
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_432_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_432_>(),
        412usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_432_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_432_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_432_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).conf as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).chop as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).mask as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).clclk as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).cvclk as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).oclimit as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(oclimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).uclimit as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(uclimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).clperint as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_432_>())).trig as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_432_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_416_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_416_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_416_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_416_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_416_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_416_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_416_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_416_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_416_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_416_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_416_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_416_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_416_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_416_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_416_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_416_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_432_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_432_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_432_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_432_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_432_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_432_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_432_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_432_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_432_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_432_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_432_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_432_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_432_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_432_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_432_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_432_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO416DATAIN {
    pub cfg: int32,
    pub port0out: int32,
    pub adcsts: int32,
    pub port0ocs: int32,
    pub port0ucs: int32,
    pub rdcnt: int32,
    pub adcdata0: int32,
    pub adcdata1: int32,
    pub disdiv: int32,
    pub dout: int32,
    pub vccis: int32,
    pub ocl: [int32; 16usize],
    pub ucl: [int32; 16usize],
    pub adc: [int32; 16usize],
    pub cur: [int32; 16usize],
}
#[test]
fn bindgen_test_layout_DQDIO416DATAIN() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO416DATAIN>(),
        300usize,
        concat!("Size of: ", stringify!(DQDIO416DATAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO416DATAIN>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO416DATAIN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).port0out as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(port0out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).adcsts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(adcsts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).port0ocs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(port0ocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).port0ucs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(port0ucs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).rdcnt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).adcdata0 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(adcdata0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).adcdata1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(adcdata1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).disdiv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(disdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).dout as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(dout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).vccis as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(vccis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).ocl as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(ocl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).ucl as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(ucl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).adc as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(adc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAIN>())).cur as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAIN),
            "::",
            stringify!(cur)
        )
    );
}
pub type pDQDIO416DATAIN = *mut DQDIO416DATAIN;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO416DATAOUT {
    pub cfgset: int32,
    pub cfg: int32,
    pub discfgset: int32,
    pub discfg: int32,
    pub adcspdset: int32,
    pub adcspd: int32,
    pub port0ocmset: int32,
    pub port0ocm: int32,
    pub port0ucmset: int32,
    pub port0ucm: int32,
    pub rdcntset: int32,
    pub rdcnt: int32,
    pub adccfg0set: int32,
    pub adccfg0: int32,
    pub adccfg1set: int32,
    pub adccfg1: int32,
    pub disdivset: int32,
    pub disdiv: int32,
}
#[test]
fn bindgen_test_layout_DQDIO416DATAOUT() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO416DATAOUT>(),
        72usize,
        concat!("Size of: ", stringify!(DQDIO416DATAOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO416DATAOUT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO416DATAOUT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).cfgset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(cfgset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).discfgset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(discfgset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).discfg as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(discfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).adcspdset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(adcspdset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).adcspd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(adcspd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).port0ocmset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(port0ocmset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).port0ocm as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(port0ocm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).port0ucmset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(port0ucmset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).port0ucm as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(port0ucm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).rdcntset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(rdcntset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).rdcnt as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).adccfg0set as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(adccfg0set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).adccfg0 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(adccfg0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).adccfg1set as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(adccfg1set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).adccfg1 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(adccfg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).disdivset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(disdivset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO416DATAOUT>())).disdiv as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO416DATAOUT),
            "::",
            stringify!(disdiv)
        )
    );
}
pub type pDQDIO416DATAOUT = *mut DQDIO416DATAOUT;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO432DATAIN {
    pub portout: uint32,
    pub portocs: uint32,
    pub portucs: uint32,
    pub rdcnt: uint32,
    pub disdiv: uint32,
    pub dout: uint32,
    pub vccis: uint32,
    pub adc_i: [uint32; 32usize],
    pub adc_v: [uint32; 32usize],
}
#[test]
fn bindgen_test_layout_DQDIO432DATAIN() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO432DATAIN>(),
        284usize,
        concat!("Size of: ", stringify!(DQDIO432DATAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO432DATAIN>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO432DATAIN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).portout as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(portout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).portocs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(portocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).portucs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(portucs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).rdcnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).disdiv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(disdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).dout as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(dout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).vccis as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(vccis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).adc_i as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(adc_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAIN>())).adc_v as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAIN),
            "::",
            stringify!(adc_v)
        )
    );
}
pub type pDQDIO432DATAIN = *mut DQDIO432DATAIN;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO432PWM {
    pub channel: uint8,
    pub mode: uint8,
    pub duty_cycle: uint16,
}
#[test]
fn bindgen_test_layout_DQDIO432PWM() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO432PWM>(),
        4usize,
        concat!("Size of: ", stringify!(DQDIO432PWM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO432PWM>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO432PWM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432PWM>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432PWM),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432PWM>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432PWM),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432PWM>())).duty_cycle as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432PWM),
            "::",
            stringify!(duty_cycle)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO432CVTD {
    pub current: [f64; 32usize],
    pub voltage: [f64; 32usize],
}
#[test]
fn bindgen_test_layout_DQDIO432CVTD() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO432CVTD>(),
        512usize,
        concat!("Size of: ", stringify!(DQDIO432CVTD))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO432CVTD>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO432CVTD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432CVTD>())).current as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432CVTD),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432CVTD>())).voltage as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432CVTD),
            "::",
            stringify!(voltage)
        )
    );
}
pub type pDQDIO432CVTD = *mut DQDIO432CVTD;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO432DATAOUT {
    pub cfgmask: uint32,
    pub cfg: uint32,
    pub discfg: uint32,
    pub adcspd: uint32,
    pub portocm: uint32,
    pub portucm: uint32,
    pub rdcnt: uint32,
    pub disdiv: uint32,
}
#[test]
fn bindgen_test_layout_DQDIO432DATAOUT() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO432DATAOUT>(),
        32usize,
        concat!("Size of: ", stringify!(DQDIO432DATAOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO432DATAOUT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO432DATAOUT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).cfgmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(cfgmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).discfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(discfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).adcspd as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(adcspd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).portocm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(portocm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).portucm as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(portucm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).rdcnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO432DATAOUT>())).disdiv as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO432DATAOUT),
            "::",
            stringify!(disdiv)
        )
    );
}
pub type pDQDIO432DATAOUT = *mut DQDIO432DATAOUT;
pub const event449_t_EV449_CLEAR: event449_t = 4096;
pub const event449_t_EV449_DI_CHANGE: event449_t = 257;
pub const event449_t_EV449_PERIODIC: event449_t = 258;
pub type event449_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_449_ {
    pub cname: [[::std::os::raw::c_char; 10usize]; 48usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_449_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_449_>(),
        480usize,
        concat!("Size of: ", stringify!(DQCNAMES_449_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_449_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_449_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_449_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_449_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_449_ {
    pub chlst: [::std::os::raw::c_char; 4usize],
    pub cfg: [uint32; 3usize],
    pub val: [uint32; 2usize],
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_449_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_449_>(),
        36usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_449_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_449_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_449_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_449_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_449_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_449_>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_449_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_449_>())).val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_449_),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_449_>())).cvclk as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_449_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_449_>())).clclk as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_449_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_449_>())).trig as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_449_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_449_ {
    pub cfg: uint32,
    pub val: [uint32; 2usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_449_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_449_>(),
        12usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_449_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_449_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_449_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_449_>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_449_),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_449_>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_449_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_449_ {
    pub acdc: [uint32; 2usize],
    pub v_low: [uint16; 48usize],
    pub v_high: [uint16; 48usize],
    pub gain_deb: [uint16; 48usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_449_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_449_>(),
        296usize,
        concat!("Size of: ", stringify!(DQINITPRM_449_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_449_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_449_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_449_>())).acdc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_449_),
            "::",
            stringify!(acdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_449_>())).v_low as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_449_),
            "::",
            stringify!(v_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_449_>())).v_high as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_449_),
            "::",
            stringify!(v_high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_449_>())).gain_deb as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_449_),
            "::",
            stringify!(gain_deb)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM2_449_ {
    pub avg: [uint32; 2usize],
    pub res: [uint32; 2usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM2_449_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM2_449_>(),
        16usize,
        concat!("Size of: ", stringify!(DQINITPRM2_449_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM2_449_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM2_449_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM2_449_>())).avg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM2_449_),
            "::",
            stringify!(avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM2_449_>())).res as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM2_449_),
            "::",
            stringify!(res)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_449_ {
    pub offset: [[int16; 4usize]; 48usize],
    pub gain: [[uint16; 4usize]; 48usize],
    pub res: [uint16; 48usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_449_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_449_>(),
        864usize,
        concat!("Size of: ", stringify!(DQCALSET_449_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_449_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_449_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_449_>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_449_),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_449_>())).gain as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_449_),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_449_>())).res as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_449_),
            "::",
            stringify!(res)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO449DATAOUT {
    pub cfgmask: uint32,
    pub cfg: uint32,
    pub reserved0: uint32,
    pub reserved1: uint32,
    pub reserved2: uint32,
}
#[test]
fn bindgen_test_layout_DQDIO449DATAOUT() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO449DATAOUT>(),
        20usize,
        concat!("Size of: ", stringify!(DQDIO449DATAOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO449DATAOUT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO449DATAOUT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO449DATAOUT>())).cfgmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO449DATAOUT),
            "::",
            stringify!(cfgmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO449DATAOUT>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO449DATAOUT),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO449DATAOUT>())).reserved0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO449DATAOUT),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO449DATAOUT>())).reserved1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO449DATAOUT),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO449DATAOUT>())).reserved2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO449DATAOUT),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_462_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 12usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_462_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_462_>(),
        240usize,
        concat!("Size of: ", stringify!(DQCNAMES_462_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_462_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_462_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_462_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_462_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_462_ {
    pub offs: [[uint16; 5usize]; 12usize],
    pub gain: [[uint16; 5usize]; 12usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_462_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_462_>(),
        240usize,
        concat!("Size of: ", stringify!(DQCALSET_462_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_462_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_462_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_462_>())).offs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_462_),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_462_>())).gain as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_462_),
            "::",
            stringify!(gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_462_ {
    pub oclimit: [uint32; 12usize],
    pub uclimit: [uint32; 12usize],
    pub validation: [int32; 12usize],
    pub dcdccfg: uint32,
    pub dcdcx: [uint32; 4usize],
    pub rdcnt: int32,
    pub adc_cfg: [uint32; 5usize],
    pub discfg: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_462_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_462_>(),
        192usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_462_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_462_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_462_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).oclimit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(oclimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).uclimit as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(uclimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).validation as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(validation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).dcdccfg as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(dcdccfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).dcdcx as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(dcdcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).rdcnt as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).adc_cfg as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(adc_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_462_>())).discfg as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_462_),
            "::",
            stringify!(discfg)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_462_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_462_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_462_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_462_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_462_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_462_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_462_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_462_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_462_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_462_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_462_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_462_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_462_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_462_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_462_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_462_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO462DATAIN {
    pub cfg: int32,
    pub portout: int32,
    pub dissts: int32,
    pub portocs: int32,
    pub portucs: int32,
    pub adcsts: int32,
    pub adccfg: [int32; 5usize],
    pub rdcnt: int32,
}
#[test]
fn bindgen_test_layout_DQDIO462DATAIN() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO462DATAIN>(),
        48usize,
        concat!("Size of: ", stringify!(DQDIO462DATAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO462DATAIN>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO462DATAIN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).portout as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(portout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).dissts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(dissts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).portocs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(portocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).portucs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(portucs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).adcsts as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(adcsts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).adccfg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(adccfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAIN>())).rdcnt as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAIN),
            "::",
            stringify!(rdcnt)
        )
    );
}
pub type pDQDIO462DATAIN = *mut DQDIO462DATAIN;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQDIO462DATAOUT {
    pub cfgmask: int32,
    pub cfg: int32,
    pub portocm: int32,
    pub portucm: int32,
    pub rdcnt: int32,
    pub adccfg: [int32; 5usize],
    pub dcdccfg: int32,
    pub dcdcx: [int32; 4usize],
}
#[test]
fn bindgen_test_layout_DQDIO462DATAOUT() {
    assert_eq!(
        ::std::mem::size_of::<DQDIO462DATAOUT>(),
        60usize,
        concat!("Size of: ", stringify!(DQDIO462DATAOUT))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIO462DATAOUT>(),
        1usize,
        concat!("Alignment of ", stringify!(DQDIO462DATAOUT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).cfgmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(cfgmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).cfg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).portocm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(portocm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).portucm as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(portucm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).rdcnt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(rdcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).adccfg as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(adccfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).dcdccfg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(dcdccfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIO462DATAOUT>())).dcdcx as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIO462DATAOUT),
            "::",
            stringify!(dcdcx)
        )
    );
}
pub type pDQDIO462DATAOUT = *mut DQDIO462DATAOUT;
#[repr(C)]
pub struct DQMSG_501 {
    pub chnl: uint8,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQMSG_501() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_501>(),
        1usize,
        concat!("Size of: ", stringify!(DQMSG_501))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_501>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_501))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_501>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_501),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_501>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_501),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct DQMSG_501_L {
    pub tstamp: uint32,
    pub msglen: uint16,
    pub chnl: uint8,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQMSG_501_L() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_501_L>(),
        7usize,
        concat!("Size of: ", stringify!(DQMSG_501_L))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_501_L>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_501_L))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_501_L>())).tstamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_501_L),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_501_L>())).msglen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_501_L),
            "::",
            stringify!(msglen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_501_L>())).chnl as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_501_L),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_501_L>())).data as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_501_L),
            "::",
            stringify!(data)
        )
    );
}
pub const event501_t_EV501_CLEAR: event501_t = 4096;
pub const event501_t_EV501_TO: event501_t = 257;
pub const event501_t_EV501_IN_FIFO: event501_t = 258;
pub const event501_t_EV501_RX: event501_t = 259;
pub const event501_t_EV501_OUT_FIFO: event501_t = 260;
pub const event501_t_EV501_TX: event501_t = 261;
pub const event501_t_EV501_BUS_ERROR: event501_t = 262;
pub const event501_t_EV501_RX_OVERFLOW: event501_t = 263;
pub const event501_t_EV501_RX_UNXP: event501_t = 264;
pub const event501_t_EV501_TX_UNXP: event501_t = 265;
pub const event501_t_EV501_TO_TS: event501_t = 266;
pub const event501_t_EV501_ON_PATTERN: event501_t = 267;
pub type event501_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_501_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_501_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_501_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_501_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_501_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_501_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_501_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_501_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_508_ {
    pub cname: [[::std::os::raw::c_char; 24usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_508_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_508_>(),
        192usize,
        concat!("Size of: ", stringify!(DQCNAMES_508_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_508_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_508_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_508_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_508_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_501_ {
    pub chlst: [uint32; 16usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub hyst: [uint16; 2usize],
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_501_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_501_>(),
        96usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_501_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_501_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_501_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).conf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).chop as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).clclk as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).cvclk as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).hyst as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(hyst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).clperint as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_501_>())).trig as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_501_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_501_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_501_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_501_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_501_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_501_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_501_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_501_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_501_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_501_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_501_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_501_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_501_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_501_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_501_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_501_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_501_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_503_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_503_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_503_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_503_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_503_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_503_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_503_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_503_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCHNLSET_503_ {
    pub bt0: uint8,
    pub bt1: uint8,
    pub ocr: uint8,
    pub ac0: uint8,
    pub ac1: uint8,
    pub ac2: uint8,
    pub ac3: uint8,
    pub am0: uint8,
    pub am1: uint8,
    pub am2: uint8,
    pub am3: uint8,
    pub oper: uint8,
    pub mode: uint8,
    pub en: uint8,
    pub dnd: uint32,
}
#[test]
fn bindgen_test_layout_DQCHNLSET_503_() {
    assert_eq!(
        ::std::mem::size_of::<DQCHNLSET_503_>(),
        18usize,
        concat!("Size of: ", stringify!(DQCHNLSET_503_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCHNLSET_503_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCHNLSET_503_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).bt0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(bt0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).bt1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(bt1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).ocr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(ocr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).ac0 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(ac0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).ac1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(ac1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).ac2 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(ac2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).ac3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(ac3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).am0 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(am0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).am1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(am1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).am2 as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(am2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).am3 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(am3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).oper as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(oper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).en as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(en)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_503_>())).dnd as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_503_),
            "::",
            stringify!(dnd)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_503_ {
    pub chlst: [uint32; 8usize],
    pub sslst: [uint32; 8usize],
    pub ac: [uint32; 4usize],
    pub am: [uint32; 4usize],
    pub conf: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_503_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_503_>(),
        116usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_503_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_503_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_503_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).sslst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(sslst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).ac as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(ac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).am as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(am)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).conf as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).clclk as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).cvclk as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).trig as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_503_>())).clperint as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_503_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_503_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_503_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_503_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_503_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_503_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_503_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_503_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_503_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_503_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_503_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_503_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_503_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_503_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_503_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_503_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_503_),
            "::",
            stringify!(val)
        )
    );
}
pub const event503_t_EV503_CLEAR: event503_t = 4096;
pub const event503_t_EV503_RX_PERIODIC: event503_t = 257;
pub const event503_t_EV503_IN_FIFO: event503_t = 258;
pub const event503_t_EV503_OUT_FIFO: event503_t = 259;
pub const event503_t_EV503_ERROR_BUS: event503_t = 260;
pub const event503_t_EV503_ERROR_WARNING: event503_t = 261;
pub const event503_t_EV503_ERROR_PASSIVE: event503_t = 262;
pub const event503_t_EV503_ERROR_BUSOFF: event503_t = 263;
pub const event503_t_EV503_RX_OVERFLOW: event503_t = 264;
pub const event503_t_EV503_RX_UNXP: event503_t = 265;
pub const event503_t_EV503_TX_UNXP: event503_t = 266;
pub type event503_t = ::std::os::raw::c_uint;
#[repr(C, packed)]
pub struct DQMSG_503 {
    pub chnl: uint8,
    pub id: uint32,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQMSG_503() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_503>(),
        5usize,
        concat!("Size of: ", stringify!(DQMSG_503))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_503>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_503))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503>())).id as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503>())).data as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct DQMSG_503_L {
    pub tstamp: uint32,
    pub msglen: uint8,
    pub chnl: uint8,
    pub id: uint32,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQMSG_503_L() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_503_L>(),
        10usize,
        concat!("Size of: ", stringify!(DQMSG_503_L))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_503_L>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_503_L))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503_L>())).tstamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503_L),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503_L>())).msglen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503_L),
            "::",
            stringify!(msglen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503_L>())).chnl as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503_L),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503_L>())).id as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503_L),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_503_L>())).data as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_503_L),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct SL504_SETCFG {
    pub protocol: uint32,
    pub modeflags: uint32,
    pub physical: uint32,
    pub hdlc_flags: uint32,
    pub hdlc_encod: uint32,
    pub hdlc_baud: uint32,
    pub hdlc_clk_src: uint32,
    pub hdlc_crc_mode: uint32,
    pub hdlc_flt_mode: uint32,
    pub hdlc_filter: uint32,
    pub hdlc_preamble: uint32,
    pub hdlc_prmbl_sz: uint32,
    pub hdlc_idle_ch: uint32,
    pub async_baud: uint32,
    pub async_char_sz: uint32,
    pub async_start: uint32,
    pub async_stop: uint32,
    pub async_parity: uint32,
    pub async_msglen: uint32,
    pub async_tout: uint32,
}
#[test]
fn bindgen_test_layout_SL504_SETCFG() {
    assert_eq!(
        ::std::mem::size_of::<SL504_SETCFG>(),
        80usize,
        concat!("Size of: ", stringify!(SL504_SETCFG))
    );
    assert_eq!(
        ::std::mem::align_of::<SL504_SETCFG>(),
        1usize,
        concat!("Alignment of ", stringify!(SL504_SETCFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).protocol as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).modeflags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(modeflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).physical as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(physical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_encod as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_encod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_baud as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_baud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_clk_src as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_clk_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_crc_mode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_crc_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_flt_mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_flt_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_filter as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_preamble as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_preamble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_prmbl_sz as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_prmbl_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).hdlc_idle_ch as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(hdlc_idle_ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).async_baud as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(async_baud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).async_char_sz as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(async_char_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).async_start as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(async_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).async_stop as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(async_stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).async_parity as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(async_parity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).async_msglen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(async_msglen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_SETCFG>())).async_tout as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_SETCFG),
            "::",
            stringify!(async_tout)
        )
    );
}
pub type pSL504_SETCFG = *mut SL504_SETCFG;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct SL504_INT_STAT {
    pub cts: ::std::os::raw::c_int,
    pub dcd: ::std::os::raw::c_int,
    pub tx: ::std::os::raw::c_int,
    pub ftx: ::std::os::raw::c_int,
    pub rx: ::std::os::raw::c_int,
    pub frx: ::std::os::raw::c_int,
    pub frm_err: ::std::os::raw::c_int,
    pub ovr_err: ::std::os::raw::c_int,
    pub und_err: ::std::os::raw::c_int,
    pub prt_err: ::std::os::raw::c_int,
    pub tx_abort: ::std::os::raw::c_int,
    pub rx_abort: ::std::os::raw::c_int,
    pub short_err: ::std::os::raw::c_int,
    pub long_err: ::std::os::raw::c_int,
    pub lines: ::std::os::raw::c_int,
    pub err_stat: ::std::os::raw::c_int,
    pub brk: ::std::os::raw::c_int,
    pub exithunt: ::std::os::raw::c_int,
    pub rxidle: ::std::os::raw::c_int,
    pub rsv3: ::std::os::raw::c_int,
    pub rsv4: ::std::os::raw::c_int,
    pub rsv5: ::std::os::raw::c_int,
    pub rsv6: ::std::os::raw::c_int,
    pub rsv7: ::std::os::raw::c_int,
    pub tdmr: uint16,
    pub rdmr: uint16,
    pub ccsr: uint16,
    pub tcsr: uint16,
    pub rcsr: uint16,
    pub rsv10: uint16,
    pub rsv11: uint16,
    pub rsv12: uint16,
}
#[test]
fn bindgen_test_layout_SL504_INT_STAT() {
    assert_eq!(
        ::std::mem::size_of::<SL504_INT_STAT>(),
        112usize,
        concat!("Size of: ", stringify!(SL504_INT_STAT))
    );
    assert_eq!(
        ::std::mem::align_of::<SL504_INT_STAT>(),
        1usize,
        concat!("Alignment of ", stringify!(SL504_INT_STAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).cts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(cts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).dcd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(dcd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).ftx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(ftx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).frx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(frx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).frm_err as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(frm_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).ovr_err as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(ovr_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).und_err as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(und_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).prt_err as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(prt_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).tx_abort as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(tx_abort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rx_abort as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rx_abort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).short_err as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(short_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).long_err as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(long_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).lines as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).err_stat as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(err_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).brk as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(brk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).exithunt as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(exithunt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rxidle as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rxidle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv3 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv4 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv5 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv6 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv7 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).tdmr as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(tdmr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rdmr as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rdmr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).ccsr as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(ccsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).tcsr as *const _ as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(tcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rcsr as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv10 as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv11 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SL504_INT_STAT>())).rsv12 as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(SL504_INT_STAT),
            "::",
            stringify!(rsv12)
        )
    );
}
pub type pSL504_INT_STAT = *mut SL504_INT_STAT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_504_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_504_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_504_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_504_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_504_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_504_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_504_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_504_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_504_ {
    pub chlst: [uint32; 8usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub hyst: [uint16; 2usize],
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_504_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_504_>(),
        64usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_504_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_504_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_504_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).conf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).chop as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).mask as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).clclk as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).cvclk as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).hyst as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(hyst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).clperint as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_504_>())).trig as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_504_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_504_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_504_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_504_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_504_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_504_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_504_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_504_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_504_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_504_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_504_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_504_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_504_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_504_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_504_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_504_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_504_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct L514_CONFIG {
    pub ch_cfg: uint32,
    pub flags: uint32,
    pub clk_source: uint32,
    pub baud_rate: uint32,
    pub m_word_sz: uint32,
    pub m_debounce: uint32,
    pub m_trigger: uint32,
    pub m_Tv: uint32,
    pub m_Tp: uint32,
    pub m_Tm: uint32,
    pub s_word_sz: uint32,
    pub s_debounce: uint32,
    pub s_trigger: uint32,
    pub s_Tv: uint32,
    pub s_Tp: uint32,
    pub s_Tm: uint32,
}
#[test]
fn bindgen_test_layout_L514_CONFIG() {
    assert_eq!(
        ::std::mem::size_of::<L514_CONFIG>(),
        64usize,
        concat!("Size of: ", stringify!(L514_CONFIG))
    );
    assert_eq!(
        ::std::mem::align_of::<L514_CONFIG>(),
        4usize,
        concat!("Alignment of ", stringify!(L514_CONFIG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).ch_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(ch_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).clk_source as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(clk_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).baud_rate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(baud_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).m_word_sz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(m_word_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).m_debounce as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(m_debounce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).m_trigger as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(m_trigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).m_Tv as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(m_Tv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).m_Tp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(m_Tp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).m_Tm as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(m_Tm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).s_word_sz as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(s_word_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).s_debounce as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(s_debounce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).s_trigger as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(s_trigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).s_Tv as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(s_Tv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).s_Tp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(s_Tp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_CONFIG>())).s_Tm as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_CONFIG),
            "::",
            stringify!(s_Tm)
        )
    );
}
pub type pL514_CONFIG = *mut L514_CONFIG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct L514_STATUS {
    pub ch_status: uint32,
    pub flags: uint32,
}
#[test]
fn bindgen_test_layout_L514_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<L514_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(L514_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<L514_STATUS>(),
        4usize,
        concat!("Alignment of ", stringify!(L514_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_STATUS>())).ch_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_STATUS),
            "::",
            stringify!(ch_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<L514_STATUS>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(L514_STATUS),
            "::",
            stringify!(flags)
        )
    );
}
pub type pL514_STATUS = *mut L514_STATUS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_514 {
    pub cname: [[::std::os::raw::c_char; 16usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_514() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_514>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_514))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_514>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_514))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_514>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_514),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_514 {
    pub cal: [uint8; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_514() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_514>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_514))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_514>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_514))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_514>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_514),
            "::",
            stringify!(cal)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_514 {
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_514() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_514>(),
        4usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_514))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_514>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_514))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_514>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_514),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_514 {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_514() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_514>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_514))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_514>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_514))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_514>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_514),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_514 {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_514() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_514>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_514))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_514>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_514))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_514>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_514),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct MCTPARAM {
    pub mctidle: uint32,
    pub mctstart: uint32,
    pub mctstop: uint32,
    pub mctdbnc: uint32,
    pub mctsudat: uint32,
    pub mcthigh: uint32,
}
#[test]
fn bindgen_test_layout_MCTPARAM() {
    assert_eq!(
        ::std::mem::size_of::<MCTPARAM>(),
        24usize,
        concat!("Size of: ", stringify!(MCTPARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<MCTPARAM>(),
        1usize,
        concat!("Alignment of ", stringify!(MCTPARAM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MCTPARAM>())).mctidle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MCTPARAM),
            "::",
            stringify!(mctidle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MCTPARAM>())).mctstart as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MCTPARAM),
            "::",
            stringify!(mctstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MCTPARAM>())).mctstop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MCTPARAM),
            "::",
            stringify!(mctstop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MCTPARAM>())).mctdbnc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MCTPARAM),
            "::",
            stringify!(mctdbnc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MCTPARAM>())).mctsudat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MCTPARAM),
            "::",
            stringify!(mctsudat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MCTPARAM>())).mcthigh as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MCTPARAM),
            "::",
            stringify!(mcthigh)
        )
    );
}
pub type pMCTPARAM = *mut MCTPARAM;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct I2C534CFG {
    pub flags: uint32,
    pub clock: uint32,
    pub ttl_level: f32,
    pub tx_lines: uint32,
    pub mctprm: MCTPARAM,
    pub master_cfg: uint32,
    pub master_idle_delay: uint32,
    pub master_byte_delay: uint32,
    pub master_max_sync_delay: uint32,
    pub master_datasz_unfifo: uint32,
    pub master_to_cfg: uint32,
    pub master_wait_bm_fifo_ms: uint32,
    pub master_xdcp_device_type: uint32,
    pub slave_cfg: uint32,
    pub slave_addr: uint32,
    pub slave_data: uint32,
    pub slave_sync_dly: uint32,
    pub slave_ack_dly: uint32,
    pub slave_max_ack: uint32,
    pub slave_tx_reg_size: uint32,
}
#[test]
fn bindgen_test_layout_I2C534CFG() {
    assert_eq!(
        ::std::mem::size_of::<I2C534CFG>(),
        100usize,
        concat!("Size of: ", stringify!(I2C534CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<I2C534CFG>(),
        1usize,
        concat!("Alignment of ", stringify!(I2C534CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).clock as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(clock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).ttl_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(ttl_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).tx_lines as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(tx_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).mctprm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(mctprm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).master_cfg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).master_idle_delay as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_idle_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).master_byte_delay as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_byte_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).master_max_sync_delay as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_max_sync_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).master_datasz_unfifo as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_datasz_unfifo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).master_to_cfg as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_to_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<I2C534CFG>())).master_wait_bm_fifo_ms as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_wait_bm_fifo_ms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<I2C534CFG>())).master_xdcp_device_type as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(master_xdcp_device_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).slave_cfg as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(slave_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).slave_addr as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(slave_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).slave_data as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(slave_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).slave_sync_dly as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(slave_sync_dly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).slave_ack_dly as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(slave_ack_dly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).slave_max_ack as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(slave_max_ack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534CFG>())).slave_tx_reg_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534CFG),
            "::",
            stringify!(slave_tx_reg_size)
        )
    );
}
pub type pI2C534CFG = *mut I2C534CFG;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct I2C534STS {
    pub hw_stat: uint32,
    pub pin_stat: uint32,
    pub drv_stat: uint32,
}
#[test]
fn bindgen_test_layout_I2C534STS() {
    assert_eq!(
        ::std::mem::size_of::<I2C534STS>(),
        12usize,
        concat!("Size of: ", stringify!(I2C534STS))
    );
    assert_eq!(
        ::std::mem::align_of::<I2C534STS>(),
        1usize,
        concat!("Alignment of ", stringify!(I2C534STS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534STS>())).hw_stat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534STS),
            "::",
            stringify!(hw_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534STS>())).pin_stat as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534STS),
            "::",
            stringify!(pin_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534STS>())).drv_stat as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534STS),
            "::",
            stringify!(drv_stat)
        )
    );
}
pub type pI2C534STS = *mut I2C534STS;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct I2C534_CMD {
    pub command: uint32,
    pub data_size: ::std::os::raw::c_int,
    pub wrrd_rx_size: ::std::os::raw::c_int,
    pub fifo_sz: ::std::os::raw::c_int,
    pub transmitted: ::std::os::raw::c_int,
    pub available: ::std::os::raw::c_int,
    pub crc_stat: ::std::os::raw::c_int,
    pub data8: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_I2C534_CMD() {
    assert_eq!(
        ::std::mem::size_of::<I2C534_CMD>(),
        36usize,
        concat!("Size of: ", stringify!(I2C534_CMD))
    );
    assert_eq!(
        ::std::mem::align_of::<I2C534_CMD>(),
        1usize,
        concat!("Alignment of ", stringify!(I2C534_CMD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).command as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).data_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).wrrd_rx_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(wrrd_rx_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).fifo_sz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(fifo_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).transmitted as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(transmitted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).available as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(available)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).crc_stat as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(crc_stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<I2C534_CMD>())).data8 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C534_CMD),
            "::",
            stringify!(data8)
        )
    );
}
pub type pI2C534_CMD = *mut I2C534_CMD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_534 {
    pub cname: [[::std::os::raw::c_char; 16usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_534() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_534>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_534))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_534>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_534))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_534>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_534),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_534 {
    pub cal: [uint8; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_534() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_534>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_534))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_534>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_534))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_534>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_534),
            "::",
            stringify!(cal)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_534 {
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_534() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_534>(),
        4usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_534))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_534>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_534))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_534>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_534),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_534 {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_534() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_534>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_534))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_534>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_534))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_534>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_534),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_534 {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_534() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_534>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_534))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_534>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_534))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_534>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_534),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_550_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 1usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_550_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_550_>(),
        32usize,
        concat!("Size of: ", stringify!(DQCNAMES_550_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_550_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_550_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_550_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_550_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_550_ {
    pub mask: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_550_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_550_>(),
        4usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_550_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_550_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_550_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_550_>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_550_),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_550_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_550_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_550_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_550_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_550_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_550_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_550_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_550_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_550_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_550_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_550_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_550_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_550_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_550_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_550_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_550_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ553Control {
    pub rt_tx_block: uint32,
    pub rt_rx_block: uint32,
    pub rt_enabled: uint32,
    pub rt: uint32,
    pub sa: uint32,
    pub control_entry: uint32,
    pub rt_r_timing: uint32,
}
#[test]
fn bindgen_test_layout_DQ553Control() {
    assert_eq!(
        ::std::mem::size_of::<DQ553Control>(),
        28usize,
        concat!("Size of: ", stringify!(DQ553Control))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ553Control>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ553Control))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553Control>())).rt_tx_block as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553Control),
            "::",
            stringify!(rt_tx_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553Control>())).rt_rx_block as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553Control),
            "::",
            stringify!(rt_rx_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553Control>())).rt_enabled as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553Control),
            "::",
            stringify!(rt_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553Control>())).rt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553Control),
            "::",
            stringify!(rt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553Control>())).sa as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553Control),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553Control>())).control_entry as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553Control),
            "::",
            stringify!(control_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553Control>())).rt_r_timing as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553Control),
            "::",
            stringify!(rt_r_timing)
        )
    );
}
pub type pDQ553Control = *mut DQ553Control;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ553DbgSel {
    pub sync_mask: uint32,
    pub syncsel: uint32,
    pub dbgsel0: uint32,
    pub dbgsel1: uint32,
}
#[test]
fn bindgen_test_layout_DQ553DbgSel() {
    assert_eq!(
        ::std::mem::size_of::<DQ553DbgSel>(),
        16usize,
        concat!("Size of: ", stringify!(DQ553DbgSel))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ553DbgSel>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ553DbgSel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553DbgSel>())).sync_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553DbgSel),
            "::",
            stringify!(sync_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553DbgSel>())).syncsel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553DbgSel),
            "::",
            stringify!(syncsel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553DbgSel>())).dbgsel0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553DbgSel),
            "::",
            stringify!(dbgsel0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553DbgSel>())).dbgsel1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553DbgSel),
            "::",
            stringify!(dbgsel1)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct BCCB_Control {
    pub flags0: uint16,
    pub flags1: uint16,
    pub flags2: uint16,
    pub rsv3: uint16,
    pub cmd1: uint16,
    pub cmd2: uint16,
    pub sts1_or: uint16,
    pub sts1_and: uint16,
    pub sts1_val: uint16,
    pub sts2_or: uint16,
    pub sts2_and: uint16,
    pub sts2_val: uint16,
    pub rsv12: uint16,
    pub rsv13: uint16,
    pub rsv14: uint16,
    pub rsv15: uint16,
    pub rx_data_tmin: [uint16; 32usize],
    pub tmax: [uint16; 32usize],
}
#[test]
fn bindgen_test_layout_BCCB_Control() {
    assert_eq!(
        ::std::mem::size_of::<BCCB_Control>(),
        160usize,
        concat!("Size of: ", stringify!(BCCB_Control))
    );
    assert_eq!(
        ::std::mem::align_of::<BCCB_Control>(),
        1usize,
        concat!("Alignment of ", stringify!(BCCB_Control))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).flags0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(flags0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).flags1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(flags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).flags2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).rsv3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(rsv3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).cmd1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(cmd1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).cmd2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(cmd2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).sts1_or as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(sts1_or)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).sts1_and as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(sts1_and)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).sts1_val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(sts1_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).sts2_or as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(sts2_or)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).sts2_and as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(sts2_and)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).sts2_val as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(sts2_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).rsv12 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(rsv12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).rsv13 as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(rsv13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).rsv14 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(rsv14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).rsv15 as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(rsv15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).rx_data_tmin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(rx_data_tmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Control>())).tmax as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Control),
            "::",
            stringify!(tmax)
        )
    );
}
pub type pBCCB_Control = *mut BCCB_Control;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct BCCB_Status {
    pub sts1: uint16,
    pub sts2: uint16,
    pub tsmsb: uint16,
    pub tslsb: uint16,
    pub rsv84: uint16,
    pub rsv85: uint16,
    pub errsts0: uint16,
    pub errsts1: uint16,
    pub rx_data: [uint16; 32usize],
}
#[test]
fn bindgen_test_layout_BCCB_Status() {
    assert_eq!(
        ::std::mem::size_of::<BCCB_Status>(),
        80usize,
        concat!("Size of: ", stringify!(BCCB_Status))
    );
    assert_eq!(
        ::std::mem::align_of::<BCCB_Status>(),
        1usize,
        concat!("Alignment of ", stringify!(BCCB_Status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).sts1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(sts1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).sts2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(sts2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).tsmsb as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(tsmsb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).tslsb as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(tslsb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).rsv84 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(rsv84)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).rsv85 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(rsv85)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).errsts0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(errsts0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).errsts1 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(errsts1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BCCB_Status>())).rx_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BCCB_Status),
            "::",
            stringify!(rx_data)
        )
    );
}
pub type pBCCB_Status = *mut BCCB_Status;
#[repr(C, packed)]
pub struct DQBM553Message {
    pub channel: uint8,
    pub stat: uint8,
    pub size: uint16,
    pub data: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQBM553Message() {
    assert_eq!(
        ::std::mem::size_of::<DQBM553Message>(),
        4usize,
        concat!("Size of: ", stringify!(DQBM553Message))
    );
    assert_eq!(
        ::std::mem::align_of::<DQBM553Message>(),
        1usize,
        concat!("Alignment of ", stringify!(DQBM553Message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Message>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Message),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Message>())).stat as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Message),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Message>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Message),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Message>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Message),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQBM553Message = *mut DQBM553Message;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQBM553MessageStor {
    pub channel: uint8,
    pub stat: uint8,
    pub size: uint16,
    pub data: [uint32; 36usize],
    pub wxpd: [uint32; 27usize],
    pub timestamp: uint32,
}
#[test]
fn bindgen_test_layout_DQBM553MessageStor() {
    assert_eq!(
        ::std::mem::size_of::<DQBM553MessageStor>(),
        260usize,
        concat!("Size of: ", stringify!(DQBM553MessageStor))
    );
    assert_eq!(
        ::std::mem::align_of::<DQBM553MessageStor>(),
        1usize,
        concat!("Alignment of ", stringify!(DQBM553MessageStor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553MessageStor>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553MessageStor),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553MessageStor>())).stat as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553MessageStor),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553MessageStor>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553MessageStor),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553MessageStor>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553MessageStor),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553MessageStor>())).wxpd as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553MessageStor),
            "::",
            stringify!(wxpd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553MessageStor>())).timestamp as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553MessageStor),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQBM553RTSAEntry {
    pub channel: uint8,
    pub rt: uint8,
    pub sa: uint8,
    pub size: uint8,
}
#[test]
fn bindgen_test_layout_DQBM553RTSAEntry() {
    assert_eq!(
        ::std::mem::size_of::<DQBM553RTSAEntry>(),
        4usize,
        concat!("Size of: ", stringify!(DQBM553RTSAEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<DQBM553RTSAEntry>(),
        1usize,
        concat!("Alignment of ", stringify!(DQBM553RTSAEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553RTSAEntry>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553RTSAEntry),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553RTSAEntry>())).rt as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553RTSAEntry),
            "::",
            stringify!(rt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553RTSAEntry>())).sa as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553RTSAEntry),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553RTSAEntry>())).size as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553RTSAEntry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQBM553Filter {
    pub channel: uint8,
    pub rt: uint8,
    pub sa: uint8,
    pub size: uint8,
    pub data: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQBM553Filter() {
    assert_eq!(
        ::std::mem::size_of::<DQBM553Filter>(),
        20usize,
        concat!("Size of: ", stringify!(DQBM553Filter))
    );
    assert_eq!(
        ::std::mem::align_of::<DQBM553Filter>(),
        1usize,
        concat!("Alignment of ", stringify!(DQBM553Filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Filter>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Filter),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Filter>())).rt as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Filter),
            "::",
            stringify!(rt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Filter>())).sa as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Filter),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Filter>())).size as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Filter),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Filter>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Filter),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQBM553Filter = *mut DQBM553Filter;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQBM553Trigger {
    pub channel: uint8,
    pub rt: uint8,
    pub sa: uint8,
    pub size: uint8,
    pub data: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQBM553Trigger() {
    assert_eq!(
        ::std::mem::size_of::<DQBM553Trigger>(),
        20usize,
        concat!("Size of: ", stringify!(DQBM553Trigger))
    );
    assert_eq!(
        ::std::mem::align_of::<DQBM553Trigger>(),
        1usize,
        concat!("Alignment of ", stringify!(DQBM553Trigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Trigger>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Trigger),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Trigger>())).rt as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Trigger),
            "::",
            stringify!(rt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Trigger>())).sa as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Trigger),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Trigger>())).size as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Trigger),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQBM553Trigger>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQBM553Trigger),
            "::",
            stringify!(data)
        )
    );
}
pub type pDQBM553Trigger = *mut DQBM553Trigger;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ553ExtTrigger {
    pub channel: uint32,
    pub rtsa: uint32,
    pub flags: uint32,
    pub trig_in: uint32,
    pub trig_in_src: uint32,
    pub trig_in_mode: uint32,
    pub trig_in_prm: [uint32; 36usize],
    pub trig_out: uint32,
    pub trig_out_dest: uint32,
    pub trig_out_mode: uint32,
    pub trig_out_prm: [uint32; 36usize],
}
#[test]
fn bindgen_test_layout_DQ553ExtTrigger() {
    assert_eq!(
        ::std::mem::size_of::<DQ553ExtTrigger>(),
        324usize,
        concat!("Size of: ", stringify!(DQ553ExtTrigger))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ553ExtTrigger>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ553ExtTrigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).rtsa as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(rtsa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_in as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_in_src as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_in_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_in_mode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_in_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_in_prm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_in_prm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_out as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_out_dest as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_out_dest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_out_mode as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_out_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ553ExtTrigger>())).trig_out_prm as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ553ExtTrigger),
            "::",
            stringify!(trig_out_prm)
        )
    );
}
pub type pDQ553ExtTrigger = *mut DQ553ExtTrigger;
pub const event553_t_EV553_CLEAR: event553_t = 4096;
pub const event553_t_EV553_NO_ACTIVITY: event553_t = 257;
pub const event553_t_EV553_IN_FIFO: event553_t = 258;
pub const event553_t_EV553_OUT_FIFO: event553_t = 259;
pub const event553_t_EV553_BUS_ERROR: event553_t = 260;
pub const event553_t_EV553_FSM_ERROR: event553_t = 261;
pub const event553_t_EV553_BUS_CHANGED: event553_t = 262;
pub const event553_t_EV553_MD_SHUTDOWN: event553_t = 263;
pub const event553_t_EV553_MD_SYNCHRONIZE: event553_t = 264;
pub const event553_t_EV553_MD_RESET: event553_t = 265;
pub const event553_t_EV553_MD_MISC: event553_t = 266;
pub const event553_t_EV553_RX: event553_t = 267;
pub const event553_t_EV553_TX: event553_t = 268;
pub const event553_t_EV553_BCST_RX: event553_t = 269;
pub const event553_t_EV553_BCST_TX: event553_t = 270;
pub const event553_t_EV553_MD: event553_t = 271;
pub const event553_t_EV553_BC_ERROR: event553_t = 272;
pub const event553_t_EV553_BC_BUS: event553_t = 273;
pub const event553_t_EV553_BC_IRQ: event553_t = 274;
pub const event553_t_EV553_BC_OVERRUN: event553_t = 275;
pub const event553_t_EV553_BC_CMD_ERR: event553_t = 276;
pub const event553_t_EV553_BC_HEARTBEAT: event553_t = 277;
pub const event553_t_EV553_RT_CUST_LUT: event553_t = 278;
pub const event553_t_EV553_RT_CUST_LUT1: event553_t = 279;
pub const event553_t_EV553_RT_CUST_LUT2: event553_t = 280;
pub const event553_t_EV553_RT_CUST_LUT3: event553_t = 281;
pub const event553_t_EV553_RT_PERIODIC: event553_t = 282;
pub const event553_t_EV553_BC_PERIODIC: event553_t = 283;
pub const event553_t_EV553_TRIG_EXT0: event553_t = 284;
pub const event553_t_EV553_TRIG_EXT1: event553_t = 285;
pub type event553_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_553_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_553_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_553_>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_553_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_553_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_553_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_553_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_553_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_553_ {
    pub rxchlst: [uint32; 2usize],
    pub txchlst: [uint32; 2usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_553_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_553_>(),
        44usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_553_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_553_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_553_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).rxchlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(rxchlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).txchlst as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(txchlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).conf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).chop as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).mask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).clclk as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).cvclk as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).clperint as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_553_>())).trig as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_553_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_553_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_553_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_553_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_553_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_553_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_553_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_553_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_553_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_553_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_553_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_553_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_553_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_553_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_553_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_553_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_553_),
            "::",
            stringify!(val)
        )
    );
}
pub const _tSL553CommandType_SL553CmdBCRT: _tSL553CommandType = 1;
pub const _tSL553CommandType_SL553CmdRTBC: _tSL553CommandType = 2;
pub const _tSL553CommandType_SL553CmdRTRT: _tSL553CommandType = 3;
pub const _tSL553CommandType_SL553CmdModeTxNoData: _tSL553CommandType = 4;
pub const _tSL553CommandType_SL553CmdModeTxWithData: _tSL553CommandType = 5;
pub const _tSL553CommandType_SL553CmdModeRxWithData: _tSL553CommandType = 6;
pub const _tSL553CommandType_SL553CmdBCRTBroadcast: _tSL553CommandType = 7;
pub const _tSL553CommandType_SL553CmdRTRTBroadcast: _tSL553CommandType = 8;
pub const _tSL553CommandType_SL553CmdModeTxNoDataBroadcast: _tSL553CommandType = 9;
pub const _tSL553CommandType_SL553CmdModeRxWithDataBroadcast: _tSL553CommandType = 10;
pub type _tSL553CommandType = ::std::os::raw::c_uint;
pub use self::_tSL553CommandType as tSL553CommandType;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQMSG_566 {
    pub chnl: uint8,
    pub data: uint32,
}
#[test]
fn bindgen_test_layout_DQMSG_566() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_566>(),
        5usize,
        concat!("Size of: ", stringify!(DQMSG_566))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_566>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_566))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_566>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_566),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_566>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_566),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQMSG_566_L {
    pub tstamp: uint32,
    pub chnl: uint8,
    pub data: uint32,
}
#[test]
fn bindgen_test_layout_DQMSG_566_L() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_566_L>(),
        9usize,
        concat!("Size of: ", stringify!(DQMSG_566_L))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_566_L>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_566_L))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_566_L>())).tstamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_566_L),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_566_L>())).chnl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_566_L),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_566_L>())).data as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_566_L),
            "::",
            stringify!(data)
        )
    );
}
pub const event566_t_EV566_CLEAR: event566_t = 4096;
pub const event566_t_EV566_NO_ACTIVITY: event566_t = 257;
pub const event566_t_EV566_IN_FIFO: event566_t = 258;
pub const event566_t_EV566_OUT_FIFO: event566_t = 259;
pub const event566_t_EV566_LABEL: event566_t = 260;
pub const event566_t_EV566_BLK_CHANGE: event566_t = 261;
pub const event566_t_EV566_LOOPBACK_ERR: event566_t = 262;
pub const event566_t_EV566_PARITY_ERR: event566_t = 263;
pub const event566_t_EV566_SCHED_ERR: event566_t = 264;
pub const event566_t_EV566_PERIODIC: event566_t = 265;
pub const event566_t_EV566_TRIG_EXT0: event566_t = 266;
pub type event566_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_566_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 12usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_566_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_566_>(),
        384usize,
        concat!("Size of: ", stringify!(DQCNAMES_566_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_566_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_566_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_566_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_566_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_566_ {
    pub rxchlst: [uint32; 12usize],
    pub txchlst: [uint32; 6usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_566_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_566_>(),
        100usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_566_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_566_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_566_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).rxchlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(rxchlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).txchlst as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(txchlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).conf as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).chop as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).mask as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).clclk as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).cvclk as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).clperint as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_566_>())).trig as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_566_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_566_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_566_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_566_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_566_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_566_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_566_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_566_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_566_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_566_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_566_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_566_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_566_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_566_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_566_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_566_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_566_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_516_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 24usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_516_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_516_>(),
        384usize,
        concat!("Size of: ", stringify!(DQCNAMES_516_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_516_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_516_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_516_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_516_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_516_ {
    pub rxchlst: [uint32; 24usize],
    pub txchlst: [uint32; 16usize],
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_516_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_516_>(),
        188usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_516_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_516_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_516_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).rxchlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(rxchlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).txchlst as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(txchlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).conf as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).chop as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).mask as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).clclk as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).cvclk as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).clperint as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_516_>())).trig as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_516_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_516_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_516_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_516_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_516_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_516_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_516_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_516_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_516_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_516_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_516_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_516_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_516_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_516_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_516_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_516_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_516_),
            "::",
            stringify!(val)
        )
    );
}
pub const event601_t_EV601_CLEAR: event601_t = 256;
pub const event601_t_EV601_COUNT_COMPLETE: event601_t = 257;
pub const event601_t_EV601_CR0_LESSTHEN: event601_t = 258;
pub const event601_t_EV601_CR0_EXCEEDED: event601_t = 259;
pub const event601_t_EV601_CR1_EXCEEDED: event601_t = 260;
pub const event601_t_EV601_DATA_AVAILABLE: event601_t = 261;
pub const event601_t_EV601_INP_TRANSITION: event601_t = 262;
pub const event601_t_EV601_GATE_TRANSITION: event601_t = 263;
pub type event601_t = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct TR602_CFG {
    pub event_cfg: uint32,
    pub event_prm: uint32,
    pub event_val: uint32,
    pub event_sub0_dly: uint32,
    pub event_sub1_dly: uint32,
}
#[test]
fn bindgen_test_layout_TR602_CFG() {
    assert_eq!(
        ::std::mem::size_of::<TR602_CFG>(),
        20usize,
        concat!("Size of: ", stringify!(TR602_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<TR602_CFG>(),
        1usize,
        concat!("Alignment of ", stringify!(TR602_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TR602_CFG>())).event_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TR602_CFG),
            "::",
            stringify!(event_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TR602_CFG>())).event_prm as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TR602_CFG),
            "::",
            stringify!(event_prm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TR602_CFG>())).event_val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TR602_CFG),
            "::",
            stringify!(event_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TR602_CFG>())).event_sub0_dly as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TR602_CFG),
            "::",
            stringify!(event_sub0_dly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TR602_CFG>())).event_sub1_dly as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TR602_CFG),
            "::",
            stringify!(event_sub1_dly)
        )
    );
}
pub type pTR602_CFG = *mut TR602_CFG;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CT602_GPSS_CFG {
    pub mode: uint32,
    pub flags: uint32,
    pub baud: uint32,
    pub word_len: uint32,
    pub frame_len: uint32,
    pub en_clock1: uint32,
    pub en_ack1: uint32,
    pub dbc_fs: uint32,
    pub dbc_data: uint32,
    pub clk_edge: uint32,
    pub data_mode: uint32,
    pub trig_mode: uint32,
    pub fs_mode: uint32,
    pub fs_len: uint32,
    pub frame_clk: uint32,
    pub wordlen_prg: uint32,
    pub wordlen_shift: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CT602_GPSS_CFG() {
    assert_eq!(
        ::std::mem::size_of::<CT602_GPSS_CFG>(),
        68usize,
        concat!("Size of: ", stringify!(CT602_GPSS_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<CT602_GPSS_CFG>(),
        1usize,
        concat!("Alignment of ", stringify!(CT602_GPSS_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).baud as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(baud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).word_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(word_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).frame_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(frame_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).en_clock1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(en_clock1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).en_ack1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(en_ack1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).dbc_fs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(dbc_fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).dbc_data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(dbc_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).clk_edge as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(clk_edge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).data_mode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(data_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).trig_mode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(trig_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).fs_mode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(fs_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).fs_len as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(fs_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).frame_clk as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(frame_clk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).wordlen_prg as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(wordlen_prg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT602_GPSS_CFG>())).wordlen_shift as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CT602_GPSS_CFG),
            "::",
            stringify!(wordlen_shift)
        )
    );
}
pub type pCT602_GPSS_CFG = *mut CT602_GPSS_CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_601_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 8usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_601_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_601_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_601_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_601_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_601_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_601_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_601_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_601_ {
    pub placeholder: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_601_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_601_>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_601_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_601_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_601_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_601_>())).placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_601_),
            "::",
            stringify!(placeholder)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_601_ {
    pub chlst: [uint32; 16usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_601_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_601_>(),
        84usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_601_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_601_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_601_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_601_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_601_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_601_>())).conf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_601_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_601_>())).cvclk as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_601_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_601_>())).clclk as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_601_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_601_>())).trig as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_601_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_601_>())).clperint as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_601_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCHNLSET_601_ {
    pub startmode: uint32,
    pub sampwidth: uint32,
    pub ps: uint32,
    pub pc: uint32,
    pub cr0: uint32,
    pub cr1: uint32,
    pub tbr: uint32,
    pub dbg: uint32,
    pub dbc: uint32,
    pub ctr: uint32,
    pub ccr: uint32,
    pub lr: uint32,
    pub ier: uint32,
}
#[test]
fn bindgen_test_layout_DQCHNLSET_601_() {
    assert_eq!(
        ::std::mem::size_of::<DQCHNLSET_601_>(),
        52usize,
        concat!("Size of: ", stringify!(DQCHNLSET_601_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCHNLSET_601_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCHNLSET_601_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).startmode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(startmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).sampwidth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(sampwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).ps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).pc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).cr0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(cr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).cr1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(cr1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).tbr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(tbr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).dbg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(dbg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).dbc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(dbc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).ctr as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(ctr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).ccr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(ccr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).lr as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(lr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_601_>())).ier as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_601_),
            "::",
            stringify!(ier)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQWMSET_601_ {
    pub in_wm: uint16,
    pub out_wm: uint16,
}
#[test]
fn bindgen_test_layout_DQWMSET_601_() {
    assert_eq!(
        ::std::mem::size_of::<DQWMSET_601_>(),
        4usize,
        concat!("Size of: ", stringify!(DQWMSET_601_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWMSET_601_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWMSET_601_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWMSET_601_>())).in_wm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWMSET_601_),
            "::",
            stringify!(in_wm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWMSET_601_>())).out_wm as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWMSET_601_),
            "::",
            stringify!(out_wm)
        )
    );
}
#[repr(C, packed)]
pub struct DQMSG_601 {
    pub chnl: uint8,
    pub data: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQMSG_601() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_601>(),
        1usize,
        concat!("Size of: ", stringify!(DQMSG_601))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_601>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_601))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_601>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_601),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_601>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_601),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
pub struct DQMSG_601_L {
    pub tstamp: uint32,
    pub msglen: uint8,
    pub chnl: uint8,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout_DQMSG_601_L() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_601_L>(),
        6usize,
        concat!("Size of: ", stringify!(DQMSG_601_L))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_601_L>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_601_L))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_601_L>())).tstamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_601_L),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_601_L>())).msglen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_601_L),
            "::",
            stringify!(msglen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_601_L>())).chnl as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_601_L),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_601_L>())).data as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_601_L),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_M272_CFG {
    pub mask: uint32,
    pub config: uint32,
    pub param0: uint32,
    pub param1: uint32,
    pub prf_1kmin: uint32,
    pub prf_1kmax: uint32,
    pub prf_1klen: uint32,
    pub prf_1kpmin: uint32,
    pub prf_1kpmax: uint32,
    pub prf_1kidle: uint32,
    pub prf_1kcmin: uint32,
    pub prf_1kcmax: uint32,
    pub pim_10kmin: uint32,
    pub pim_10kmax: uint32,
    pub pim_10klen: uint32,
    pub pim_10kpmin: uint32,
    pub pim_10kpmax: uint32,
    pub pim_10kidle: uint32,
    pub pxx_accdly: uint32,
    pub pxx_acclen: uint32,
    pub pim_16clkdly: uint32,
    pub m272_2mdiv: uint32,
    pub m272_ackdodly: uint32,
    pub m272_ackdidly: uint32,
    pub m272_dwgap: uint32,
    pub m272_clkdly: uint32,
    pub m272_merrlen: uint32,
    pub m272_serrlen: uint32,
    pub m272_rxtxdly: uint32,
}
#[test]
fn bindgen_test_layout_DQ_M272_CFG() {
    assert_eq!(
        ::std::mem::size_of::<DQ_M272_CFG>(),
        116usize,
        concat!("Size of: ", stringify!(DQ_M272_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_M272_CFG>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_M272_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).config as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).param0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(param0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).param1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(param1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1kmin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1kmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1kmax as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1kmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1klen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1klen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1kpmin as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1kpmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1kpmax as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1kpmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1kidle as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1kidle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1kcmin as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1kcmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).prf_1kcmax as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(prf_1kcmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pim_10kmin as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pim_10kmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pim_10kmax as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pim_10kmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pim_10klen as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pim_10klen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pim_10kpmin as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pim_10kpmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pim_10kpmax as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pim_10kpmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pim_10kidle as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pim_10kidle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pxx_accdly as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pxx_accdly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pxx_acclen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pxx_acclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).pim_16clkdly as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(pim_16clkdly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_2mdiv as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_2mdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_ackdodly as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_ackdodly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_ackdidly as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_ackdidly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_dwgap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_dwgap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_clkdly as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_clkdly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_merrlen as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_merrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_serrlen as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_serrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_M272_CFG>())).m272_rxtxdly as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_M272_CFG),
            "::",
            stringify!(m272_rxtxdly)
        )
    );
}
pub type pDQ_M272_CFG = *mut DQ_M272_CFG;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQ_CT602_PGEN_CONF {
    pub config: uint32,
    pub frm_clk_sel: uint32,
    pub word_clk_sel: uint32,
    pub time_clk_sel: uint32,
    pub tmr0_div: uint32,
    pub tmr1_div: uint32,
    pub start_trig: uint32,
    pub stop_trig: uint32,
    pub gpio_mask: uint32,
}
#[test]
fn bindgen_test_layout_DQ_CT602_PGEN_CONF() {
    assert_eq!(
        ::std::mem::size_of::<DQ_CT602_PGEN_CONF>(),
        36usize,
        concat!("Size of: ", stringify!(DQ_CT602_PGEN_CONF))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_CT602_PGEN_CONF>(),
        1usize,
        concat!("Alignment of ", stringify!(DQ_CT602_PGEN_CONF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).config as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).frm_clk_sel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(frm_clk_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).word_clk_sel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(word_clk_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).time_clk_sel as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(time_clk_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).tmr0_div as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(tmr0_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).tmr1_div as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(tmr1_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).start_trig as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(start_trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).stop_trig as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(stop_trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_CT602_PGEN_CONF>())).gpio_mask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_CT602_PGEN_CONF),
            "::",
            stringify!(gpio_mask)
        )
    );
}
pub type pDQ_CT602_PGEN_CONF = *mut DQ_CT602_PGEN_CONF;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_604_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_604_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_604_>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_604_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_604_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_604_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_604_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_604_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_604_ {
    pub placeholder: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_604_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_604_>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_604_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_604_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_604_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_604_>())).placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_604_),
            "::",
            stringify!(placeholder)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_604_ {
    pub chlst: [uint32; 8usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_604_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_604_>(),
        52usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_604_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_604_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_604_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_604_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_604_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_604_>())).conf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_604_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_604_>())).cvclk as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_604_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_604_>())).clclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_604_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_604_>())).trig as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_604_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_604_>())).clperint as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_604_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCHNLSET_604_ {
    pub lr: uint32,
    pub ctr: uint32,
    pub ccr: uint32,
    pub cr0: uint32,
    pub cr1: uint32,
    pub tbr: uint32,
    pub ier: uint32,
    pub idba: uint32,
    pub idbb: uint32,
    pub idbz: uint32,
    pub idbt: uint32,
    pub qed: uint32,
    pub ow: uint32,
    pub inc: uint32,
    pub ifwr: uint32,
}
#[test]
fn bindgen_test_layout_DQCHNLSET_604_() {
    assert_eq!(
        ::std::mem::size_of::<DQCHNLSET_604_>(),
        60usize,
        concat!("Size of: ", stringify!(DQCHNLSET_604_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCHNLSET_604_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCHNLSET_604_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).lr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(lr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).ctr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(ctr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).ccr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(ccr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).cr0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(cr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).cr1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(cr1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).tbr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(tbr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).ier as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(ier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).idba as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(idba)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).idbb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(idbb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).idbz as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(idbz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).idbt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(idbt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).qed as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(qed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).ow as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(ow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).inc as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_604_>())).ifwr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_604_),
            "::",
            stringify!(ifwr)
        )
    );
}
pub type pDQCHNLSET_604_ = *mut DQCHNLSET_604_;
#[repr(C, packed)]
pub struct DQMSG_604 {
    pub chnl: uint8,
    pub data: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQMSG_604() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_604>(),
        1usize,
        concat!("Size of: ", stringify!(DQMSG_604))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_604>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_604))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_604>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_604),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_604>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_604),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_VR608_READ_DATA {
    pub velocity: f64,
    pub position: uint32,
    pub tcount: uint32,
    pub tstamp: uint32,
    pub rd_flags: uint32,
    pub status: uint32,
    pub adc_val: f64,
}
#[test]
fn bindgen_test_layout_DQ_VR608_READ_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_VR608_READ_DATA>(),
        40usize,
        concat!("Size of: ", stringify!(DQ_VR608_READ_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_VR608_READ_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_VR608_READ_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_READ_DATA>())).velocity as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_READ_DATA),
            "::",
            stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_READ_DATA>())).position as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_READ_DATA),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_READ_DATA>())).tcount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_READ_DATA),
            "::",
            stringify!(tcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_READ_DATA>())).tstamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_READ_DATA),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_READ_DATA>())).rd_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_READ_DATA),
            "::",
            stringify!(rd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_READ_DATA>())).status as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_READ_DATA),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_READ_DATA>())).adc_val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_READ_DATA),
            "::",
            stringify!(adc_val)
        )
    );
}
pub type pDQ_VR608_READ_DATA = *mut DQ_VR608_READ_DATA;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_VR608_CFG {
    pub cfgformat: uint32,
    pub cfg_flags: uint32,
    pub reserved: [uint32; 2usize],
    pub adc_rate: f32,
    pub tmode_rate: f32,
    pub ofs_bias: f32,
    pub zc_level: f32,
    pub apt_th: f32,
    pub apt_div: uint32,
    pub adc_mv_avg: uint32,
    pub sync_in: uint32,
    pub sync_in_ps: uint32,
    pub sync_out: uint32,
    pub d_out: uint32,
    pub num_teeth: uint32,
    pub z_tooth_sz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQ_VR608_CFG() {
    assert_eq!(
        ::std::mem::size_of::<DQ_VR608_CFG>(),
        68usize,
        concat!("Size of: ", stringify!(DQ_VR608_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_VR608_CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_VR608_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).cfgformat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(cfgformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).cfg_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(cfg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).reserved as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).adc_rate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(adc_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).tmode_rate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(tmode_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).ofs_bias as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(ofs_bias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).zc_level as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(zc_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).apt_th as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(apt_th)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).apt_div as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(apt_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).adc_mv_avg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(adc_mv_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).sync_in as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(sync_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).sync_in_ps as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(sync_in_ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).sync_out as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(sync_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).d_out as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(d_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).num_teeth as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(num_teeth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_CFG>())).z_tooth_sz as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_CFG),
            "::",
            stringify!(z_tooth_sz)
        )
    );
}
pub type pDQ_VR608_CFG = *mut DQ_VR608_CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_VR608_ADC_STS {
    pub status: uint32,
    pub last_0: uint32,
    pub last_1: uint32,
    pub max_0: uint32,
    pub max_1: uint32,
    pub min_0: uint32,
    pub min_1: uint32,
}
#[test]
fn bindgen_test_layout_DQ_VR608_ADC_STS() {
    assert_eq!(
        ::std::mem::size_of::<DQ_VR608_ADC_STS>(),
        28usize,
        concat!("Size of: ", stringify!(DQ_VR608_ADC_STS))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_VR608_ADC_STS>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_VR608_ADC_STS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_ADC_STS>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_ADC_STS),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_ADC_STS>())).last_0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_ADC_STS),
            "::",
            stringify!(last_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_ADC_STS>())).last_1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_ADC_STS),
            "::",
            stringify!(last_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_ADC_STS>())).max_0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_ADC_STS),
            "::",
            stringify!(max_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_ADC_STS>())).max_1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_ADC_STS),
            "::",
            stringify!(max_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_ADC_STS>())).min_0 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_ADC_STS),
            "::",
            stringify!(min_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_ADC_STS>())).min_1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_ADC_STS),
            "::",
            stringify!(min_1)
        )
    );
}
pub type pDQ_VR608_ADC_STS = *mut DQ_VR608_ADC_STS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_608_ {
    pub front_cfg: [uint32; 8usize],
    pub mode: [uint32; 8usize],
    pub extcfg: [DQ_VR608_CFG; 8usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_608_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_608_>(),
        608usize,
        concat!("Size of: ", stringify!(DQINITPRM_608_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_608_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_608_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_608_>())).front_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_608_),
            "::",
            stringify!(front_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_608_>())).mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_608_),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_608_>())).extcfg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_608_),
            "::",
            stringify!(extcfg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CT650_VALID_TABLE {
    pub cmd: uint16,
    pub bit: uint16,
    pub reg: uint16,
    pub desc: uint16,
}
#[test]
fn bindgen_test_layout_CT650_VALID_TABLE() {
    assert_eq!(
        ::std::mem::size_of::<CT650_VALID_TABLE>(),
        8usize,
        concat!("Size of: ", stringify!(CT650_VALID_TABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<CT650_VALID_TABLE>(),
        2usize,
        concat!("Alignment of ", stringify!(CT650_VALID_TABLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_VALID_TABLE>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_VALID_TABLE),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_VALID_TABLE>())).bit as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_VALID_TABLE),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_VALID_TABLE>())).reg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_VALID_TABLE),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_VALID_TABLE>())).desc as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_VALID_TABLE),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CT650_IRIG_PRM_DEF {
    pub tcode_name: [::std::os::raw::c_char; 32usize],
    pub tcode_subtype: [::std::os::raw::c_char; 32usize],
    pub bit_frq: f64,
    pub frame_frq: f64,
    pub carrier_frq: f64,
    pub ratio_f_er: uint32,
    pub logic_0: uint32,
    pub logic_1: uint32,
    pub pos_id: uint32,
    pub is_bcd: ::std::os::raw::c_int,
    pub is_cf: ::std::os::raw::c_int,
    pub is_sbs: ::std::os::raw::c_int,
    pub is_year: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CT650_IRIG_PRM_DEF() {
    assert_eq!(
        ::std::mem::size_of::<CT650_IRIG_PRM_DEF>(),
        120usize,
        concat!("Size of: ", stringify!(CT650_IRIG_PRM_DEF))
    );
    assert_eq!(
        ::std::mem::align_of::<CT650_IRIG_PRM_DEF>(),
        1usize,
        concat!("Alignment of ", stringify!(CT650_IRIG_PRM_DEF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).tcode_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(tcode_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).tcode_subtype as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(tcode_subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).bit_frq as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(bit_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).frame_frq as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(frame_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).carrier_frq as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(carrier_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).ratio_f_er as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(ratio_f_er)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).logic_0 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(logic_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).logic_1 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(logic_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).pos_id as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(pos_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).is_bcd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(is_bcd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).is_cf as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(is_cf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).is_sbs as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(is_sbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_PRM_DEF>())).is_year as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_PRM_DEF),
            "::",
            stringify!(is_year)
        )
    );
}
pub type pCT650_IRIG_PRM_DEF = *mut CT650_IRIG_PRM_DEF;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CT650_IRIG_CODE_DEF {
    pub timecode_name: [::std::os::raw::c_char; 32usize],
    pub val_table_sz: uint32,
    pub val_table: [CT650_VALID_TABLE; 128usize],
}
#[test]
fn bindgen_test_layout_CT650_IRIG_CODE_DEF() {
    assert_eq!(
        ::std::mem::size_of::<CT650_IRIG_CODE_DEF>(),
        1060usize,
        concat!("Size of: ", stringify!(CT650_IRIG_CODE_DEF))
    );
    assert_eq!(
        ::std::mem::align_of::<CT650_IRIG_CODE_DEF>(),
        1usize,
        concat!("Alignment of ", stringify!(CT650_IRIG_CODE_DEF))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CT650_IRIG_CODE_DEF>())).timecode_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_CODE_DEF),
            "::",
            stringify!(timecode_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CT650_IRIG_CODE_DEF>())).val_table_sz as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_CODE_DEF),
            "::",
            stringify!(val_table_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_CODE_DEF>())).val_table as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_CODE_DEF),
            "::",
            stringify!(val_table)
        )
    );
}
pub type pCT650_IRIG_CODE_DEF = *mut CT650_IRIG_CODE_DEF;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CT650_IRIG_SIG_DEF {
    pub ppx: f64,
    pub pph: uint32,
    pub in_freq: uint32,
    pub rx_ici: uint32,
    pub dbcnt: uint32,
    pub rxmsg_len: uint32,
    pub pi_min: uint32,
    pub pi_max: uint32,
    pub l0_min: uint32,
    pub l0_max: uint32,
    pub l1_min: uint32,
    pub l1_max: uint32,
    pub cr_tol_min: uint32,
    pub ct_tol_max: uint32,
    pub mii_tol: uint32,
    pub pps_min: uint32,
    pub pps_max: uint32,
    pub ppsmav: uint32,
}
#[test]
fn bindgen_test_layout_CT650_IRIG_SIG_DEF() {
    assert_eq!(
        ::std::mem::size_of::<CT650_IRIG_SIG_DEF>(),
        76usize,
        concat!("Size of: ", stringify!(CT650_IRIG_SIG_DEF))
    );
    assert_eq!(
        ::std::mem::align_of::<CT650_IRIG_SIG_DEF>(),
        1usize,
        concat!("Alignment of ", stringify!(CT650_IRIG_SIG_DEF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).ppx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(ppx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).pph as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(pph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).in_freq as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(in_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).rx_ici as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(rx_ici)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).dbcnt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(dbcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).rxmsg_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(rxmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).pi_min as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(pi_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).pi_max as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(pi_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).l0_min as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(l0_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).l0_max as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(l0_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).l1_min as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(l1_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).l1_max as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(l1_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).cr_tol_min as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(cr_tol_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).ct_tol_max as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(ct_tol_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).mii_tol as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(mii_tol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).pps_min as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(pps_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).pps_max as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(pps_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_IRIG_SIG_DEF>())).ppsmav as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_IRIG_SIG_DEF),
            "::",
            stringify!(ppsmav)
        )
    );
}
pub type pCT650_IRIG_SIG_DEF = *mut CT650_IRIG_SIG_DEF;
pub const event650_t_EV650_CLEAR: event650_t = 4096;
pub const event650_t_EV650_EVENT: event650_t = 257;
pub const event650_t_EV650_PPS_CLK: event650_t = 258;
pub const event650_t_EV650_TIMERDY: event650_t = 259;
pub const event650_t_EV650_GPSRX: event650_t = 260;
pub const event650_t_EV650_ERROR: event650_t = 272;
pub type event650_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EV650_CFG {
    pub event_cfg: uint32,
    pub event_prm: uint32,
    pub event_val: uint32,
    pub event_sub0_dly: uint32,
    pub event_sub1_dly: uint32,
}
#[test]
fn bindgen_test_layout_EV650_CFG() {
    assert_eq!(
        ::std::mem::size_of::<EV650_CFG>(),
        20usize,
        concat!("Size of: ", stringify!(EV650_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<EV650_CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(EV650_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_CFG>())).event_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_CFG),
            "::",
            stringify!(event_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_CFG>())).event_prm as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_CFG),
            "::",
            stringify!(event_prm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_CFG>())).event_val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_CFG),
            "::",
            stringify!(event_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_CFG>())).event_sub0_dly as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_CFG),
            "::",
            stringify!(event_sub0_dly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_CFG>())).event_sub1_dly as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_CFG),
            "::",
            stringify!(event_sub1_dly)
        )
    );
}
pub type pEV650_CFG = *mut EV650_CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EV650_STS {
    pub event_sts: uint32,
    pub event_tstamp: uint32,
    pub event_ad: uint32,
}
#[test]
fn bindgen_test_layout_EV650_STS() {
    assert_eq!(
        ::std::mem::size_of::<EV650_STS>(),
        12usize,
        concat!("Size of: ", stringify!(EV650_STS))
    );
    assert_eq!(
        ::std::mem::align_of::<EV650_STS>(),
        4usize,
        concat!("Alignment of ", stringify!(EV650_STS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_STS>())).event_sts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_STS),
            "::",
            stringify!(event_sts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_STS>())).event_tstamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_STS),
            "::",
            stringify!(event_tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EV650_STS>())).event_ad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EV650_STS),
            "::",
            stringify!(event_ad)
        )
    );
}
pub type pEV650_STS = *mut EV650_STS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CT650_BCD_TIME {
    pub s100: uint32,
    pub s10: uint32,
    pub sec: uint32,
    pub min: uint32,
    pub hours: uint32,
    pub days: uint32,
    pub year: uint32,
}
#[test]
fn bindgen_test_layout_CT650_BCD_TIME() {
    assert_eq!(
        ::std::mem::size_of::<CT650_BCD_TIME>(),
        28usize,
        concat!("Size of: ", stringify!(CT650_BCD_TIME))
    );
    assert_eq!(
        ::std::mem::align_of::<CT650_BCD_TIME>(),
        4usize,
        concat!("Alignment of ", stringify!(CT650_BCD_TIME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_BCD_TIME>())).s100 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_BCD_TIME),
            "::",
            stringify!(s100)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_BCD_TIME>())).s10 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_BCD_TIME),
            "::",
            stringify!(s10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_BCD_TIME>())).sec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_BCD_TIME),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_BCD_TIME>())).min as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_BCD_TIME),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_BCD_TIME>())).hours as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_BCD_TIME),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_BCD_TIME>())).days as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_BCD_TIME),
            "::",
            stringify!(days)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CT650_BCD_TIME>())).year as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CT650_BCD_TIME),
            "::",
            stringify!(year)
        )
    );
}
pub type pCT650_BCD_TIME = *mut CT650_BCD_TIME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_650_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 1usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_650_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_650_>(),
        32usize,
        concat!("Size of: ", stringify!(DQCNAMES_650_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_650_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_650_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_650_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_650_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_650_ {
    pub conf: uint32,
    pub chop: uint32,
    pub mask: uint32,
    pub clclk: uint32,
    pub cvclk: uint32,
    pub clperint: ::std::os::raw::c_int,
    pub trig: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_650_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_650_>(),
        28usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_650_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_650_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_650_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_650_>())).conf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_650_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_650_>())).chop as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_650_),
            "::",
            stringify!(chop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_650_>())).mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_650_),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_650_>())).clclk as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_650_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_650_>())).cvclk as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_650_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_650_>())).clperint as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_650_),
            "::",
            stringify!(clperint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_650_>())).trig as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_650_),
            "::",
            stringify!(trig)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_650_ {
    pub ttl_state: uint32,
    pub dac_adjust: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_650_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_650_>(),
        8usize,
        concat!("Size of: ", stringify!(DQINITPRM_650_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_650_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQINITPRM_650_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_650_>())).ttl_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_650_),
            "::",
            stringify!(ttl_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_650_>())).dac_adjust as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_650_),
            "::",
            stringify!(dac_adjust)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_650_ {
    pub ttl_state: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_650_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_650_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_650_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_650_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_650_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_650_>())).ttl_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_650_),
            "::",
            stringify!(ttl_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQEERSVD_650_ {
    pub res: [uint8; 1688usize],
}
#[test]
fn bindgen_test_layout_DQEERSVD_650_() {
    assert_eq!(
        ::std::mem::size_of::<DQEERSVD_650_>(),
        1688usize,
        concat!("Size of: ", stringify!(DQEERSVD_650_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEERSVD_650_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQEERSVD_650_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEERSVD_650_>())).res as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEERSVD_650_),
            "::",
            stringify!(res)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_651_ {
    pub cnames: [[::std::os::raw::c_char; 32usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_651_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_651_>(),
        128usize,
        concat!("Size of: ", stringify!(DQCNAMES_651_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_651_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_651_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_651_>())).cnames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_651_),
            "::",
            stringify!(cnames)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_651_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_651_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_651_>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_651_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_651_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQCALSET_651_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_651_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_651_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_651_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_651_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_651_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_651_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_651_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_651_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_651_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_651_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_651_ {
    pub lcr: uint32,
    pub dac_wr: [uint32; 4usize],
    pub fwcfg: uint32,
    pub fwdc: uint32,
    pub fwdiv: uint32,
    pub fwclk_min: uint32,
    pub fwclk_max: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_651_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_651_>(),
        40usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_651_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_651_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_651_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_651_>())).lcr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_651_),
            "::",
            stringify!(lcr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_651_>())).dac_wr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_651_),
            "::",
            stringify!(dac_wr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_651_>())).fwcfg as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_651_),
            "::",
            stringify!(fwcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_651_>())).fwdc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_651_),
            "::",
            stringify!(fwdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_651_>())).fwdiv as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_651_),
            "::",
            stringify!(fwdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_651_>())).fwclk_min as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_651_),
            "::",
            stringify!(fwclk_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_651_>())).fwclk_max as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_651_),
            "::",
            stringify!(fwclk_max)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_651_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_651_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_651_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_651_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_651_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_651_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_651_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_651_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQPRMFLAGS_651_ {
    pub flag_ver: uint32,
}
#[test]
fn bindgen_test_layout_DQPRMFLAGS_651_() {
    assert_eq!(
        ::std::mem::size_of::<DQPRMFLAGS_651_>(),
        4usize,
        concat!("Size of: ", stringify!(DQPRMFLAGS_651_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQPRMFLAGS_651_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQPRMFLAGS_651_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGS_651_>())).flag_ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGS_651_),
            "::",
            stringify!(flag_ver)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AR664_ARCFG {
    pub buscfg: uint32,
    pub speed: uint32,
}
#[test]
fn bindgen_test_layout_AR664_ARCFG() {
    assert_eq!(
        ::std::mem::size_of::<AR664_ARCFG>(),
        8usize,
        concat!("Size of: ", stringify!(AR664_ARCFG))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_ARCFG>(),
        4usize,
        concat!("Alignment of ", stringify!(AR664_ARCFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ARCFG>())).buscfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ARCFG),
            "::",
            stringify!(buscfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ARCFG>())).speed as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ARCFG),
            "::",
            stringify!(speed)
        )
    );
}
pub type pAR664_ARCFG = *mut AR664_ARCFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AR664_VL_CFG {
    pub VLID: ::std::os::raw::c_int,
    pub reserved1: ::std::os::raw::c_int,
    pub ICMP_mode: ::std::os::raw::c_int,
    pub ICMP_VLID: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub bag: ::std::os::raw::c_int,
    pub n_subVL: ::std::os::raw::c_int,
    pub lmax: ::std::os::raw::c_int,
    pub max_jitter: ::std::os::raw::c_int,
    pub skew_max: ::std::os::raw::c_int,
    pub skew_delay: ::std::os::raw::c_int,
    pub prev_sn_range: uint32,
    pub ede_mode: ::std::os::raw::c_int,
    pub ede_sid: uint32,
    pub ede_skew_max: uint32,
    pub ede_age_max: uint32,
    pub ede_lag_max: uint32,
}
#[test]
fn bindgen_test_layout_AR664_VL_CFG() {
    assert_eq!(
        ::std::mem::size_of::<AR664_VL_CFG>(),
        68usize,
        concat!("Size of: ", stringify!(AR664_VL_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_VL_CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(AR664_VL_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).VLID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(VLID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).reserved1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).ICMP_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(ICMP_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).ICMP_VLID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(ICMP_VLID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).bag as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(bag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).n_subVL as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(n_subVL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).lmax as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(lmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).max_jitter as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(max_jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).skew_max as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(skew_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).skew_delay as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(skew_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).prev_sn_range as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(prev_sn_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).ede_mode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(ede_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).ede_sid as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(ede_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).ede_skew_max as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(ede_skew_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).ede_age_max as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(ede_age_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_VL_CFG>())).ede_lag_max as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_VL_CFG),
            "::",
            stringify!(ede_lag_max)
        )
    );
}
pub type pAR664_VL_CFG = *mut AR664_VL_CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AR664_PORT_CFG {
    pub mode: uint32,
    pub portID: uint32,
    pub VLID: ::std::os::raw::c_int,
    pub period: ::std::os::raw::c_int,
    pub period_skew: ::std::os::raw::c_int,
    pub icmp_handle: ::std::os::raw::c_int,
    pub endsys_src: ::std::os::raw::c_int,
    pub part_src: ::std::os::raw::c_int,
    pub endsys_dst: ::std::os::raw::c_int,
    pub part_dst: ::std::os::raw::c_int,
    pub subvl_id: ::std::os::raw::c_int,
    pub udp_src_port: ::std::os::raw::c_int,
    pub udp_dst_port: ::std::os::raw::c_int,
    pub port_type: uint32,
    pub d_size: uint32,
    pub depth: uint32,
    pub port_handle: uint32,
}
#[test]
fn bindgen_test_layout_AR664_PORT_CFG() {
    assert_eq!(
        ::std::mem::size_of::<AR664_PORT_CFG>(),
        68usize,
        concat!("Size of: ", stringify!(AR664_PORT_CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_PORT_CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(AR664_PORT_CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).portID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(portID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).VLID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(VLID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).period as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).period_skew as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(period_skew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).icmp_handle as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(icmp_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).endsys_src as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(endsys_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).part_src as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(part_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).endsys_dst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(endsys_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).part_dst as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(part_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).subvl_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(subvl_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).udp_src_port as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(udp_src_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).udp_dst_port as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(udp_dst_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).port_type as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(port_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).d_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(d_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).depth as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_CFG>())).port_handle as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_CFG),
            "::",
            stringify!(port_handle)
        )
    );
}
pub type pAR664_PORT_CFG = *mut AR664_PORT_CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AR664_CFG_HANDLES {
    pub VlId: uint16,
    pub PortID: uint16,
    pub VlHandle: uint16,
    pub PortHandle: uint16,
    pub Status: uint32,
    pub Line: uint32,
    pub Vl: AR664_VL_CFG,
    pub Port: AR664_PORT_CFG,
}
#[test]
fn bindgen_test_layout_AR664_CFG_HANDLES() {
    assert_eq!(
        ::std::mem::size_of::<AR664_CFG_HANDLES>(),
        152usize,
        concat!("Size of: ", stringify!(AR664_CFG_HANDLES))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_CFG_HANDLES>(),
        4usize,
        concat!("Alignment of ", stringify!(AR664_CFG_HANDLES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).VlId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(VlId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).PortID as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(PortID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).VlHandle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(VlHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).PortHandle as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(PortHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).Status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).Line as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(Line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).Vl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(Vl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CFG_HANDLES>())).Port as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CFG_HANDLES),
            "::",
            stringify!(Port)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AR664_ERR_INJ {
    pub rst_msk: uint32,
    pub enf_msk: uint32,
    pub sn: uint32,
    pub err_ign: uint32,
    pub err_inj: uint32,
    pub param_a: [uint32; 32usize],
}
#[test]
fn bindgen_test_layout_AR664_ERR_INJ() {
    assert_eq!(
        ::std::mem::size_of::<AR664_ERR_INJ>(),
        148usize,
        concat!("Size of: ", stringify!(AR664_ERR_INJ))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_ERR_INJ>(),
        4usize,
        concat!("Alignment of ", stringify!(AR664_ERR_INJ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ERR_INJ>())).rst_msk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ERR_INJ),
            "::",
            stringify!(rst_msk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ERR_INJ>())).enf_msk as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ERR_INJ),
            "::",
            stringify!(enf_msk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ERR_INJ>())).sn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ERR_INJ),
            "::",
            stringify!(sn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ERR_INJ>())).err_ign as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ERR_INJ),
            "::",
            stringify!(err_ign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ERR_INJ>())).err_inj as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ERR_INJ),
            "::",
            stringify!(err_inj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_ERR_INJ>())).param_a as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_ERR_INJ),
            "::",
            stringify!(param_a)
        )
    );
}
pub type pAR664_ERR_INJ = *mut AR664_ERR_INJ;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ETH_HEADER {
    pub dst: [uint8; 6usize],
    pub src: [uint8; 6usize],
    pub type_: uint16,
}
#[test]
fn bindgen_test_layout_ETH_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<ETH_HEADER>(),
        14usize,
        concat!("Size of: ", stringify!(ETH_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<ETH_HEADER>(),
        1usize,
        concat!("Alignment of ", stringify!(ETH_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ETH_HEADER>())).dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_HEADER),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ETH_HEADER>())).src as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_HEADER),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ETH_HEADER>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_HEADER),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct IP4_HEADER {
    pub v_hl_tos: uint16,
    pub len: uint16,
    pub id: uint16,
    pub offset: uint16,
    pub ttl_proto: uint16,
    pub chksum: uint16,
    pub src: uint32,
    pub dst: uint32,
}
#[test]
fn bindgen_test_layout_IP4_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<IP4_HEADER>(),
        20usize,
        concat!("Size of: ", stringify!(IP4_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<IP4_HEADER>(),
        1usize,
        concat!("Alignment of ", stringify!(IP4_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).v_hl_tos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(v_hl_tos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).offset as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).ttl_proto as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(ttl_proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).chksum as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(chksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).src as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP4_HEADER>())).dst as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IP4_HEADER),
            "::",
            stringify!(dst)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct UDP_HEADER {
    pub src: uint16,
    pub dst: uint16,
    pub len: uint16,
    pub chksum: uint16,
}
#[test]
fn bindgen_test_layout_UDP_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<UDP_HEADER>(),
        8usize,
        concat!("Size of: ", stringify!(UDP_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<UDP_HEADER>(),
        1usize,
        concat!("Alignment of ", stringify!(UDP_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_HEADER>())).src as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UDP_HEADER),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_HEADER>())).dst as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(UDP_HEADER),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_HEADER>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UDP_HEADER),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_HEADER>())).chksum as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(UDP_HEADER),
            "::",
            stringify!(chksum)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ICMP_HEADER {
    pub type_code: uint16,
    pub chksum: uint16,
    pub id: uint16,
    pub seqno: uint16,
}
#[test]
fn bindgen_test_layout_ICMP_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<ICMP_HEADER>(),
        8usize,
        concat!("Size of: ", stringify!(ICMP_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<ICMP_HEADER>(),
        1usize,
        concat!("Alignment of ", stringify!(ICMP_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ICMP_HEADER>())).type_code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ICMP_HEADER),
            "::",
            stringify!(type_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ICMP_HEADER>())).chksum as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ICMP_HEADER),
            "::",
            stringify!(chksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ICMP_HEADER>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ICMP_HEADER),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ICMP_HEADER>())).seqno as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ICMP_HEADER),
            "::",
            stringify!(seqno)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union UDP_ICMP_HDR {
    pub udp: UDP_HEADER,
    pub icmp: ICMP_HEADER,
    _bindgen_union_align: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_UDP_ICMP_HDR() {
    assert_eq!(
        ::std::mem::size_of::<UDP_ICMP_HDR>(),
        8usize,
        concat!("Size of: ", stringify!(UDP_ICMP_HDR))
    );
    assert_eq!(
        ::std::mem::align_of::<UDP_ICMP_HDR>(),
        1usize,
        concat!("Alignment of ", stringify!(UDP_ICMP_HDR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_ICMP_HDR>())).udp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UDP_ICMP_HDR),
            "::",
            stringify!(udp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_ICMP_HDR>())).icmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UDP_ICMP_HDR),
            "::",
            stringify!(icmp)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct AR664_HEADERS {
    pub eth: ETH_HEADER,
    pub ip: IP4_HEADER,
    pub icmp_udp: UDP_ICMP_HDR,
    pub fields: uint32,
    pub eth_CRC: uint32,
    pub timestamp: uint32,
    pub sn: uint8,
    pub ede_hdr: [uint8; 8usize],
    pub ede_crc_x: uint16,
    pub ede_crc_y: uint16,
    pub reserved: uint8,
}
#[test]
fn bindgen_test_layout_AR664_HEADERS() {
    assert_eq!(
        ::std::mem::size_of::<AR664_HEADERS>(),
        68usize,
        concat!("Size of: ", stringify!(AR664_HEADERS))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_HEADERS>(),
        1usize,
        concat!("Alignment of ", stringify!(AR664_HEADERS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).eth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(eth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).ip as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).icmp_udp as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(icmp_udp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).fields as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).eth_CRC as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(eth_CRC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).timestamp as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).sn as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(sn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).ede_hdr as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(ede_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).ede_crc_x as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(ede_crc_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).ede_crc_y as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(ede_crc_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_HEADERS>())).reserved as *const _ as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_HEADERS),
            "::",
            stringify!(reserved)
        )
    );
}
pub type pAR664_HEADERS = *mut AR664_HEADERS;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct AR664_CTRL {
    pub enable_b: uint32,
    pub rst_msk: uint32,
    pub enf_msk: uint32,
    pub eth_speed: uint32,
}
#[test]
fn bindgen_test_layout_AR664_CTRL() {
    assert_eq!(
        ::std::mem::size_of::<AR664_CTRL>(),
        16usize,
        concat!("Size of: ", stringify!(AR664_CTRL))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_CTRL>(),
        1usize,
        concat!("Alignment of ", stringify!(AR664_CTRL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CTRL>())).enable_b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CTRL),
            "::",
            stringify!(enable_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CTRL>())).rst_msk as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CTRL),
            "::",
            stringify!(rst_msk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CTRL>())).enf_msk as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CTRL),
            "::",
            stringify!(enf_msk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_CTRL>())).eth_speed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_CTRL),
            "::",
            stringify!(eth_speed)
        )
    );
}
pub type pAR664_CTRL = *mut AR664_CTRL;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct AR664_PORT_MSGCNT {
    pub port_handle: uint16,
    pub reserved16: uint16,
    pub reserved32: uint32,
    pub msg_count: uint32,
}
#[test]
fn bindgen_test_layout_AR664_PORT_MSGCNT() {
    assert_eq!(
        ::std::mem::size_of::<AR664_PORT_MSGCNT>(),
        12usize,
        concat!("Size of: ", stringify!(AR664_PORT_MSGCNT))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_PORT_MSGCNT>(),
        1usize,
        concat!("Alignment of ", stringify!(AR664_PORT_MSGCNT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_MSGCNT>())).port_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_MSGCNT),
            "::",
            stringify!(port_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_MSGCNT>())).reserved16 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_MSGCNT),
            "::",
            stringify!(reserved16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_MSGCNT>())).reserved32 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_MSGCNT),
            "::",
            stringify!(reserved32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_MSGCNT>())).msg_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_MSGCNT),
            "::",
            stringify!(msg_count)
        )
    );
}
pub type pAR664_PORT_MSGCNT = *mut AR664_PORT_MSGCNT;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct AR664_BUS_STAT {
    pub preamble: uint32,
    pub timestamp: uint32,
    pub afdx_cpu_use: uint32,
    pub iom_cpu_use: uint32,
    pub bytes_rcv: uint32,
    pub bytes_snd: uint32,
    pub pkts_rcv: uint32,
    pub pkts_rcv_s: uint32,
    pub msgs_rcv_q: uint32,
    pub msgs_rcv_sap: uint32,
    pub msgs_icmp: uint32,
    pub pkts_snd: uint32,
    pub pkts_snd_p: uint32,
    pub pkts_snd_s: uint32,
    pub pkts_snd_q: uint32,
    pub pkts_snd_sap: uint32,
    pub msgs_snd_q: uint32,
    pub msgs_snd_sap: uint32,
    pub eth_hdr_err: uint32,
    pub eth_addr_err: uint32,
    pub bus_not_match: uint32,
    pub bus_dis: uint32,
    pub vl_dis: uint32,
    pub vl_lmax_exceed: uint32,
    pub ip_hdr_err: uint32,
    pub ip_addr_err: uint32,
    pub ip_chksum: uint32,
    pub ip_too_big: uint32,
    pub ip_frag_timeout: uint32,
    pub ip_frag_nomatch: uint32,
    pub ip_frag_nomem: uint32,
    pub ip_frag_err: uint32,
    pub udp_chksum: uint32,
    pub addr_not_ours: uint32,
    pub port_dis: uint32,
    pub ede_crc_err: uint32,
    pub ede_ord_err: uint32,
    pub ede_age_err: uint32,
    pub ic_reset: uint32,
    pub ic_drop: uint32,
    pub rm_skewmax: uint32,
    pub rm_drop: uint32,
    pub buf_rcv_ovwr: uint32,
    pub buf_rcv_ovf: uint32,
    pub buf_snd_ovwr: uint32,
    pub buf_snd_ovf: uint32,
    pub tx_sch_err: uint32,
    pub tx_sch_p_bsy: uint32,
    pub tx_sch_jitter: uint32,
    pub reserved: [uint32; 2usize],
    pub ae_proc_req: uint32,
    pub ae_proc_ok: uint32,
    pub ae_proc_ovf: uint32,
    pub ae_proc_err: uint32,
    pub ae_emit_req: uint32,
    pub ae_emit_ok: uint32,
    pub ae_emit_retried: uint32,
    pub ae_emit_timeout: uint32,
    pub ae_emit_err: uint32,
    pub mem_err: uint32,
    pub pkt_err: uint32,
}
#[test]
fn bindgen_test_layout_AR664_BUS_STAT() {
    assert_eq!(
        ::std::mem::size_of::<AR664_BUS_STAT>(),
        248usize,
        concat!("Size of: ", stringify!(AR664_BUS_STAT))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_BUS_STAT>(),
        1usize,
        concat!("Alignment of ", stringify!(AR664_BUS_STAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).preamble as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(preamble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).afdx_cpu_use as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(afdx_cpu_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).iom_cpu_use as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(iom_cpu_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).bytes_rcv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(bytes_rcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).bytes_snd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(bytes_snd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkts_rcv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkts_rcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkts_rcv_s as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkts_rcv_s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).msgs_rcv_q as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(msgs_rcv_q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).msgs_rcv_sap as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(msgs_rcv_sap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).msgs_icmp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(msgs_icmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkts_snd as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkts_snd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkts_snd_p as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkts_snd_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkts_snd_s as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkts_snd_s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkts_snd_q as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkts_snd_q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkts_snd_sap as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkts_snd_sap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).msgs_snd_q as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(msgs_snd_q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).msgs_snd_sap as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(msgs_snd_sap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).eth_hdr_err as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(eth_hdr_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).eth_addr_err as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(eth_addr_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).bus_not_match as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(bus_not_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).bus_dis as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(bus_dis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).vl_dis as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(vl_dis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).vl_lmax_exceed as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(vl_lmax_exceed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_hdr_err as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_hdr_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_addr_err as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_addr_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_chksum as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_chksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_too_big as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_too_big)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_frag_timeout as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_frag_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_frag_nomatch as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_frag_nomatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_frag_nomem as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_frag_nomem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ip_frag_err as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ip_frag_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).udp_chksum as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(udp_chksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).addr_not_ours as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(addr_not_ours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).port_dis as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(port_dis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ede_crc_err as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ede_crc_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ede_ord_err as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ede_ord_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ede_age_err as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ede_age_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ic_reset as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ic_reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ic_drop as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ic_drop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).rm_skewmax as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(rm_skewmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).rm_drop as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(rm_drop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).buf_rcv_ovwr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(buf_rcv_ovwr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).buf_rcv_ovf as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(buf_rcv_ovf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).buf_snd_ovwr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(buf_snd_ovwr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).buf_snd_ovf as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(buf_snd_ovf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).tx_sch_err as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(tx_sch_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).tx_sch_p_bsy as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(tx_sch_p_bsy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).tx_sch_jitter as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(tx_sch_jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).reserved as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_proc_req as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_proc_req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_proc_ok as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_proc_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_proc_ovf as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_proc_ovf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_proc_err as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_proc_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_emit_req as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_emit_req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_emit_ok as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_emit_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_emit_retried as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_emit_retried)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_emit_timeout as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_emit_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).ae_emit_err as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(ae_emit_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).mem_err as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(mem_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_BUS_STAT>())).pkt_err as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_BUS_STAT),
            "::",
            stringify!(pkt_err)
        )
    );
}
pub type pAR664_BUS_STAT = *mut AR664_BUS_STAT;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct AR664_PORT_INFO {
    pub size_hndl: uint16,
    pub messages: uint16,
}
#[test]
fn bindgen_test_layout_AR664_PORT_INFO() {
    assert_eq!(
        ::std::mem::size_of::<AR664_PORT_INFO>(),
        4usize,
        concat!("Size of: ", stringify!(AR664_PORT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_PORT_INFO>(),
        1usize,
        concat!("Alignment of ", stringify!(AR664_PORT_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_INFO>())).size_hndl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_INFO),
            "::",
            stringify!(size_hndl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_PORT_INFO>())).messages as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_PORT_INFO),
            "::",
            stringify!(messages)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AR664_DEV_INFO {
    pub preamble: uint16,
    pub structver: uint8,
    pub incompatible: uint8,
    pub iomc_fw_ver: uint32,
    pub afdx_fw_ver: uint32,
    pub afdx_fw_date: [::std::os::raw::c_char; 24usize],
}
#[test]
fn bindgen_test_layout_AR664_DEV_INFO() {
    assert_eq!(
        ::std::mem::size_of::<AR664_DEV_INFO>(),
        36usize,
        concat!("Size of: ", stringify!(AR664_DEV_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<AR664_DEV_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(AR664_DEV_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_DEV_INFO>())).preamble as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_DEV_INFO),
            "::",
            stringify!(preamble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_DEV_INFO>())).structver as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_DEV_INFO),
            "::",
            stringify!(structver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_DEV_INFO>())).incompatible as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_DEV_INFO),
            "::",
            stringify!(incompatible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_DEV_INFO>())).iomc_fw_ver as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_DEV_INFO),
            "::",
            stringify!(iomc_fw_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_DEV_INFO>())).afdx_fw_ver as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_DEV_INFO),
            "::",
            stringify!(afdx_fw_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AR664_DEV_INFO>())).afdx_fw_date as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AR664_DEV_INFO),
            "::",
            stringify!(afdx_fw_date)
        )
    );
}
pub type pAR664_DEV_INFO = *mut AR664_DEV_INFO;
pub const event664_t_EV664_CLEAR: event664_t = 4096;
pub const event664_t_EV664_RESET: event664_t = 8192;
pub const event664_t_EV664_TO: event664_t = 257;
pub const event664_t_EV664_RXSZ: event664_t = 258;
pub const event664_t_EV664_RX: event664_t = 259;
pub const event664_t_EV664_TX: event664_t = 260;
pub const event664_t_EV664_BUS_ERROR: event664_t = 261;
pub const event664_t_EV664_RX_UNXP: event664_t = 262;
pub const event664_t_EV664_TX_UNXP: event664_t = 263;
pub const event664_t_EV664_VRFY_RX: event664_t = 264;
pub type event664_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_801_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_801_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_801_>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_801_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_801_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_801_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_801_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_801_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_801_ {
    pub placeholder: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_801_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_801_>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_801_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_801_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_801_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_801_>())).placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_801_),
            "::",
            stringify!(placeholder)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_801_ {
    pub chlst: [uint32; 8usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_801_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_801_>(),
        52usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_801_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_801_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_801_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_801_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_801_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_801_>())).conf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_801_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_801_>())).cvclk as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_801_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_801_>())).clclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_801_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_801_>())).trig as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_801_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_801_>())).clperint as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_801_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCHNLSET_801_ {
    pub ccr: uint32,
    pub lr: uint32,
    pub ier: uint32,
    pub sampwidth: uint32,
}
#[test]
fn bindgen_test_layout_DQCHNLSET_801_() {
    assert_eq!(
        ::std::mem::size_of::<DQCHNLSET_801_>(),
        16usize,
        concat!("Size of: ", stringify!(DQCHNLSET_801_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCHNLSET_801_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCHNLSET_801_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_801_>())).ccr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_801_),
            "::",
            stringify!(ccr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_801_>())).lr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_801_),
            "::",
            stringify!(lr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_801_>())).ier as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_801_),
            "::",
            stringify!(ier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_801_>())).sampwidth as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_801_),
            "::",
            stringify!(sampwidth)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQWMSET_801_ {
    pub in_wm: uint16,
    pub out_wm: uint16,
}
#[test]
fn bindgen_test_layout_DQWMSET_801_() {
    assert_eq!(
        ::std::mem::size_of::<DQWMSET_801_>(),
        4usize,
        concat!("Size of: ", stringify!(DQWMSET_801_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWMSET_801_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWMSET_801_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWMSET_801_>())).in_wm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWMSET_801_),
            "::",
            stringify!(in_wm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWMSET_801_>())).out_wm as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWMSET_801_),
            "::",
            stringify!(out_wm)
        )
    );
}
#[repr(C, packed)]
pub struct DQMSG_801 {
    pub chnl: uint8,
    pub data: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQMSG_801() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_801>(),
        1usize,
        concat!("Size of: ", stringify!(DQMSG_801))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_801>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_801))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_801>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_801),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_801>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_801),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQFGC {
    pub tx: [uint32; 8usize],
    pub rx: [uint32; 9usize],
    pub timestamp: uint32,
}
#[test]
fn bindgen_test_layout_DQFGC() {
    assert_eq!(
        ::std::mem::size_of::<DQFGC>(),
        72usize,
        concat!("Size of: ", stringify!(DQFGC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQFGC>(),
        1usize,
        concat!("Alignment of ", stringify!(DQFGC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFGC>())).tx as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(DQFGC), "::", stringify!(tx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFGC>())).rx as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(DQFGC), "::", stringify!(rx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQFGC>())).timestamp as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQFGC),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCDU {
    pub com_aux: uint32,
    pub com_ts: uint32,
    pub nav_aux: uint32,
    pub nav_ts: uint32,
    pub tx: uint32,
}
#[test]
fn bindgen_test_layout_DQCDU() {
    assert_eq!(
        ::std::mem::size_of::<DQCDU>(),
        20usize,
        concat!("Size of: ", stringify!(DQCDU))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCDU>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCDU))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCDU>())).com_aux as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCDU),
            "::",
            stringify!(com_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCDU>())).com_ts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCDU),
            "::",
            stringify!(com_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCDU>())).nav_aux as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCDU),
            "::",
            stringify!(nav_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCDU>())).nav_ts as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCDU),
            "::",
            stringify!(nav_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCDU>())).tx as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(DQCDU), "::", stringify!(tx))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_802_ {
    pub cname: [[::std::os::raw::c_char; 16usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_802_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_802_>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_802_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_802_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_802_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_802_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_802_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCALSET_802_ {
    pub placeholder: uint32,
}
#[test]
fn bindgen_test_layout_DQCALSET_802_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_802_>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_802_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_802_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_802_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_802_>())).placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_802_),
            "::",
            stringify!(placeholder)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_802_ {
    pub chlst: [uint32; 8usize],
    pub conf: uint32,
    pub cvclk: uint32,
    pub clclk: uint32,
    pub trig: uint32,
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_802_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_802_>(),
        52usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_802_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_802_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_802_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_802_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_802_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_802_>())).conf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_802_),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_802_>())).cvclk as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_802_),
            "::",
            stringify!(cvclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_802_>())).clclk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_802_),
            "::",
            stringify!(clclk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_802_>())).trig as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_802_),
            "::",
            stringify!(trig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_802_>())).clperint as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_802_),
            "::",
            stringify!(clperint)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQCHNLSET_802_ {
    pub ccr: uint32,
    pub lr: uint32,
    pub ier: uint32,
    pub sampwidth: uint32,
}
#[test]
fn bindgen_test_layout_DQCHNLSET_802_() {
    assert_eq!(
        ::std::mem::size_of::<DQCHNLSET_802_>(),
        16usize,
        concat!("Size of: ", stringify!(DQCHNLSET_802_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCHNLSET_802_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCHNLSET_802_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_802_>())).ccr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_802_),
            "::",
            stringify!(ccr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_802_>())).lr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_802_),
            "::",
            stringify!(lr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_802_>())).ier as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_802_),
            "::",
            stringify!(ier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCHNLSET_802_>())).sampwidth as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCHNLSET_802_),
            "::",
            stringify!(sampwidth)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQWMSET_802_ {
    pub in_wm: uint16,
    pub out_wm: uint16,
}
#[test]
fn bindgen_test_layout_DQWMSET_802_() {
    assert_eq!(
        ::std::mem::size_of::<DQWMSET_802_>(),
        4usize,
        concat!("Size of: ", stringify!(DQWMSET_802_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQWMSET_802_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQWMSET_802_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWMSET_802_>())).in_wm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWMSET_802_),
            "::",
            stringify!(in_wm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQWMSET_802_>())).out_wm as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DQWMSET_802_),
            "::",
            stringify!(out_wm)
        )
    );
}
#[repr(C, packed)]
pub struct DQMSG_802 {
    pub chnl: uint8,
    pub data: __IncompleteArrayField<uint32>,
}
#[test]
fn bindgen_test_layout_DQMSG_802() {
    assert_eq!(
        ::std::mem::size_of::<DQMSG_802>(),
        1usize,
        concat!("Size of: ", stringify!(DQMSG_802))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMSG_802>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMSG_802))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_802>())).chnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_802),
            "::",
            stringify!(chnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMSG_802>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMSG_802),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct DQMAN {
    pub count: uint32,
    pub size: uint32,
    pub man_data: [uint8; 256usize],
}
#[test]
fn bindgen_test_layout_DQMAN() {
    assert_eq!(
        ::std::mem::size_of::<DQMAN>(),
        264usize,
        concat!("Size of: ", stringify!(DQMAN))
    );
    assert_eq!(
        ::std::mem::align_of::<DQMAN>(),
        1usize,
        concat!("Alignment of ", stringify!(DQMAN))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMAN>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMAN),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMAN>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMAN),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQMAN>())).man_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQMAN),
            "::",
            stringify!(man_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PL820CFG {
    pub prm_flags: uint32,
    pub port_dir: [uint32; 4usize],
    pub port_out: [uint32; 4usize],
    pub pll_freq: [uint32; 2usize],
    pub pll_div: [uint32; 2usize],
    pub spi_cfg_fpga: [uint32; 2usize],
    pub spi_wm: [uint32; 2usize],
    pub spi_acfg: [uint32; 2usize],
    pub spi_div: [uint32; 2usize],
    pub spi_cfg_cpld: [uint32; 2usize],
    pub nis_dir: [uint32; 2usize],
    pub nis_out: [uint32; 2usize],
    pub nis_out_cpld: [uint32; 2usize],
}
#[test]
fn bindgen_test_layout_PL820CFG() {
    assert_eq!(
        ::std::mem::size_of::<PL820CFG>(),
        116usize,
        concat!("Size of: ", stringify!(PL820CFG))
    );
    assert_eq!(
        ::std::mem::align_of::<PL820CFG>(),
        4usize,
        concat!("Alignment of ", stringify!(PL820CFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).prm_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(prm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).port_dir as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(port_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).port_out as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(port_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).pll_freq as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(pll_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).pll_div as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(pll_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).spi_cfg_fpga as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(spi_cfg_fpga)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).spi_wm as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(spi_wm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).spi_acfg as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(spi_acfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).spi_div as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(spi_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).spi_cfg_cpld as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(spi_cfg_cpld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).nis_dir as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(nis_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).nis_out as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(nis_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PL820CFG>())).nis_out_cpld as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(PL820CFG),
            "::",
            stringify!(nis_out_cpld)
        )
    );
}
pub type pPL820CFG = *mut PL820CFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_820_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_820_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_820_>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_820_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_820_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_820_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_820_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_820_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_820_ {
    pub valid_prm: uint32,
    pub nis_dir: [uint32; 2usize],
    pub nis_out: [uint32; 2usize],
    pub nis_out_cpld: [uint32; 2usize],
    pub lcfg: uint32,
    pub icfg: uint32,
    pub pll_freq: [uint32; 2usize],
    pub pll_div: [uint32; 2usize],
    pub spi_cfg_fpga: [uint32; 2usize],
    pub spi_wm: [uint32; 2usize],
    pub spi_acfg: [uint32; 2usize],
    pub spi_div: [uint32; 2usize],
    pub spi_cfg_cpld: [uint32; 2usize],
    pub port_dir: [uint32; 4usize],
    pub port_out: [uint32; 4usize],
    pub spiN: [uint32; 2usize],
    pub spi0upon: [uint32; 32usize],
    pub spi1upon: [uint32; 32usize],
}
#[test]
fn bindgen_test_layout_DQINITPRM_820_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_820_>(),
        388usize,
        concat!("Size of: ", stringify!(DQINITPRM_820_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_820_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_820_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).valid_prm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(valid_prm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).nis_dir as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(nis_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).nis_out as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(nis_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).nis_out_cpld as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(nis_out_cpld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).lcfg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(lcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).icfg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(icfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).pll_freq as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(pll_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).pll_div as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(pll_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spi_cfg_fpga as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spi_cfg_fpga)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spi_wm as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spi_wm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spi_acfg as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spi_acfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spi_div as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spi_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spi_cfg_cpld as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spi_cfg_cpld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).port_dir as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(port_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).port_out as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(port_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spiN as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spiN)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spi0upon as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spi0upon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_820_>())).spi1upon as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_820_),
            "::",
            stringify!(spi1upon)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_820_ {
    pub valid_prm: uint32,
    pub port_dir: [uint32; 4usize],
    pub port_out: [uint32; 4usize],
    pub lcfg: uint32,
    pub icfg: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_820_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_820_>(),
        44usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_820_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_820_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_820_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_820_>())).valid_prm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_820_),
            "::",
            stringify!(valid_prm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_820_>())).port_dir as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_820_),
            "::",
            stringify!(port_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_820_>())).port_out as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_820_),
            "::",
            stringify!(port_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_820_>())).lcfg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_820_),
            "::",
            stringify!(lcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_820_>())).icfg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_820_),
            "::",
            stringify!(icfg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_820_ {
    pub valid_prm: uint32,
    pub nis_dir: [uint32; 2usize],
    pub nis_out: [uint32; 2usize],
    pub nis_out_cpld: [uint32; 2usize],
    pub lcfg: uint32,
    pub icfg: uint32,
    pub pll_freq: [uint32; 2usize],
    pub pll_div: [uint32; 2usize],
    pub spi_cfg_fpga: [uint32; 2usize],
    pub spi_wm: [uint32; 2usize],
    pub spi_acfg: [uint32; 2usize],
    pub spi_div: [uint32; 2usize],
    pub spi_cfg_cpld: [uint32; 2usize],
    pub port_dir: [uint32; 4usize],
    pub port_out: [uint32; 4usize],
    pub spiN: [uint32; 2usize],
    pub spi0upon: [uint32; 32usize],
    pub spi1upon: [uint32; 32usize],
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_820_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_820_>(),
        388usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_820_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_820_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_820_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).valid_prm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(valid_prm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).nis_dir as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(nis_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).nis_out as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(nis_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).nis_out_cpld as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(nis_out_cpld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).lcfg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(lcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).icfg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(icfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).pll_freq as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(pll_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).pll_div as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(pll_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spi_cfg_fpga as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spi_cfg_fpga)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spi_wm as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spi_wm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spi_acfg as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spi_acfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spi_div as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spi_div)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spi_cfg_cpld as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spi_cfg_cpld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).port_dir as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(port_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).port_out as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(port_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spiN as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spiN)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spi0upon as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spi0upon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_820_>())).spi1upon as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_820_),
            "::",
            stringify!(spi1upon)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_820_ {
    pub valid_prm: uint8,
    pub param: [uint32; 32usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_820_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_820_>(),
        132usize,
        concat!("Size of: ", stringify!(DQCALSET_820_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_820_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQCALSET_820_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_820_>())).valid_prm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_820_),
            "::",
            stringify!(valid_prm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_820_>())).param as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_820_),
            "::",
            stringify!(param)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_90x_ {
    pub cname: [[::std::os::raw::c_char; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_90x_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_90x_>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_90x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_90x_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_90x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_90x_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_90x_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_90x_ {
    pub mask: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_90x_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_90x_>(),
        4usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_90x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_90x_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_90x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_90x_>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_90x_),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_90x_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_90x_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_90x_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_90x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_90x_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_90x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_90x_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_90x_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_90x_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_90x_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_90x_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_90x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_90x_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_90x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_90x_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_90x_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_91x_ {
    pub cnames: [[::std::os::raw::c_char; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_91x_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_91x_>(),
        64usize,
        concat!("Size of: ", stringify!(DQCNAMES_91x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_91x_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_91x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_91x_>())).cnames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_91x_),
            "::",
            stringify!(cnames)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_470_ {
    pub cnames: [[::std::os::raw::c_char; 32usize]; 10usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_470_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_470_>(),
        320usize,
        concat!("Size of: ", stringify!(DQCNAMES_470_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_470_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_470_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_470_>())).cnames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_470_),
            "::",
            stringify!(cnames)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_91x_ {
    pub gain: [uint16; 5usize],
    pub offs: [int16; 5usize],
    pub iscaler_int: int16,
    pub iscaler_ext: int16,
    pub tslope: int16,
    pub fiscaler_int: f64,
    pub fiscaler_ext: f64,
    pub ftslope: f64,
}
#[test]
fn bindgen_test_layout_DQCALSET_91x_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_91x_>(),
        56usize,
        concat!("Size of: ", stringify!(DQCALSET_91x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_91x_>(),
        8usize,
        concat!("Alignment of ", stringify!(DQCALSET_91x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).gain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).offs as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).iscaler_int as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(iscaler_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).iscaler_ext as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(iscaler_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).tslope as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(tslope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).fiscaler_int as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(fiscaler_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).fiscaler_ext as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(fiscaler_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_91x_>())).ftslope as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_91x_),
            "::",
            stringify!(ftslope)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQINITPRM_91x_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQINITPRM_91x_() {
    assert_eq!(
        ::std::mem::size_of::<DQINITPRM_91x_>(),
        4usize,
        concat!("Size of: ", stringify!(DQINITPRM_91x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQINITPRM_91x_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQINITPRM_91x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQINITPRM_91x_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQINITPRM_91x_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_91x_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_91x_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_91x_>(),
        4usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_91x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_91x_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_91x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_91x_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_91x_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQSDOWNPRM_91x_ {
    pub val: uint32,
}
#[test]
fn bindgen_test_layout_DQSDOWNPRM_91x_() {
    assert_eq!(
        ::std::mem::size_of::<DQSDOWNPRM_91x_>(),
        4usize,
        concat!("Size of: ", stringify!(DQSDOWNPRM_91x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQSDOWNPRM_91x_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQSDOWNPRM_91x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQSDOWNPRM_91x_>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQSDOWNPRM_91x_),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQPRMFLAGS_91x_ {
    pub flag_ver: uint32,
}
#[test]
fn bindgen_test_layout_DQPRMFLAGS_91x_() {
    assert_eq!(
        ::std::mem::size_of::<DQPRMFLAGS_91x_>(),
        4usize,
        concat!("Size of: ", stringify!(DQPRMFLAGS_91x_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQPRMFLAGS_91x_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQPRMFLAGS_91x_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQPRMFLAGS_91x_>())).flag_ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQPRMFLAGS_91x_),
            "::",
            stringify!(flag_ver)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCNAMES_LAYER_ {
    pub cname: [[::std::os::raw::c_char; 20usize]; 4usize],
}
#[test]
fn bindgen_test_layout_DQCNAMES_LAYER_() {
    assert_eq!(
        ::std::mem::size_of::<DQCNAMES_LAYER_>(),
        80usize,
        concat!("Size of: ", stringify!(DQCNAMES_LAYER_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCNAMES_LAYER_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCNAMES_LAYER_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCNAMES_LAYER_>())).cname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCNAMES_LAYER_),
            "::",
            stringify!(cname)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCALSET_LAYER_ {
    pub cal: [uint8; 4usize],
}
#[test]
fn bindgen_test_layout_DQCALSET_LAYER_() {
    assert_eq!(
        ::std::mem::size_of::<DQCALSET_LAYER_>(),
        4usize,
        concat!("Size of: ", stringify!(DQCALSET_LAYER_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCALSET_LAYER_>(),
        1usize,
        concat!("Alignment of ", stringify!(DQCALSET_LAYER_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCALSET_LAYER_>())).cal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCALSET_LAYER_),
            "::",
            stringify!(cal)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQOPMODEPRM_LAYER_ {
    pub chlst: [uint32; 8usize],
    pub clperint: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQOPMODEPRM_LAYER_() {
    assert_eq!(
        ::std::mem::size_of::<DQOPMODEPRM_LAYER_>(),
        36usize,
        concat!("Size of: ", stringify!(DQOPMODEPRM_LAYER_))
    );
    assert_eq!(
        ::std::mem::align_of::<DQOPMODEPRM_LAYER_>(),
        4usize,
        concat!("Alignment of ", stringify!(DQOPMODEPRM_LAYER_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_LAYER_>())).chlst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_LAYER_),
            "::",
            stringify!(chlst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQOPMODEPRM_LAYER_>())).clperint as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQOPMODEPRM_LAYER_),
            "::",
            stringify!(clperint)
        )
    );
}
pub type tUeiPalThreadProc =
    ::std::option::Option<unsafe extern "C" fn(param: *mut ::std::os::raw::c_void)>;
pub type tUeiPalObject = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQCVINFO {
    pub step: f64,
    pub offset: f64,
}
#[test]
fn bindgen_test_layout_DQCVINFO() {
    assert_eq!(
        ::std::mem::size_of::<DQCVINFO>(),
        16usize,
        concat!("Size of: ", stringify!(DQCVINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<DQCVINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(DQCVINFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCVINFO>())).step as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCVINFO),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQCVINFO>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQCVINFO),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQDEVCFG {
    pub done: uint32,
    pub digital: uint32,
    pub cfg: uint32,
    pub clsize: uint32,
    pub mbz: [uint32; 4usize],
    pub cl: [uint32; 64usize],
    pub mode: [uint32; 64usize],
    pub cvinfo: [DQCVINFO; 64usize],
    pub chanmax: uint32,
    pub TrigSize: uint32,
    pub TrigMode: [DQSETTRIG; 4usize],
    pub dataBits: uint16,
    pub dataMask: uint32,
    pub comp2Mask: uint32,
    pub bit_shift: int16,
    pub CLClk: f32,
    pub CVClk: f32,
    pub azero_pos: [uint16; 4usize],
    pub n_azero_chans: uint16,
    pub first_az: uint16,
    pub az_on: uint16,
    pub a_z_int: [int32; 4usize],
    pub ts_divider: uint32,
    pub ts_src: uint32,
    pub ts_freq: uint32,
    pub clk_divider: uint32,
    pub clk_cfg: uint32,
}
#[test]
fn bindgen_test_layout__DQDEVCFG() {
    assert_eq!(
        ::std::mem::size_of::<_DQDEVCFG>(),
        1784usize,
        concat!("Size of: ", stringify!(_DQDEVCFG))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQDEVCFG>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQDEVCFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).done as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).digital as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(digital)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).cfg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).clsize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(clsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).mbz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(mbz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).cl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(cl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).mode as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).cvinfo as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(cvinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).chanmax as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(chanmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).TrigSize as *const _ as usize },
        1572usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(TrigSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).TrigMode as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(TrigMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).dataBits as *const _ as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(dataBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).dataMask as *const _ as usize },
        1708usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(dataMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).comp2Mask as *const _ as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(comp2Mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).bit_shift as *const _ as usize },
        1716usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(bit_shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).CLClk as *const _ as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(CLClk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).CVClk as *const _ as usize },
        1724usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(CVClk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).azero_pos as *const _ as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(azero_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).n_azero_chans as *const _ as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(n_azero_chans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).first_az as *const _ as usize },
        1738usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(first_az)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).az_on as *const _ as usize },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(az_on)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).a_z_int as *const _ as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(a_z_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).ts_divider as *const _ as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(ts_divider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).ts_src as *const _ as usize },
        1764usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(ts_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).ts_freq as *const _ as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(ts_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).clk_divider as *const _ as usize },
        1772usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(clk_divider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDEVCFG>())).clk_cfg as *const _ as usize },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDEVCFG),
            "::",
            stringify!(clk_cfg)
        )
    );
}
pub type DQDEVCFG = _DQDEVCFG;
pub type pDQDEVCFG = *mut _DQDEVCFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _pDQACBCFG {
    pub samplesz: uint32,
    pub valuesz: uint32,
    pub scansz: uint32,
    pub framesize: uint32,
    pub frames: uint32,
    pub ppevent: uint32,
    pub mode: uint32,
    pub dirflags: uint32,
    pub maxpktsize: uint32,
    pub hwbufsize: uint32,
    pub hostringsz: uint32,
    pub wtrmark: uint32,
    pub eucoeff: f64,
    pub euoffset: f64,
    pub euconvert: ::std::option::Option<unsafe extern "C" fn(chan: uint32, value: f64) -> f64>,
}
#[test]
fn bindgen_test_layout__pDQACBCFG() {
    assert_eq!(
        ::std::mem::size_of::<_pDQACBCFG>(),
        72usize,
        concat!("Size of: ", stringify!(_pDQACBCFG))
    );
    assert_eq!(
        ::std::mem::align_of::<_pDQACBCFG>(),
        8usize,
        concat!("Alignment of ", stringify!(_pDQACBCFG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).samplesz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(samplesz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).valuesz as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(valuesz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).scansz as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(scansz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).framesize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(framesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).frames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).ppevent as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(ppevent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).dirflags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(dirflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).maxpktsize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(maxpktsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).hwbufsize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(hwbufsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).hostringsz as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(hostringsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).wtrmark as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(wtrmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).eucoeff as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(eucoeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).euoffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(euoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pDQACBCFG>())).euconvert as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_pDQACBCFG),
            "::",
            stringify!(euconvert)
        )
    );
}
pub type DQACBCFG = _pDQACBCFG;
pub type pDQACBCFG = *mut _pDQACBCFG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQACBMISSING {
    pub ptr: *mut uint32,
    pub sizein: uint32,
    pub size: uint32,
    pub missinghead: uint32,
    pub missingtail: uint32,
}
#[test]
fn bindgen_test_layout__DQACBMISSING() {
    assert_eq!(
        ::std::mem::size_of::<_DQACBMISSING>(),
        24usize,
        concat!("Size of: ", stringify!(_DQACBMISSING))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQACBMISSING>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQACBMISSING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACBMISSING>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACBMISSING),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACBMISSING>())).sizein as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACBMISSING),
            "::",
            stringify!(sizein)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACBMISSING>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACBMISSING),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACBMISSING>())).missinghead as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACBMISSING),
            "::",
            stringify!(missinghead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACBMISSING>())).missingtail as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACBMISSING),
            "::",
            stringify!(missingtail)
        )
    );
}
pub type DQACBMISS = _DQACBMISSING;
pub type pDQACBMISS = *mut _DQACBMISSING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQMSGMISSING {
    pub ptr: *mut uint32,
    pub sizein: uint32,
    pub size: uint32,
    pub missinghead: uint32,
    pub missingtail: uint32,
}
#[test]
fn bindgen_test_layout__DQMSGMISSING() {
    assert_eq!(
        ::std::mem::size_of::<_DQMSGMISSING>(),
        24usize,
        concat!("Size of: ", stringify!(_DQMSGMISSING))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQMSGMISSING>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQMSGMISSING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGMISSING>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGMISSING),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGMISSING>())).sizein as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGMISSING),
            "::",
            stringify!(sizein)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGMISSING>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGMISSING),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGMISSING>())).missinghead as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGMISSING),
            "::",
            stringify!(missinghead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGMISSING>())).missingtail as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGMISSING),
            "::",
            stringify!(missingtail)
        )
    );
}
pub type DQMSGMISS = _DQMSGMISSING;
pub type pDQMSGMISS = *mut _DQMSGMISSING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQACB {
    pub pBuf: *mut uint8,
    pub pAdd: *mut uint8,
    pub pRemove: *mut uint8,
    pub wrapped: uint32,
    pub pDQRingBuf: *mut _DQRingBufHead,
    pub acbcfg: DQACBCFG,
    pub dev: uint8,
    pub ss: uint8,
    pub pMissing: pDQACBMISS,
    pub rcvctr: uint32,
    pub cooldown: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__DQACB() {
    assert_eq!(
        ::std::mem::size_of::<_DQACB>(),
        136usize,
        concat!("Size of: ", stringify!(_DQACB))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQACB>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQACB))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).pBuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(pBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).pAdd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(pAdd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).pRemove as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(pRemove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).wrapped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(wrapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).pDQRingBuf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(pDQRingBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).acbcfg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(acbcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).dev as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).ss as *const _ as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).pMissing as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(pMissing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).rcvctr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(rcvctr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQACB>())).cooldown as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQACB),
            "::",
            stringify!(cooldown)
        )
    );
}
pub type DQACB = _DQACB;
pub type pDQACB = *mut _DQACB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQDmapTRL {
    pub TrL: DQSETTRL,
    pub offset: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub flags: uint32,
}
#[test]
fn bindgen_test_layout__DQDmapTRL() {
    assert_eq!(
        ::std::mem::size_of::<_DQDmapTRL>(),
        28usize,
        concat!("Size of: ", stringify!(_DQDmapTRL))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQDmapTRL>(),
        4usize,
        concat!("Alignment of ", stringify!(_DQDmapTRL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDmapTRL>())).TrL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDmapTRL),
            "::",
            stringify!(TrL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDmapTRL>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDmapTRL),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDmapTRL>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDmapTRL),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDmapTRL>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDmapTRL),
            "::",
            stringify!(flags)
        )
    );
}
pub type DQDmapTRL = _DQDmapTRL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQDMAP {
    pub dmapid: uint32,
    pub clkdiv: ::std::os::raw::c_int,
    pub TrListId: ::std::os::raw::c_int,
    pub TrLSize: uint32,
    pub sizein: uint32,
    pub sizeout: uint32,
    pub nextCtr: uint16,
    pub lastCtr: uint16,
    pub TrL: [DQDmapTRL; 2048usize],
    pub TrLInitialized: [::std::os::raw::c_int; 2048usize],
    pub mapin: [uint8; 1456usize],
    pub mapout: [uint8; 1456usize],
}
#[test]
fn bindgen_test_layout__DQDMAP() {
    assert_eq!(
        ::std::mem::size_of::<_DQDMAP>(),
        68476usize,
        concat!("Size of: ", stringify!(_DQDMAP))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQDMAP>(),
        4usize,
        concat!("Alignment of ", stringify!(_DQDMAP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).dmapid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(dmapid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).clkdiv as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(clkdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).TrListId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(TrListId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).TrLSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(TrLSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).sizein as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(sizein)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).sizeout as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(sizeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).nextCtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(nextCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).lastCtr as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(lastCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).TrL as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(TrL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).TrLInitialized as *const _ as usize },
        57372usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(TrLInitialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).mapin as *const _ as usize },
        65564usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(mapin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQDMAP>())).mapout as *const _ as usize },
        67020usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQDMAP),
            "::",
            stringify!(mapout)
        )
    );
}
pub type DQDMAP = _DQDMAP;
pub type pDQDMAP = *mut _DQDMAP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQBCB {
    pub iom: ::std::os::raw::c_int,
    pub pCqe: *mut _DQCQENTRY,
    pub pDqe: *mut _DQE,
    pub uBufType: ::std::os::raw::c_int,
    pub uBuf: _DQBCB__bindgen_ty_1,
    pub Critical: tUeiPalObject,
    pub hRdrThreadEvt: tUeiPalObject,
    pub hWrtThreadEvt: tUeiPalObject,
    pub nRdrThreadFlags: uint32,
    pub nWrtThreadFlags: uint32,
    pub RdrThreadId: tUeiPalObject,
    pub WrtThreadId: tUeiPalObject,
    pub hBcbEvent: tUeiPalObject,
    pub nBcbEvent: uint32,
    pub nNewEvent: uint32,
    pub num: uint32,
    pub byterate: f64,
    pub packetrate: f64,
    pub NextBcb: *mut _DQBCB,
    pub PrevBcb: *mut _DQBCB,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DQBCB__bindgen_ty_1 {
    pub pAcb: pDQACB,
    pub pDmap: pDQDMAP,
    pub pMsgQ: *mut _DQMSGQ,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__DQBCB__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_DQBCB__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_DQBCB__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQBCB__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQBCB__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB__bindgen_ty_1>())).pAcb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB__bindgen_ty_1),
            "::",
            stringify!(pAcb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB__bindgen_ty_1>())).pDmap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB__bindgen_ty_1),
            "::",
            stringify!(pDmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB__bindgen_ty_1>())).pMsgQ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB__bindgen_ty_1),
            "::",
            stringify!(pMsgQ)
        )
    );
}
#[test]
fn bindgen_test_layout__DQBCB() {
    assert_eq!(
        ::std::mem::size_of::<_DQBCB>(),
        144usize,
        concat!("Size of: ", stringify!(_DQBCB))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQBCB>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQBCB))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).iom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(iom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).pCqe as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(pCqe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).pDqe as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(pDqe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).uBufType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(uBufType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).uBuf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(uBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).Critical as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(Critical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).hRdrThreadEvt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(hRdrThreadEvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).hWrtThreadEvt as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(hWrtThreadEvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).nRdrThreadFlags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(nRdrThreadFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).nWrtThreadFlags as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(nWrtThreadFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).RdrThreadId as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(RdrThreadId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).WrtThreadId as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(WrtThreadId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).hBcbEvent as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(hBcbEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).nBcbEvent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(nBcbEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).nNewEvent as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(nNewEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).num as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).byterate as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(byterate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).packetrate as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(packetrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).NextBcb as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(NextBcb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQBCB>())).PrevBcb as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQBCB),
            "::",
            stringify!(PrevBcb)
        )
    );
}
pub type DQBCB = _DQBCB;
pub type pDQBCB = *mut _DQBCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQCQENTRY {
    pub prev: ::std::os::raw::c_int,
    pub next: ::std::os::raw::c_int,
    pub busy: ::std::os::raw::c_int,
    pub sticky: ::std::os::raw::c_int,
    pub send: ::std::os::raw::c_int,
    pub maxRetries: ::std::os::raw::c_int,
    pub retryCtr: ::std::os::raw::c_int,
    pub rqId: uint32,
    pub requiresAnswer: ::std::os::raw::c_int,
    pub waitingForAnswer: ::std::os::raw::c_int,
    pub SndCB: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut _DQCQENTRY,
            iom: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub RcvCB: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut _DQCQENTRY,
            iom: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub outBuf: *mut uint8,
    pub outLen: ::std::os::raw::c_int,
    pub inBuf: *mut uint8,
    pub inLen: ::std::os::raw::c_int,
    pub period: ::std::os::raw::c_int,
    pub timeToSend: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_int,
    pub lasttimeout: ::std::os::raw::c_int,
    pub time2Tmo: ::std::os::raw::c_int,
    pub syncObj: tUeiPalObject,
    pub bcb: pDQBCB,
    pub pktErr: uint32,
    pub sndErr: ::std::os::raw::c_int,
    pub rcvErr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__DQCQENTRY() {
    assert_eq!(
        ::std::mem::size_of::<_DQCQENTRY>(),
        136usize,
        concat!("Size of: ", stringify!(_DQCQENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQCQENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQCQENTRY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).next as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).busy as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).sticky as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(sticky)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).send as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).maxRetries as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(maxRetries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).retryCtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(retryCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).rqId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(rqId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).requiresAnswer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(requiresAnswer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).waitingForAnswer as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(waitingForAnswer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).SndCB as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(SndCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).RcvCB as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(RcvCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).outBuf as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(outBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).outLen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(outLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).inBuf as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(inBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).inLen as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(inLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).period as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).timeToSend as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(timeToSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).timeout as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).lasttimeout as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(lasttimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).time2Tmo as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(time2Tmo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).syncObj as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(syncObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).bcb as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(bcb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).pktErr as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(pktErr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).sndErr as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(sndErr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQENTRY>())).rcvErr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQENTRY),
            "::",
            stringify!(rcvErr)
        )
    );
}
pub type DQCQE = _DQCQENTRY;
pub type pDQCQE = *mut _DQCQENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQCQHead {
    pub freeList: ::std::os::raw::c_int,
    pub busyListFirst: ::std::os::raw::c_int,
    pub busyListLast: ::std::os::raw::c_int,
    pub cqSize: ::std::os::raw::c_int,
    pub cqCurSize: ::std::os::raw::c_int,
    pub Critical: tUeiPalObject,
    pub queue: pDQCQE,
}
#[test]
fn bindgen_test_layout__DQCQHead() {
    assert_eq!(
        ::std::mem::size_of::<_DQCQHead>(),
        40usize,
        concat!("Size of: ", stringify!(_DQCQHead))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQCQHead>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQCQHead))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQHead>())).freeList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQHead),
            "::",
            stringify!(freeList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQHead>())).busyListFirst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQHead),
            "::",
            stringify!(busyListFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQHead>())).busyListLast as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQHead),
            "::",
            stringify!(busyListLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQHead>())).cqSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQHead),
            "::",
            stringify!(cqSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQHead>())).cqCurSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQHead),
            "::",
            stringify!(cqCurSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQHead>())).Critical as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQHead),
            "::",
            stringify!(Critical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQCQHead>())).queue as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQCQHead),
            "::",
            stringify!(queue)
        )
    );
}
pub type DQCQHEAD = _DQCQHead;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQE {
    pub DqeID: uint32,
    pub Running: ::std::os::raw::c_int,
    pub hinst: uint32,
    pub sock1: SOCKET,
    pub SendAddr: sockaddr_in,
    pub RecvAddr: sockaddr_in,
    pub RecvInfo: sockaddr_in,
    pub RecvInfoSize: ::std::os::raw::c_int,
    pub SendInfoSize: ::std::os::raw::c_int,
    pub udp_port: uint16,
    pub psbuf: *mut ::std::os::raw::c_char,
    pub psbufsz: ::std::os::raw::c_int,
    pub prbuf: *mut ::std::os::raw::c_char,
    pub prbufsz: ::std::os::raw::c_int,
    pub BcbHead: *mut _DQBCB,
    pub uPeriod: uint32,
    pub uDelay: uint32,
    pub dq_utimer: tUeiPalThreadProc,
    pub dwUser: *mut ::std::os::raw::c_void,
    pub fuEvent: uint32,
    pub uTimerID: tUeiPalObject,
    pub hSyncEvt: [tUeiPalObject; 4usize],
    pub RecvThreadId: tUeiPalObject,
    pub SendThreadId: tUeiPalObject,
    pub timeout: uint32,
    pub timeout_rereq: uint32,
    pub lasttimeout_rereq: uint32,
    pub retries_async: uint32,
    pub retries_receive: uint32,
    pub retries_send: uint32,
    pub retries_rereq: uint32,
    pub max_inbound_packet: uint32,
    pub max_outbound_packet: uint32,
    pub abort_after: uint32,
    pub use_protocol: uint32,
    pub packets_at_once: uint32,
    pub num: uint32,
}
#[test]
fn bindgen_test_layout__DQE() {
    assert_eq!(
        ::std::mem::size_of::<_DQE>(),
        264usize,
        concat!("Size of: ", stringify!(_DQE))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQE>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).DqeID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(DqeID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).Running as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(Running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).hinst as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(hinst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).sock1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(sock1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).SendAddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(SendAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).RecvAddr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(RecvAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).RecvInfo as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(RecvInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).RecvInfoSize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(RecvInfoSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).SendInfoSize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(SendInfoSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).udp_port as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(udp_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).psbuf as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(psbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).psbufsz as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(psbufsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).prbuf as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(prbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).prbufsz as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(prbufsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).BcbHead as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(BcbHead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).uPeriod as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(uPeriod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).uDelay as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(uDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).dq_utimer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(dq_utimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).dwUser as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(dwUser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).fuEvent as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(fuEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).uTimerID as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(uTimerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).hSyncEvt as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(hSyncEvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).RecvThreadId as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(RecvThreadId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).SendThreadId as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(SendThreadId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).timeout as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).timeout_rereq as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(timeout_rereq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).lasttimeout_rereq as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(lasttimeout_rereq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).retries_async as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(retries_async)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).retries_receive as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(retries_receive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).retries_send as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(retries_send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).retries_rereq as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(retries_rereq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).max_inbound_packet as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(max_inbound_packet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).max_outbound_packet as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(max_outbound_packet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).abort_after as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(abort_after)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).use_protocol as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(use_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).packets_at_once as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQE),
            "::",
            stringify!(packets_at_once)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQE>())).num as *const _ as usize },
        256usize,
        concat!("Offset of field: ", stringify!(_DQE), "::", stringify!(num))
    );
}
pub type DQE = _DQE;
pub type pDQE = *mut _DQE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQINSTE {
    pub hinst: uint32,
    pub pDqe: pDQE,
    pub numDqe: uint32,
}
#[test]
fn bindgen_test_layout__DQINSTE() {
    assert_eq!(
        ::std::mem::size_of::<_DQINSTE>(),
        24usize,
        concat!("Size of: ", stringify!(_DQINSTE))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQINSTE>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQINSTE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQINSTE>())).hinst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQINSTE),
            "::",
            stringify!(hinst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQINSTE>())).pDqe as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQINSTE),
            "::",
            stringify!(pDqe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQINSTE>())).numDqe as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQINSTE),
            "::",
            stringify!(numDqe)
        )
    );
}
pub type DQINSTE = _DQINSTE;
pub const _DqTransportType_DqTransportTypeBSDSocket: _DqTransportType = 0;
pub const _DqTransportType_DqTransportTypeDQEngine: _DqTransportType = 1;
pub const _DqTransportType_DqTransportTypeLocal: _DqTransportType = 2;
pub const _DqTransportType_DqTransportTypeSharedMemory: _DqTransportType = 3;
pub const _DqTransportType_DqTransportTypeUSB: _DqTransportType = 4;
pub const _DqTransportType_DqTransportTypeFSI: _DqTransportType = 5;
pub type _DqTransportType = ::std::os::raw::c_uint;
pub use self::_DqTransportType as DQTRANSPORTTYPE;
pub type DQTRANSPORTDESC = _DqTransportDescriptor;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DqTransportFuncs {
    pub ComInit: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ::std::os::raw::c_int,
            nic: ::std::os::raw::c_int,
            address: *mut ::std::os::raw::c_char,
            port: uint32,
        ) -> ::std::os::raw::c_int,
    >,
    pub ComSend: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ::std::os::raw::c_int,
            buf: *const int8,
            len: int32,
            flags: int32,
        ) -> ::std::os::raw::c_int,
    >,
    pub ComSendBrCast: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ::std::os::raw::c_int,
            buf: *const int8,
            len: int32,
            flags: int32,
        ) -> ::std::os::raw::c_int,
    >,
    pub ComReceive: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ::std::os::raw::c_int,
            buf: *mut int8,
            len: int32,
            flags: int32,
        ) -> ::std::os::raw::c_int,
    >,
    pub ComWait: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ::std::os::raw::c_int,
            timeout: int32,
        ) -> ::std::os::raw::c_int,
    >,
    pub ComWaituS: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ::std::os::raw::c_int,
            timeout_us: int32,
        ) -> ::std::os::raw::c_int,
    >,
    pub ComClose: ::std::option::Option<
        unsafe extern "C" fn(handle: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__DqTransportFuncs() {
    assert_eq!(
        ::std::mem::size_of::<_DqTransportFuncs>(),
        56usize,
        concat!("Size of: ", stringify!(_DqTransportFuncs))
    );
    assert_eq!(
        ::std::mem::align_of::<_DqTransportFuncs>(),
        8usize,
        concat!("Alignment of ", stringify!(_DqTransportFuncs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportFuncs>())).ComInit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportFuncs),
            "::",
            stringify!(ComInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportFuncs>())).ComSend as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportFuncs),
            "::",
            stringify!(ComSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportFuncs>())).ComSendBrCast as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportFuncs),
            "::",
            stringify!(ComSendBrCast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportFuncs>())).ComReceive as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportFuncs),
            "::",
            stringify!(ComReceive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportFuncs>())).ComWait as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportFuncs),
            "::",
            stringify!(ComWait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportFuncs>())).ComWaituS as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportFuncs),
            "::",
            stringify!(ComWaituS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportFuncs>())).ComClose as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportFuncs),
            "::",
            stringify!(ComClose)
        )
    );
}
pub type DQTRANSPORTFUNCS = _DqTransportFuncs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DqTransportDescriptor {
    pub type_: DQTRANSPORTTYPE,
    pub comFuncs: DQTRANSPORTFUNCS,
}
#[test]
fn bindgen_test_layout__DqTransportDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<_DqTransportDescriptor>(),
        64usize,
        concat!("Size of: ", stringify!(_DqTransportDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<_DqTransportDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(_DqTransportDescriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportDescriptor>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportDescriptor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqTransportDescriptor>())).comFuncs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqTransportDescriptor),
            "::",
            stringify!(comFuncs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQRTRCQUEUE {
    pub inuse: ::std::os::raw::c_int,
    pub newpkt: ::std::os::raw::c_int,
    pub signaled: ::std::os::raw::c_int,
    pub dmap: ::std::os::raw::c_int,
    pub RqId: uint32,
    pub pRcvPkt: pDQPKT,
    pub RcvPktSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQRTRCQUEUE() {
    assert_eq!(
        ::std::mem::size_of::<DQRTRCQUEUE>(),
        40usize,
        concat!("Size of: ", stringify!(DQRTRCQUEUE))
    );
    assert_eq!(
        ::std::mem::align_of::<DQRTRCQUEUE>(),
        8usize,
        concat!("Alignment of ", stringify!(DQRTRCQUEUE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCQUEUE>())).inuse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCQUEUE),
            "::",
            stringify!(inuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCQUEUE>())).newpkt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCQUEUE),
            "::",
            stringify!(newpkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCQUEUE>())).signaled as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCQUEUE),
            "::",
            stringify!(signaled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCQUEUE>())).dmap as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCQUEUE),
            "::",
            stringify!(dmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCQUEUE>())).RqId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCQUEUE),
            "::",
            stringify!(RqId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCQUEUE>())).pRcvPkt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCQUEUE),
            "::",
            stringify!(pRcvPkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCQUEUE>())).RcvPktSize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCQUEUE),
            "::",
            stringify!(RcvPktSize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQRTRCASYNC {
    pub assigned: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            flags: *mut uint32,
            buf: pDQPKT,
            size: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub event: tUeiPalObject,
}
#[test]
fn bindgen_test_layout_DQRTRCASYNC() {
    assert_eq!(
        ::std::mem::size_of::<DQRTRCASYNC>(),
        24usize,
        concat!("Size of: ", stringify!(DQRTRCASYNC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQRTRCASYNC>(),
        8usize,
        concat!("Alignment of ", stringify!(DQRTRCASYNC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCASYNC>())).assigned as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCASYNC),
            "::",
            stringify!(assigned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCASYNC>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCASYNC),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCASYNC>())).callback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCASYNC),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQRTRCASYNC>())).event as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQRTRCASYNC),
            "::",
            stringify!(event)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQXHANDLE {
    pub handle: int32,
    pub paTransport: *mut DQTRANSPORTDESC,
    pub aTimeOut: int32,
    pub aUdpPort: int32,
    pub aDQSendPkt: *mut DQPKT,
    pub aDQRecvPkt: *mut DQPKT,
    pub aCounter: uint32,
    pub Critical: tUeiPalObject,
}
#[test]
fn bindgen_test_layout_DQXHANDLE() {
    assert_eq!(
        ::std::mem::size_of::<DQXHANDLE>(),
        56usize,
        concat!("Size of: ", stringify!(DQXHANDLE))
    );
    assert_eq!(
        ::std::mem::align_of::<DQXHANDLE>(),
        8usize,
        concat!("Alignment of ", stringify!(DQXHANDLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).paTransport as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(paTransport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).aTimeOut as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(aTimeOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).aUdpPort as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(aUdpPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).aDQSendPkt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(aDQSendPkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).aDQRecvPkt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(aDQRecvPkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).aCounter as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(aCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQXHANDLE>())).Critical as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQXHANDLE),
            "::",
            stringify!(Critical)
        )
    );
}
pub type pDQXHANDLE = *mut DQXHANDLE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTOHX {
    pub pfNtohl: ::std::option::Option<unsafe extern "C" fn(arg1: u_long) -> u_long>,
    pub pfNtohs: ::std::option::Option<unsafe extern "C" fn(arg1: u_short) -> u_short>,
    pub pfHtonl: ::std::option::Option<unsafe extern "C" fn(arg1: u_long) -> u_long>,
    pub pfHtons: ::std::option::Option<unsafe extern "C" fn(arg1: u_short) -> u_short>,
    pub pfHtonf: ::std::option::Option<unsafe extern "C" fn(arg1: f32) -> f32>,
    pub pfNtohf: ::std::option::Option<unsafe extern "C" fn(arg1: f32) -> f32>,
    pub pfHtondbl: ::std::option::Option<unsafe extern "C" fn(arg1: f64) -> f64>,
    pub pfNtohdbl: ::std::option::Option<unsafe extern "C" fn(arg1: f64) -> f64>,
}
#[test]
fn bindgen_test_layout_XTOHX() {
    assert_eq!(
        ::std::mem::size_of::<XTOHX>(),
        64usize,
        concat!("Size of: ", stringify!(XTOHX))
    );
    assert_eq!(
        ::std::mem::align_of::<XTOHX>(),
        8usize,
        concat!("Alignment of ", stringify!(XTOHX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfNtohl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfNtohl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfNtohs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfNtohs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfHtonl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfHtonl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfHtons as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfHtons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfHtonf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfHtonf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfNtohf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfNtohf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfHtondbl as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfHtondbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTOHX>())).pfNtohdbl as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTOHX),
            "::",
            stringify!(pfNtohdbl)
        )
    );
}
pub type pXTOHX = *mut XTOHX;
pub type raw2scale_t = ::std::option::Option<
    unsafe extern "C" fn(
        pdc: *mut DATACONV_T,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int,
>;
pub type scale2raw_t = ::std::option::Option<
    unsafe extern "C" fn(
        pdc: *mut DATACONV_T,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DATACONV_HDR_T {
    pub libversion: uint32,
    pub byteorder: uint32,
    pub serial: uint32,
    pub model: int16,
    pub option: int16,
    pub dev: int16,
    pub ss: int16,
    pub autozero_on_off: uint16,
    pub sample_sz: uint16,
    pub ch_lst_sz: uint32,
    pub cl: [uint32; 64usize],
    pub step: [f64; 64usize],
    pub offset: [f64; 64usize],
    pub xormask: [uint32; 64usize],
    pub andmask: [uint32; 64usize],
    pub shift: [::std::os::raw::c_int; 64usize],
    pub CalDataSz: ::std::os::raw::c_int,
    pub CalDataOffs: ::std::os::raw::c_int,
    pub CalDataSz2: ::std::os::raw::c_int,
    pub CalDataOffs2: ::std::os::raw::c_int,
    pub ts_divider: ::std::os::raw::c_int,
    pub ts_freq: uint32,
}
#[test]
fn bindgen_test_layout_DATACONV_HDR_T() {
    assert_eq!(
        ::std::mem::size_of::<DATACONV_HDR_T>(),
        2104usize,
        concat!("Size of: ", stringify!(DATACONV_HDR_T))
    );
    assert_eq!(
        ::std::mem::align_of::<DATACONV_HDR_T>(),
        8usize,
        concat!("Alignment of ", stringify!(DATACONV_HDR_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).libversion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(libversion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).byteorder as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(byteorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).serial as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(serial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).model as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).option as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).dev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).ss as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).autozero_on_off as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(autozero_on_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).sample_sz as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(sample_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).ch_lst_sz as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(ch_lst_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).cl as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(cl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).step as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).offset as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).xormask as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(xormask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).andmask as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(andmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).shift as *const _ as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).CalDataSz as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(CalDataSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).CalDataOffs as *const _ as usize },
        2084usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(CalDataOffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).CalDataSz2 as *const _ as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(CalDataSz2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).CalDataOffs2 as *const _ as usize },
        2092usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(CalDataOffs2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).ts_divider as *const _ as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(ts_divider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_HDR_T>())).ts_freq as *const _ as usize },
        2100usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_HDR_T),
            "::",
            stringify!(ts_freq)
        )
    );
}
pub type DATACONV_HDR = DATACONV_HDR_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DATACONV_T {
    pub dc: DATACONV_HDR,
    pub self_: *mut ::std::os::raw::c_void,
    pub ppf: pXTOHX,
    pub raw2scale: raw2scale_t,
    pub scale2raw: scale2raw_t,
    pub pCalData: *mut ::std::os::raw::c_void,
    pub pCalData2: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DATACONV_T() {
    assert_eq!(
        ::std::mem::size_of::<DATACONV_T>(),
        2152usize,
        concat!("Size of: ", stringify!(DATACONV_T))
    );
    assert_eq!(
        ::std::mem::align_of::<DATACONV_T>(),
        8usize,
        concat!("Alignment of ", stringify!(DATACONV_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_T>())).dc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_T),
            "::",
            stringify!(dc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_T>())).self_ as *const _ as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_T),
            "::",
            stringify!(self_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_T>())).ppf as *const _ as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_T),
            "::",
            stringify!(ppf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_T>())).raw2scale as *const _ as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_T),
            "::",
            stringify!(raw2scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_T>())).scale2raw as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_T),
            "::",
            stringify!(scale2raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_T>())).pCalData as *const _ as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_T),
            "::",
            stringify!(pCalData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DATACONV_T>())).pCalData2 as *const _ as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(DATACONV_T),
            "::",
            stringify!(pCalData2)
        )
    );
}
pub type DATACONV = DATACONV_T;
pub type pDATACONV = *mut DATACONV_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQIOME {
    pub hinst: uint32,
    pub Index: int32,
    pub handle: int32,
    pub handleCount: int32,
    pub xhandle: [pDQXHANDLE; 64usize],
    pub aRcAsync: [DQRTRCASYNC; 64usize],
    pub IP: uint32,
    pub Port: uint32,
    pub error_cnt: uint32,
    pub TimeOut: uint32,
    pub dqcmd_ioctl: uint32,
    pub dqcmd_ioctlr: uint32,
    pub NumDev: uint32,
    pub MaxEthSize: uint32,
    pub MaxUdpPayload: uint32,
    pub MinUdpPayload: uint32,
    pub MaxDqPayload: uint32,
    pub MaxDqPacketSize: uint32,
    pub MaxEthFrag: uint32,
    pub MaxEthSizeBuf: uint32,
    pub MaxUdpPayloadBuf: uint32,
    pub MaxDqPayloadBuf: uint32,
    pub MaxDqPacketSizeBuf: uint32,
    pub DQSizeObtained: uint32,
    pub last_rcv_tstamp: uint16,
    pub last_rcv_counter: uint16,
    pub DQSendPkt: *mut DQPKT,
    pub DQRecvPkt: *mut DQPKT,
    pub AcbNum: uint32,
    pub CalData: [*mut uint8; 32usize],
    pub CalSize: [uint32; 32usize],
    pub dataconv: [DATACONV; 32usize],
    pub filterscfg: [uint32; 64usize],
    pub pDQRdCfg: *mut DQRDCFG,
    pub DQCfgObtained: uint32,
    pub capsInfo: [[::std::os::raw::c_char; 4096usize]; 32usize],
    pub useHeartBeat: uint32,
    pub ready: uint32,
    pub status: *mut uint32,
    pub modemask: uint32,
    pub devmask: uint32,
    pub trigmask: uint32,
    pub stickyRqIdPool: uint32,
    pub nextNonStickyRqId: uint32,
    pub Critical: tUeiPalObject,
    pub pDqe: pDQE,
    pub layerBCB: [[pDQBCB; 2usize]; 32usize],
    pub pdcfg: [[pDQDEVCFG; 8usize]; 32usize],
    pub sig: [SGNLS; 33usize],
    pub syncpll: SYNCPLL,
    pub syncrt: [SYNCRT; 33usize],
    pub rcounter: [[uint16; 64usize]; 33usize],
    pub iom_info: [::std::os::raw::c_char; 4096usize],
    pub DevBaseAddr: [uint32; 32usize],
    pub DevModel: [uint16; 32usize],
    pub DevOption: [uint16; 32usize],
    pub DevSerialNumber: [uint32; 32usize],
    pub pTransport: *mut DQTRANSPORTDESC,
    pub devobj: [*mut ::std::os::raw::c_void; 32usize],
    pub CtrIoctl: uint16,
    pub CtrDqPkt: uint16,
    pub syncl_freq: [uint32; 4usize],
    pub FlashSz: uint32,
    pub RAMSz: uint32,
    pub pf: XTOHX,
}
#[test]
fn bindgen_test_layout__DQIOME() {
    assert_eq!(
        ::std::mem::size_of::<_DQIOME>(),
        216176usize,
        concat!("Size of: ", stringify!(_DQIOME))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQIOME>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQIOME))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).hinst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(hinst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).Index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).handleCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(handleCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).xhandle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(xhandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).aRcAsync as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(aRcAsync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).IP as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(IP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).Port as *const _ as usize },
        2068usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).error_cnt as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(error_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).TimeOut as *const _ as usize },
        2076usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(TimeOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).dqcmd_ioctl as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(dqcmd_ioctl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).dqcmd_ioctlr as *const _ as usize },
        2084usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(dqcmd_ioctlr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).NumDev as *const _ as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(NumDev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxEthSize as *const _ as usize },
        2092usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxEthSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxUdpPayload as *const _ as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxUdpPayload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MinUdpPayload as *const _ as usize },
        2100usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MinUdpPayload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxDqPayload as *const _ as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxDqPayload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxDqPacketSize as *const _ as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxDqPacketSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxEthFrag as *const _ as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxEthFrag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxEthSizeBuf as *const _ as usize },
        2116usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxEthSizeBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxUdpPayloadBuf as *const _ as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxUdpPayloadBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxDqPayloadBuf as *const _ as usize },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxDqPayloadBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).MaxDqPacketSizeBuf as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(MaxDqPacketSizeBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DQSizeObtained as *const _ as usize },
        2132usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DQSizeObtained)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).last_rcv_tstamp as *const _ as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(last_rcv_tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).last_rcv_counter as *const _ as usize },
        2138usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(last_rcv_counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DQSendPkt as *const _ as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DQSendPkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DQRecvPkt as *const _ as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DQRecvPkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).AcbNum as *const _ as usize },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(AcbNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).CalData as *const _ as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(CalData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).CalSize as *const _ as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(CalSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).dataconv as *const _ as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(dataconv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).filterscfg as *const _ as usize },
        71416usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(filterscfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).pDQRdCfg as *const _ as usize },
        71672usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(pDQRdCfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DQCfgObtained as *const _ as usize },
        71680usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DQCfgObtained)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).capsInfo as *const _ as usize },
        71684usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(capsInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).useHeartBeat as *const _ as usize },
        202756usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(useHeartBeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).ready as *const _ as usize },
        202760usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(ready)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).status as *const _ as usize },
        202768usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).modemask as *const _ as usize },
        202776usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(modemask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).devmask as *const _ as usize },
        202780usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(devmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).trigmask as *const _ as usize },
        202784usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(trigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).stickyRqIdPool as *const _ as usize },
        202788usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(stickyRqIdPool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).nextNonStickyRqId as *const _ as usize },
        202792usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(nextNonStickyRqId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).Critical as *const _ as usize },
        202800usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(Critical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).pDqe as *const _ as usize },
        202808usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(pDqe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).layerBCB as *const _ as usize },
        202816usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(layerBCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).pdcfg as *const _ as usize },
        203328usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(pdcfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).sig as *const _ as usize },
        205376usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).syncpll as *const _ as usize },
        206564usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(syncpll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).syncrt as *const _ as usize },
        206580usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(syncrt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).rcounter as *const _ as usize },
        207108usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(rcounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).iom_info as *const _ as usize },
        211332usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(iom_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DevBaseAddr as *const _ as usize },
        215428usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DevBaseAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DevModel as *const _ as usize },
        215556usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DevModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DevOption as *const _ as usize },
        215620usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DevOption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).DevSerialNumber as *const _ as usize },
        215684usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(DevSerialNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).pTransport as *const _ as usize },
        215816usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(pTransport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).devobj as *const _ as usize },
        215824usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(devobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).CtrIoctl as *const _ as usize },
        216080usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(CtrIoctl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).CtrDqPkt as *const _ as usize },
        216082usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(CtrDqPkt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).syncl_freq as *const _ as usize },
        216084usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(syncl_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).FlashSz as *const _ as usize },
        216100usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(FlashSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).RAMSz as *const _ as usize },
        216104usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(RAMSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQIOME>())).pf as *const _ as usize },
        216112usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQIOME),
            "::",
            stringify!(pf)
        )
    );
}
pub type DQIOME = _DQIOME;
pub type pDQIOME = *mut _DQIOME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQRingBuf {
    pub dqCounter: uint16,
    pub errors: uint32,
    pub Fifo: pDQFIFO,
}
#[test]
fn bindgen_test_layout__DQRingBuf() {
    assert_eq!(
        ::std::mem::size_of::<_DQRingBuf>(),
        16usize,
        concat!("Size of: ", stringify!(_DQRingBuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQRingBuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQRingBuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBuf>())).dqCounter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBuf),
            "::",
            stringify!(dqCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBuf>())).errors as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBuf),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBuf>())).Fifo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBuf),
            "::",
            stringify!(Fifo)
        )
    );
}
pub type DQRingBuf = _DQRingBuf;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQRingBufHead {
    pub nBufArray: *mut DQRingBuf,
    pub mode: uint32,
    pub nBufs: ::std::os::raw::c_int,
    pub bufSz: ::std::os::raw::c_int,
    pub curSz: ::std::os::raw::c_int,
    pub bufEmpty: ::std::os::raw::c_int,
    pub firstBuf: ::std::os::raw::c_int,
    pub nextBuf: ::std::os::raw::c_int,
    pub lastBuf: ::std::os::raw::c_int,
    pub skippedBuf: ::std::os::raw::c_int,
    pub firstCtr: uint16,
    pub nextCtr: uint16,
    pub skippedCtr: uint16,
    pub Critical: tUeiPalObject,
}
#[test]
fn bindgen_test_layout__DQRingBufHead() {
    assert_eq!(
        ::std::mem::size_of::<_DQRingBufHead>(),
        64usize,
        concat!("Size of: ", stringify!(_DQRingBufHead))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQRingBufHead>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQRingBufHead))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).nBufArray as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(nBufArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).nBufs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(nBufs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).bufSz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(bufSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).curSz as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(curSz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).bufEmpty as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(bufEmpty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).firstBuf as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(firstBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).nextBuf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(nextBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).lastBuf as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(lastBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).skippedBuf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(skippedBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).firstCtr as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(firstCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).nextCtr as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(nextCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).skippedCtr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(skippedCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQRingBufHead>())).Critical as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQRingBufHead),
            "::",
            stringify!(Critical)
        )
    );
}
pub type DQRingBufHead = _DQRingBufHead;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQTSREC {
    pub f: *mut FILE,
    pub relative: ::std::os::raw::c_int,
    pub firstoffsetflag: ::std::os::raw::c_int,
    pub firstoffset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DQTSREC() {
    assert_eq!(
        ::std::mem::size_of::<DQTSREC>(),
        24usize,
        concat!("Size of: ", stringify!(DQTSREC))
    );
    assert_eq!(
        ::std::mem::align_of::<DQTSREC>(),
        8usize,
        concat!("Alignment of ", stringify!(DQTSREC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQTSREC>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQTSREC),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQTSREC>())).relative as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQTSREC),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQTSREC>())).firstoffsetflag as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQTSREC),
            "::",
            stringify!(firstoffsetflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQTSREC>())).firstoffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQTSREC),
            "::",
            stringify!(firstoffset)
        )
    );
}
pub type DQtSrec = DQTSREC;
extern "C" {
    #[doc = " exported library functions starts here /////////////////////////////////////"]
    pub fn DqTranslateError(error: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DqGetLibVersion() -> uint32;
}
extern "C" {
    pub fn DqGetLibVersionBuild() -> uint32;
}
extern "C" {
    pub fn DqOpenIOM(
        IP: *mut ::std::os::raw::c_char,
        UDP_Port: uint16,
        mTimeOut: uint32,
        handle: *mut ::std::os::raw::c_int,
        pDqCfg: *mut pDQRDCFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAddIOMPort(
        handle: ::std::os::raw::c_int,
        new_handle: *mut ::std::os::raw::c_int,
        UDP_Port: uint16,
        mTimeOut: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCloseIOM(Iom: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqGetDevnBySlot(
        Iom: ::std::os::raw::c_int,
        Slot: uint32,
        devn: *mut uint32,
        serial: *mut uint32,
        address: *mut uint32,
        model: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqGetDevnBySerial(
        Iom: ::std::os::raw::c_int,
        Serial: uint32,
        devn: *mut uint32,
        slot: *mut uint32,
        address: *mut uint32,
        model: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSetPacketSize(
        Iom: ::std::os::raw::c_int,
        MinPktSize: uint32,
        MaxPktSize: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqGetPacketSize(
        Iom: ::std::os::raw::c_int,
        MinPktSize: *mut uint32,
        MaxPktSize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSetTimeout(
        Iom: ::std::os::raw::c_int,
        pDqe: pDQE,
        Timeoutms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetIoctlCode(
        Iom: ::std::os::raw::c_int,
        ioctl_replace: ::std::os::raw::c_int,
        ioctl_code_set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReceiveEvent(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        timeout_us: ::std::os::raw::c_int,
        event_buf: *mut pDQEVENT,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReceiveEventPkt(
        handle: ::std::os::raw::c_int,
        flags: uint32,
        timeout_us: ::std::os::raw::c_int,
        event_buf: *mut pDQEVENT,
        size: *mut ::std::os::raw::c_int,
        dqpkt: *mut pDQPKT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdEcho(Iom: ::std::os::raw::c_int, pDQRdCfg: pDQRDCFG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdCheckAlive(
        Iom: ::std::os::raw::c_int,
        response: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCheckForCriticalError(
        Iom: ::std::os::raw::c_int,
        error: ::std::os::raw::c_int,
        flags: uint32,
        criticality: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReset(Iom: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdResetLayer(Iom: ::std::os::raw::c_int, devmask: uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdResetTimestamp(
        Iom: ::std::os::raw::c_int,
        dev_mask: ::std::os::raw::c_int,
        resolution: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdResetTimestampBrCast(
        Iom: ::std::os::raw::c_int,
        new_timestamp: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdHwReset(Iom: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteVal(
        Iom: ::std::os::raw::c_int,
        Address: uint32,
        Value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadVal(
        Iom: ::std::os::raw::c_int,
        Address: uint32,
        Value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteRead32(
        Iom: ::std::os::raw::c_int,
        wrrdcmd: pDQWRRD32,
        data_wr: *mut uint32,
        data_rd: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteMultipleValues(
        Iom: ::std::os::raw::c_int,
        DQWrMultVal: pDQWRVALM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadMultipleValues(
        Iom: ::std::os::raw::c_int,
        pDQRdMultVal: pwDQRDVALM,
        Data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetCfg(
        Iom: ::std::os::raw::c_int,
        pDQSetCfg: *mut DQSETCFG,
        Status: *mut uint32,
        entries: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdGetCfg(
        Iom: ::std::os::raw::c_int,
        pDQGetCfg: pDQGETCFG_RQ,
        pDQCfgOut: pDQGETCFG,
        pcfg: *mut pDQGETCFG,
        entries: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadStatus(
        Iom: ::std::os::raw::c_int,
        DeviceNum: *mut uint8,
        Entries: *mut uint32,
        Status: *mut uint32,
        StatusSize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteChannel(
        Iom: ::std::os::raw::c_int,
        DQChannelData: pDQWRCHNL,
        DataBufLen: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadChannel(
        Iom: ::std::os::raw::c_int,
        pDQChannel: pDQRDCHNL,
        Data: *mut ::std::os::raw::c_void,
        DataBufLen: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetClock(
        Iom: ::std::os::raw::c_int,
        pDQSetClk: pDQSETCLK,
        CloseFreq: *mut f32,
        entries: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetTrigger(
        Iom: ::std::os::raw::c_int,
        pDQSetTrig: pDQSETTRIG,
        entries: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSwTrigger(Iom: ::std::os::raw::c_int, Mask: uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSwTriggerBrCast(
        Iom: ::std::os::raw::c_int,
        nIOM: ::std::os::raw::c_int,
        handle_arr: *mut ::std::os::raw::c_int,
        mask_arr: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetChannelList(
        Iom: ::std::os::raw::c_int,
        pDQSetCl: pDQSETCL,
        entries: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetTransferList(
        Iom: ::std::os::raw::c_int,
        pDQSetTrl: pDQSETTRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteReadAll(
        Iom: ::std::os::raw::c_int,
        pDQWr: pDQWRRD,
        pDQRd: pDQWRRD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteFIFO(Iom: ::std::os::raw::c_int, pDQFifo: pDQFIFO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadFIFO(Iom: ::std::os::raw::c_int, pDQFifo: pDQFIFO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadFIFO32(
        Iom: ::std::os::raw::c_int,
        pDQFifo32: pDQFIFO32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteReadFIFO(
        Iom: ::std::os::raw::c_int,
        pDQWrRdFifoPut: pDQWRRDFIFO,
        pDQWrRdFifoGet: pDQWRRDFIFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteToFlashBuffer(
        Iom: ::std::os::raw::c_int,
        Size: uint32,
        Data: *mut uint8,
        CRC: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdUpdateFlashBuffer(
        Iom: ::std::os::raw::c_int,
        Sector: uint16,
        Address: uint32,
        Size: uint32,
        CRC: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetSyncRt(
        Iom: ::std::os::raw::c_int,
        pSyncPll: pSYNCPLL,
        pSyncRt: pSYNCRT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetCommParameters(
        Iom: ::std::os::raw::c_int,
        pDQSetComm: pDQSETCOMM,
        CRC: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetName(
        Iom: ::std::os::raw::c_int,
        Name: *mut ::std::os::raw::c_char,
        CRC: *mut int32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdGetName(
        Iom: ::std::os::raw::c_int,
        BufLen: uint32,
        Buffer: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetWatchDog(
        Iom: ::std::os::raw::c_int,
        Mask: uint32,
        time: uint32,
        t2reset: *mut uint32,
        cstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetParameters(
        Iom: ::std::os::raw::c_int,
        pDQSetParm: pDQSETPRM,
        CRC: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdGetParameters(
        Iom: ::std::os::raw::c_int,
        pDQGetParm: pDQGETPRM,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetCalibration(
        Iom: ::std::os::raw::c_int,
        pDQSetCal: pDQSETCAL,
        entries: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSaveParameters(
        Iom: ::std::os::raw::c_int,
        devn: uint32,
        HashCode: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetMode(
        Iom: ::std::os::raw::c_int,
        Mode: uint32,
        Mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetReplyMaxSize(
        Iom: ::std::os::raw::c_int,
        MaxEthSize: uint32,
        MaxEthSizeBuf: uint32,
        MaxNoPkts: uint32,
        Accepted: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetPassword(
        Iom: ::std::os::raw::c_int,
        Mode: uint32,
        Password: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdGetCRC(
        Iom: ::std::os::raw::c_int,
        pDQCRCInfo: *mut DQCRCINFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdGetNVRAM(
        Iom: ::std::os::raw::c_int,
        nvram_data: *mut uint32,
        size: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdIoctl(
        Iom: ::std::os::raw::c_int,
        IoIn: pDQIOCTL,
        IoOut: pDQIOCTL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdIoctlSz(
        Iom: ::std::os::raw::c_int,
        size_in: uint32,
        IoIn: pDQIOCTL,
        size_out: uint32,
        IoOut: pDQIOCTL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdIoctlSendOnly(
        Iom: ::std::os::raw::c_int,
        size_in: uint32,
        IoIn: pDQIOCTL,
        dummy: uint32,
        pDummy: pDQIOCTL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdIoctlRecvOnly(
        Iom: ::std::os::raw::c_int,
        dummy: uint32,
        pDummy: pDQIOCTL,
        size_out: uint32,
        IoOut: pDQIOCTL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdIoctlSz_unlock(
        Iom: ::std::os::raw::c_int,
        size_in: uint32,
        IoIn: pDQIOCTL,
        size_out: uint32,
        IoOut: pDQIOCTL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdIoctlRetrySz(
        Iom: ::std::os::raw::c_int,
        size_in: uint32,
        IoIn: pDQIOCTL,
        size_out: uint32,
        IoOut: pDQIOCTL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdGetCapabilities(
        Iom: ::std::os::raw::c_int,
        Layer: uint8,
        moredata: *mut ::std::os::raw::c_int,
        info: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdInitIOM(
        Iom: ::std::os::raw::c_int,
        Layer: uint8,
        ParamID: uint32,
        Data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdSetLock(
        Iom: ::std::os::raw::c_int,
        Mode: uint8,
        Password: *mut ::std::os::raw::c_char,
        IP: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqGetLastStatus(
        iom: ::std::os::raw::c_int,
        data: *mut uint32,
        size: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqReadSrec(
        filename: *mut ::std::os::raw::c_char,
        relative: ::std::os::raw::c_int,
        size: uint32,
        buffer: *mut ::std::os::raw::c_char,
        bytes: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdFinishDmap(Iom: ::std::os::raw::c_int, dmapid: uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdDmapClear(
        Iom: ::std::os::raw::c_int,
        dmapid: uint32,
        ClearAll: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdWriteAll(Iom: ::std::os::raw::c_int, pDQWr: pDQWRRD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadAll(Iom: ::std::os::raw::c_int, pDQRd: pDQWRRD) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadAll_nocopy(
        Iom: ::std::os::raw::c_int,
        ppWrRd: *mut pDQWRRD,
        ppDQPkt: *mut pDQPKT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdReadAll_int(
        Iom: ::std::os::raw::c_int,
        pDQRd: pDQWRRD,
        dqCounter: *mut uint16,
        dqTStamp: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdRbfTransferToBuffer(
        Iom: ::std::os::raw::c_int,
        Size: uint32,
        Data: *mut uint8,
        CRC: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdRbfPageWrite(
        Iom: ::std::os::raw::c_int,
        BaseAddr: uint32,
        Size: uint32,
        CrcVerification: uint8,
        ProcessedBytes: *mut uint32,
        CRC: *mut uint32,
        error: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdRbfPageRead(
        Iom: ::std::os::raw::c_int,
        BaseAddr: uint32,
        Size: uint32,
        CrcVerification: uint8,
        ProcessedBytes: *mut uint32,
        CRC: *mut uint32,
        error: *mut uint32,
        Buffer: *mut uint8,
        BufferSize: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdRbfDevList(
        Iom: ::std::os::raw::c_int,
        dev_list: *mut DQRBFDEV,
        error: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqReadRbf(
        filename: *mut ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        size: uint32,
        bytes: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqInitRbf(Iom: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdJtagAccess(
        Iom: ::std::os::raw::c_int,
        baseAddr: uint32,
        buffer: *mut uint8,
        size: uint32,
        config: uint8,
        tms_tdi_tck: uint8,
        tdo_fwver: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncTrigOnNextPPSBrCast(
        Iom: ::std::os::raw::c_int,
        nIOM: ::std::os::raw::c_int,
        reserved: uint32,
        handle_arr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncTrigOnNextPPS(
        Iom: ::std::os::raw::c_int,
        reserved: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncRstTimestampsOnNextPPS(
        Iom: ::std::os::raw::c_int,
        reserved: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncRstTimestampsOnNextPPSBrCast(
        Iom: ::std::os::raw::c_int,
        nIOM: ::std::os::raw::c_int,
        reserved: uint32,
        handle_arr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqGetLastDqPktTimestamp(
        Iom: ::std::os::raw::c_int,
        timestamp: *mut uint32,
        counter: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqGetIom(hd: ::std::os::raw::c_int) -> pDQIOME;
}
extern "C" {
    pub fn DqMmddyy2date(
        mm: ::std::os::raw::c_int,
        dd: ::std::os::raw::c_int,
        yy: ::std::os::raw::c_int,
        hh: ::std::os::raw::c_int,
        mn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
    ) -> uint32;
}
extern "C" {
    pub fn DqDate2mmddyy(
        date: uint32,
        mm: *mut ::std::os::raw::c_int,
        dd: *mut ::std::os::raw::c_int,
        yy: *mut ::std::os::raw::c_int,
        hh: *mut ::std::os::raw::c_int,
        mn: *mut ::std::os::raw::c_int,
        ss: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqNtohl(hd: ::std::os::raw::c_int, value: u_long) -> u_long;
}
extern "C" {
    pub fn DqNtohs(hd: ::std::os::raw::c_int, value: u_short) -> u_short;
}
extern "C" {
    pub fn DqHtonl(hd: ::std::os::raw::c_int, value: u_long) -> u_long;
}
extern "C" {
    pub fn DqHtons(hd: ::std::os::raw::c_int, value: u_short) -> u_short;
}
extern "C" {
    pub fn DqNtohf(hd: ::std::os::raw::c_int, value: f32) -> f32;
}
extern "C" {
    pub fn DqHtonf(hd: ::std::os::raw::c_int, value: f32) -> f32;
}
extern "C" {
    pub fn DqNtohdbl(hd: ::std::os::raw::c_int, value: f64) -> f64;
}
extern "C" {
    pub fn DqHtondbl(hd: ::std::os::raw::c_int, value: f64) -> f64;
}
extern "C" {
    pub fn DqInitDAQLib() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCleanUpDAQLib();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQEPRM {
    pub timeout: *mut uint32,
    pub retries_async: *mut uint32,
    pub retries_receive: *mut uint32,
    pub retries_send: *mut uint32,
    pub max_inbound_packet: *mut uint32,
    pub max_outbound_packet: *mut uint32,
    pub abort_after: *mut uint32,
    pub use_protocol: *mut uint32,
    pub packets_at_once: *mut uint32,
}
#[test]
fn bindgen_test_layout_DQEPRM() {
    assert_eq!(
        ::std::mem::size_of::<DQEPRM>(),
        72usize,
        concat!("Size of: ", stringify!(DQEPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQEPRM>(),
        8usize,
        concat!("Alignment of ", stringify!(DQEPRM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).timeout as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).retries_async as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(retries_async)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).retries_receive as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(retries_receive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).retries_send as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(retries_send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).max_inbound_packet as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(max_inbound_packet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).max_outbound_packet as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(max_outbound_packet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).abort_after as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(abort_after)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).use_protocol as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(use_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQEPRM>())).packets_at_once as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQEPRM),
            "::",
            stringify!(packets_at_once)
        )
    );
}
pub type pDQEPRM = *mut DQEPRM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQly205_double {
    pub raw: uint32,
    pub data: f64,
}
#[test]
fn bindgen_test_layout_DQly205_double() {
    assert_eq!(
        ::std::mem::size_of::<DQly205_double>(),
        16usize,
        concat!("Size of: ", stringify!(DQly205_double))
    );
    assert_eq!(
        ::std::mem::align_of::<DQly205_double>(),
        8usize,
        concat!("Alignment of ", stringify!(DQly205_double))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQly205_double>())).raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQly205_double),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQly205_double>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQly205_double),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQly205_float {
    pub raw: uint32,
    pub data: f32,
}
#[test]
fn bindgen_test_layout_DQly205_float() {
    assert_eq!(
        ::std::mem::size_of::<DQly205_float>(),
        8usize,
        concat!("Size of: ", stringify!(DQly205_float))
    );
    assert_eq!(
        ::std::mem::align_of::<DQly205_float>(),
        4usize,
        concat!("Alignment of ", stringify!(DQly205_float))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQly205_float>())).raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQly205_float),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQly205_float>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQly205_float),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQly219_float {
    pub raw: uint16,
    pub data: f32,
}
#[test]
fn bindgen_test_layout_DQly219_float() {
    assert_eq!(
        ::std::mem::size_of::<DQly219_float>(),
        8usize,
        concat!("Size of: ", stringify!(DQly219_float))
    );
    assert_eq!(
        ::std::mem::align_of::<DQly219_float>(),
        4usize,
        concat!("Alignment of ", stringify!(DQly219_float))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQly219_float>())).raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQly219_float),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQly219_float>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQly219_float),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn DqeTest(test: ::std::os::raw::c_int, lvalue: uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqStartDQEngine(
        period_us: uint32,
        pDqe: *mut pDQE,
        dqeprm: pDQEPRM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqStopDQEngine(pDqe: pDQE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqParamDQEngine(
        pDqe: pDQE,
        setparam: ::std::os::raw::c_int,
        pDqePrm: pDQEPRM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbIsSupported(
        iom: ::std::os::raw::c_int,
        devn: uint32,
        ss: uint32,
        supported: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbCreate(
        pDqe: pDQE,
        iom: ::std::os::raw::c_int,
        devn: uint32,
        ss: uint32,
        pBcb: *mut pDQBCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbDestroy(pBcb: pDQBCB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbSetBurstMode(
        Iom: ::std::os::raw::c_int,
        trigger: uint32,
        pDqBurst: pDQBURST,
        entries: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbInitOps(
        pBcb: pDQBCB,
        Config: *mut uint32,
        TrigSize: *mut uint32,
        TrigMode: pDQSETTRIG,
        fCLClk: *mut f32,
        fCVClk: *mut f32,
        CLSize: *mut uint32,
        CL: *mut uint32,
        ScanBlock: *mut uint32,
        pAcbCfg: pDQACBCFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqeSetEvent(pBcb: pDQBCB, evtFlags: uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqeGetEvent(pBcb: pDQBCB, evtFlags: *mut uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqeWaitForEvent(
        ppBcb: *const pDQBCB,
        num: ::std::os::raw::c_int,
        WaitAll: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        pEvents: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbGetScansCopy(
        pBcb: pDQBCB,
        data: *mut ::std::os::raw::c_char,
        size: uint32,
        rqsizemin: uint32,
        returned: *mut uint32,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbGetScans(
        pBcb: pDQBCB,
        data: *mut *mut ::std::os::raw::c_char,
        size: uint32,
        rqsizemin: uint32,
        returned: *mut uint32,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbPutScansCopy(
        pBcb: pDQBCB,
        data: *mut ::std::os::raw::c_char,
        size: uint32,
        rqsizemin: uint32,
        retrieved: *mut uint32,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAcbPutScans(
        pBcb: pDQBCB,
        data: *mut *mut ::std::os::raw::c_char,
        size: uint32,
        rqsizemin: uint32,
        retrieved: *mut uint32,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqeEnable(
        enable: uint32,
        ppBcb: *const pDQBCB,
        BcbNum: ::std::os::raw::c_int,
        broadcast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapIsSupported(
        iom: ::std::os::raw::c_int,
        devn: uint32,
        ss: uint32,
        supported: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapCreate(
        pDqe: pDQE,
        iom: ::std::os::raw::c_int,
        pBcb: *mut pDQBCB,
        period: ::std::os::raw::c_int,
        dmapin: *mut *mut ::std::os::raw::c_char,
        dmapout: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapDestroy(pBcb: pDQBCB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapAddEntry(
        pBcb: pDQBCB,
        dev: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        ch: uint32,
        flags: uint32,
        samples: ::std::os::raw::c_int,
        offset: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapAddMultipleEntries(
        pBcb: pDQBCB,
        pTRL: pDQSETTRL,
        entries: *mut ::std::os::raw::c_int,
        offset: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapSetEntry(
        pBcb: pDQBCB,
        dev: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        ch: uint32,
        flags: uint32,
        samples: ::std::os::raw::c_int,
        offset: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapMultipleEntries(
        pBcb: pDQBCB,
        pTRL: pDQSETTRL,
        entries: *mut ::std::os::raw::c_int,
        offset: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapGetSampleSize(
        lymod: uint32,
        subsystem: uint32,
        cfgflags: uint32,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqDmapInitOps(pBcb: pDQBCB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSupportedModes(
        lymod: uint16,
        supported: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapGetSampleSize(
        lymod: uint32,
        cfgflags: uint32,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapIsSupported(
        iom: ::std::os::raw::c_int,
        devn: uint32,
        ss: uint32,
        supported: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapCreate(
        pDqe: pDQE,
        iom: ::std::os::raw::c_int,
        pBcb: *mut pDQBCB,
        period: ::std::os::raw::c_int,
        vmapin: *mut *mut ::std::os::raw::c_char,
        vmapout: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapDestroy(pBcb: pDQBCB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapAddEntry(
        pBcb: pDQBCB,
        dev: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        ch: uint32,
        flags: uint32,
        size: ::std::os::raw::c_int,
        hdr_ptr: *mut *mut ::std::os::raw::c_char,
        data_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapInitOps(pBcb: pDQBCB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapGetInputMap(
        pBcb: pDQBCB,
        index: ::std::os::raw::c_int,
        hdrptr: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapGetOutputMap(
        pBcb: pDQBCB,
        index: ::std::os::raw::c_int,
        hdrptr: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapGetInputPtr(
        pBcb: pDQBCB,
        index: ::std::os::raw::c_int,
        dataptr: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVmapGetOutputPtr(
        pBcb: pDQBCB,
        index: ::std::os::raw::c_int,
        dataptr: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct _DqMessage {
    pub channel: uint8,
    pub toAddr: [uint8; 16usize],
    pub fromAddr: [uint8; 16usize],
    pub dataSize: uint16,
    pub data: __IncompleteArrayField<uint8>,
}
#[test]
fn bindgen_test_layout__DqMessage() {
    assert_eq!(
        ::std::mem::size_of::<_DqMessage>(),
        36usize,
        concat!("Size of: ", stringify!(_DqMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<_DqMessage>(),
        2usize,
        concat!("Alignment of ", stringify!(_DqMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqMessage>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqMessage),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqMessage>())).toAddr as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqMessage),
            "::",
            stringify!(toAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqMessage>())).fromAddr as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqMessage),
            "::",
            stringify!(fromAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqMessage>())).dataSize as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqMessage),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqMessage>())).data as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqMessage),
            "::",
            stringify!(data)
        )
    );
}
pub type pDqMessage = *mut _DqMessage;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQMsgQueueNode {
    pub prev: *mut _DQMsgQueueNode,
    pub next: *mut _DQMsgQueueNode,
    pub inQueue: uint8,
    pub recycle: uint8,
    pub pktCtr: uint16,
    pub message: pDqMessage,
}
#[test]
fn bindgen_test_layout__DQMsgQueueNode() {
    assert_eq!(
        ::std::mem::size_of::<_DQMsgQueueNode>(),
        32usize,
        concat!("Size of: ", stringify!(_DQMsgQueueNode))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQMsgQueueNode>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQMsgQueueNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMsgQueueNode>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMsgQueueNode),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMsgQueueNode>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMsgQueueNode),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMsgQueueNode>())).inQueue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMsgQueueNode),
            "::",
            stringify!(inQueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMsgQueueNode>())).recycle as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMsgQueueNode),
            "::",
            stringify!(recycle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMsgQueueNode>())).pktCtr as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMsgQueueNode),
            "::",
            stringify!(pktCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMsgQueueNode>())).message as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMsgQueueNode),
            "::",
            stringify!(message)
        )
    );
}
pub type DQMQNODE = _DQMsgQueueNode;
pub type pDQMQNODE = *mut _DQMsgQueueNode;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DQMSGQ {
    pub nodeArray: pDQMQNODE,
    pub nArraySize: uint32,
    pub nCount: uint32,
    pub direction: uint32,
    pub first: pDQMQNODE,
    pub last: pDQMQNODE,
    pub nextEntry: pDQMQNODE,
    pub dev: uint8,
    pub ss: uint8,
    pub config: uint32,
    pub lastPktCtr: uint16,
    pub nextOutCtr: uint16,
    pub Critical: tUeiPalObject,
    pub pMissing: pDQMSGMISS,
    pub rcvctr: uint32,
    pub cooldown: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__DQMSGQ() {
    assert_eq!(
        ::std::mem::size_of::<_DQMSGQ>(),
        88usize,
        concat!("Size of: ", stringify!(_DQMSGQ))
    );
    assert_eq!(
        ::std::mem::align_of::<_DQMSGQ>(),
        8usize,
        concat!("Alignment of ", stringify!(_DQMSGQ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).nodeArray as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(nodeArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).nArraySize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(nArraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).nCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(nCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).direction as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).first as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).last as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).nextEntry as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(nextEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).dev as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).ss as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).config as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).lastPktCtr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(lastPktCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).nextOutCtr as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(nextOutCtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).Critical as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(Critical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).pMissing as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(pMissing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).rcvctr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(rcvctr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DQMSGQ>())).cooldown as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_DQMSGQ),
            "::",
            stringify!(cooldown)
        )
    );
}
pub type DQMSGQ = _DQMSGQ;
extern "C" {
    pub fn DqMsgCreate(
        pDqe: pDQE,
        iom: ::std::os::raw::c_int,
        devn: uint32,
        ss: uint32,
        dir: uint32,
        config: uint32,
        queueSize: uint32,
        pBcb: *mut pDQBCB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgDestroy(pBcb: pDQBCB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgInitOps(pBcb: pDQBCB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgRecvMessage(
        pBcb: pDQBCB,
        message: pDqMessage,
        gotMsg: *mut ::std::os::raw::c_int,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgSendMessage(
        pBcb: pDQBCB,
        message: pDqMessage,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgRecvMessages(
        pBcb: pDQBCB,
        messages: pDqMessage,
        msg_size: ::std::os::raw::c_int,
        requested: ::std::os::raw::c_int,
        returned: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgSendMessages(
        pBcb: pDQBCB,
        messages: pDqMessage,
        msg_size: ::std::os::raw::c_int,
        requested: ::std::os::raw::c_int,
        sent: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgCount(
        pBcb: pDQBCB,
        msg_avail: *mut uint32,
        space_avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqMsgIsSupported(
        iom: ::std::os::raw::c_int,
        devn: uint32,
        ss: uint32,
        supported: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ208CPRM {
    pub Vref: f64,
    pub Vexc: f64,
    pub Vs: f64,
    pub Rs: f64,
    pub Vx: f64,
    pub Rx: f64,
    pub Va: f64,
    pub Ra: f64,
    pub Vb: f64,
    pub Rb: f64,
}
#[test]
fn bindgen_test_layout_DQ208CPRM() {
    assert_eq!(
        ::std::mem::size_of::<DQ208CPRM>(),
        80usize,
        concat!("Size of: ", stringify!(DQ208CPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ208CPRM>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ208CPRM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Vref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Vref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Vexc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Vexc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Vs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Vs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Rs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Rs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Vx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Vx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Rx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Va as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Va)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Ra as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Ra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Vb as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Vb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CPRM>())).Rb as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CPRM),
            "::",
            stringify!(Rb)
        )
    );
}
pub type pDQ208CPRM = *mut DQ208CPRM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ208CCOND {
    pub channel: uint32,
    pub ExcA: uint16,
    pub ExcB: uint16,
    pub Ra: uint8,
    pub Rb: uint8,
}
#[test]
fn bindgen_test_layout_DQ208CCOND() {
    assert_eq!(
        ::std::mem::size_of::<DQ208CCOND>(),
        12usize,
        concat!("Size of: ", stringify!(DQ208CCOND))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ208CCOND>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ208CCOND))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CCOND>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CCOND),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CCOND>())).ExcA as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CCOND),
            "::",
            stringify!(ExcA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CCOND>())).ExcB as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CCOND),
            "::",
            stringify!(ExcB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CCOND>())).Ra as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CCOND),
            "::",
            stringify!(Ra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ208CCOND>())).Rb as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ208CCOND),
            "::",
            stringify!(Rb)
        )
    );
}
pub type pDQ208CCOND = *mut DQ208CCOND;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQDIOPWM {
    pub channel: uint8,
    pub mode: uint8,
    pub duty_cycle_length: uint32,
}
#[test]
fn bindgen_test_layout_DQDIOPWM() {
    assert_eq!(
        ::std::mem::size_of::<DQDIOPWM>(),
        8usize,
        concat!("Size of: ", stringify!(DQDIOPWM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQDIOPWM>(),
        4usize,
        concat!("Alignment of ", stringify!(DQDIOPWM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIOPWM>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIOPWM),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIOPWM>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIOPWM),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQDIOPWM>())).duty_cycle_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQDIOPWM),
            "::",
            stringify!(duty_cycle_length)
        )
    );
}
pub type pDQDIOPWM = *mut DQDIOPWM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AI204_DATA {
    pub autozero_on_off: uint32,
    pub d_azero: [f64; 4usize],
}
#[test]
fn bindgen_test_layout_DQ_AI204_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AI204_DATA>(),
        40usize,
        concat!("Size of: ", stringify!(DQ_AI204_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AI204_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_AI204_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI204_DATA>())).autozero_on_off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI204_DATA),
            "::",
            stringify!(autozero_on_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI204_DATA>())).d_azero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI204_DATA),
            "::",
            stringify!(d_azero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AI208_DATA {
    pub autozero_on_off: uint32,
    pub d_azero: [f64; 12usize],
}
#[test]
fn bindgen_test_layout_DQ_AI208_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AI208_DATA>(),
        104usize,
        concat!("Size of: ", stringify!(DQ_AI208_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AI208_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_AI208_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI208_DATA>())).autozero_on_off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI208_DATA),
            "::",
            stringify!(autozero_on_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI208_DATA>())).d_azero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI208_DATA),
            "::",
            stringify!(d_azero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AI217_DATA {
    pub limit_inl: uint32,
}
#[test]
fn bindgen_test_layout_DQ_AI217_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AI217_DATA>(),
        4usize,
        concat!("Size of: ", stringify!(DQ_AI217_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AI217_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_AI217_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI217_DATA>())).limit_inl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI217_DATA),
            "::",
            stringify!(limit_inl)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AI222_DATA {
    pub mux: [uint32; 12usize],
    pub imag: [uint32; 12usize],
    pub mode: [uint32; 12usize],
    pub gain: [uint32; 12usize],
    pub lead_res: [f64; 12usize],
}
#[test]
fn bindgen_test_layout_DQ_AI222_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AI222_DATA>(),
        288usize,
        concat!("Size of: ", stringify!(DQ_AI222_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AI222_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_AI222_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI222_DATA>())).mux as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI222_DATA),
            "::",
            stringify!(mux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI222_DATA>())).imag as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI222_DATA),
            "::",
            stringify!(imag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI222_DATA>())).mode as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI222_DATA),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI222_DATA>())).gain as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI222_DATA),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI222_DATA>())).lead_res as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI222_DATA),
            "::",
            stringify!(lead_res)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AI248_DATA {
    pub autozero_on_off: uint32,
}
#[test]
fn bindgen_test_layout_DQ_AI248_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AI248_DATA>(),
        4usize,
        concat!("Size of: ", stringify!(DQ_AI248_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AI248_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_AI248_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI248_DATA>())).autozero_on_off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI248_DATA),
            "::",
            stringify!(autozero_on_off)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AI255_DATA {
    pub dc_voltage_mode: uint32,
    pub steps: [uint32; 2usize],
    pub mode: [uint32; 2usize],
    pub rate: [uint32; 2usize],
}
#[test]
fn bindgen_test_layout_DQ_AI255_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AI255_DATA>(),
        28usize,
        concat!("Size of: ", stringify!(DQ_AI255_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AI255_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_AI255_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI255_DATA>())).dc_voltage_mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI255_DATA),
            "::",
            stringify!(dc_voltage_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI255_DATA>())).steps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI255_DATA),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI255_DATA>())).mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI255_DATA),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI255_DATA>())).rate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI255_DATA),
            "::",
            stringify!(rate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AI254_DATA {
    pub dc_voltage_mode: uint32,
    pub steps: [uint32; 4usize],
    pub mode: [uint32; 4usize],
}
#[test]
fn bindgen_test_layout_DQ_AI254_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AI254_DATA>(),
        36usize,
        concat!("Size of: ", stringify!(DQ_AI254_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AI254_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_AI254_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI254_DATA>())).dc_voltage_mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI254_DATA),
            "::",
            stringify!(dc_voltage_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI254_DATA>())).steps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI254_DATA),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AI254_DATA>())).mode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AI254_DATA),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_DMM261_DATA {
    pub gnref: f64,
    pub gndut: f64,
    pub max_res_for_rng: f64,
    pub b_ovr_range: uint32,
    pub res_100M: uint32,
    pub last_mode: uint32,
    pub i_azero: [f64; 7usize],
    pub i_az_bool: [uint32; 7usize],
    pub v_azero: [f64; 6usize],
    pub v_az_bool: [uint32; 6usize],
}
#[test]
fn bindgen_test_layout_DQ_DMM261_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_DMM261_DATA>(),
        200usize,
        concat!("Size of: ", stringify!(DQ_DMM261_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_DMM261_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_DMM261_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).gnref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(gnref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).gndut as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(gndut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).max_res_for_rng as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(max_res_for_rng)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).b_ovr_range as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(b_ovr_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).res_100M as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(res_100M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).last_mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(last_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).i_azero as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(i_azero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).i_az_bool as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(i_az_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).v_azero as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(v_azero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_DMM261_DATA>())).v_az_bool as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_DMM261_DATA),
            "::",
            stringify!(v_az_bool)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AO318_DATA {
    pub last_i: [f64; 8usize],
}
#[test]
fn bindgen_test_layout_DQ_AO318_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AO318_DATA>(),
        64usize,
        concat!("Size of: ", stringify!(DQ_AO318_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AO318_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_AO318_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AO318_DATA>())).last_i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AO318_DATA),
            "::",
            stringify!(last_i)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_RTD388_DATA {
    pub res_lut_ptr: [*mut uint16; 8usize],
    pub start_val: [f64; 8usize],
    pub step: [f64; 8usize],
    pub len: [uint32; 8usize],
}
#[test]
fn bindgen_test_layout_DQ_RTD388_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_RTD388_DATA>(),
        224usize,
        concat!("Size of: ", stringify!(DQ_RTD388_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_RTD388_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_RTD388_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_RTD388_DATA>())).res_lut_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_RTD388_DATA),
            "::",
            stringify!(res_lut_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_RTD388_DATA>())).start_val as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_RTD388_DATA),
            "::",
            stringify!(start_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_RTD388_DATA>())).step as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_RTD388_DATA),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_RTD388_DATA>())).len as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_RTD388_DATA),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_AR664_DATA {
    pub vl_count: uint32,
    pub vl_vlid: [uint16; 2048usize],
    pub vl_handle: [uint16; 2048usize],
    pub vl_bag: [::std::os::raw::c_int; 2048usize],
    pub BAG_count: [uint32; 10usize],
    pub sch_bins: [uint32; 256usize],
    pub tx_schedule_sz: uint32,
    pub tx_schedule: *mut uint16,
}
#[test]
fn bindgen_test_layout_DQ_AR664_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_AR664_DATA>(),
        17464usize,
        concat!("Size of: ", stringify!(DQ_AR664_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_AR664_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_AR664_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).vl_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(vl_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).vl_vlid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(vl_vlid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).vl_handle as *const _ as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(vl_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).vl_bag as *const _ as usize },
        8196usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(vl_bag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).BAG_count as *const _ as usize },
        16388usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(BAG_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).sch_bins as *const _ as usize },
        16428usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(sch_bins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).tx_schedule_sz as *const _ as usize },
        17452usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(tx_schedule_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_AR664_DATA>())).tx_schedule as *const _ as usize },
        17456usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_AR664_DATA),
            "::",
            stringify!(tx_schedule)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_VR608_DATA {
    pub cfg: [DQ_VR608_CFG; 8usize],
}
#[test]
fn bindgen_test_layout_DQ_VR608_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_VR608_DATA>(),
        544usize,
        concat!("Size of: ", stringify!(DQ_VR608_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_VR608_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_VR608_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_VR608_DATA>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_VR608_DATA),
            "::",
            stringify!(cfg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_COMMON_DATA {
    pub mode: [uint32; 64usize],
}
#[test]
fn bindgen_test_layout_DQ_COMMON_DATA() {
    assert_eq!(
        ::std::mem::size_of::<DQ_COMMON_DATA>(),
        256usize,
        concat!("Size of: ", stringify!(DQ_COMMON_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_COMMON_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(DQ_COMMON_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_COMMON_DATA>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_COMMON_DATA),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn DqReadAIChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        samplesize: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqWriteAOChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        samplesize: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104SwitchDCDC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        state: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104ConfigureBus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pc104: ::std::os::raw::c_int,
        bus_cfg: uint32,
        base_addr: uint32,
        bus_control: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104ReadBus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mem_access: ::std::os::raw::c_int,
        addr_list: *mut uint32,
        list_size: uint32,
        data: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104WriteBus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mem_access: ::std::os::raw::c_int,
        addr_list: *mut uint32,
        list_size: uint32,
        data: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104ReadBusBlock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mem_access: ::std::os::raw::c_int,
        address: uint32,
        size: uint32,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104WriteBusBlock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mem_access: ::std::os::raw::c_int,
        address: uint32,
        size: uint32,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104ReadMemory(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        address: uint32,
        size: uint32,
        new_block: *mut ::std::os::raw::c_int,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104WriteMemory(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        address: uint32,
        size: uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104WriteScript(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        offset: uint32,
        size: uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104SetScriptSource(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cl_clk_type: uint32,
        int_a_b: uint32,
        frequency: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104GetGeneralStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104SetCustomProcessing(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        irq: ::std::os::raw::c_int,
        pc104: uint32,
        base_addr: uint32,
        custom_proc: uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104SetCustomParameter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pc104: uint32,
        custom_proc: uint32,
        param_type: uint32,
        param_index: uint32,
        param_value: uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv104Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        script_sz: uint32,
        enable: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv201Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint16,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv204Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        fstatus: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv204GetAutozero(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv204SetAutozero(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        onoff: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv204EnableCB(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ch_mask: ::std::os::raw::c_int,
        onoff: ::std::os::raw::c_int,
        state: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv204SetMovAvg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        onoff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv204CBStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reengage: uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv205Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv205SetFilterMode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        fir: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv205LoadCoeff(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        fir: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        decrat: ::std::os::raw::c_int,
        tapsize: ::std::os::raw::c_int,
        data: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv207Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv207ReadChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        measurement: uint32,
        clentry: uint32,
        samples: *mut ::std::os::raw::c_int,
        data: *mut uint32,
        volts: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208ReadChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        measurement: uint32,
        clentry: uint32,
        samples: *mut ::std::os::raw::c_int,
        data: *mut uint32,
        volts: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208SetAutozero(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        onoff: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208SetControl(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        control: uint32,
        value: uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208MeasureParams(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pcond: pDQ208CCOND,
        pprm: pDQ208CPRM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208ReadAutogain(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        measurement: uint32,
        clentry: uint32,
        samples: *mut ::std::os::raw::c_int,
        dt: *mut uint32,
        df: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208SetExcVoltage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ExcVoltA: f32,
        ExcVoltB: f32,
        chA: uint32,
        chB: uint32,
        readbackA: *mut f32,
        readbackB: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv208ShuntCal(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        shunt_set: uint32,
        cycles: ::std::os::raw::c_int,
        excitation: f64,
        r_shunt: f64,
        r_steps: *mut uint32,
        r_actual: *mut f64,
        v_exc: *mut f64,
        v_gage: *mut f64,
        v_shunt: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv211Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv211SetCfgChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cdata: pDQCFGCH_211,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv211SetCfgLayer(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ldata: pDQCFGLAYER_211,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv211SetFIR(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
        decrat: ::std::os::raw::c_int,
        tapsize: ::std::os::raw::c_int,
        data: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv211SetPll(
        hd: ::std::os::raw::c_int,
        samplerate: f64,
        sr_actual: *mut f64,
        dec_factor: *mut ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv212Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv212SetCjcRate(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        newrate: *mut f64,
        oldrate: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv212SetBurnoutDetectCurrent(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: uint32,
        burnout: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv217Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv217SetCfgLayer(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
        function: ::std::os::raw::c_int,
        data: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv217SetCjcAvg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        factor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv217SetFIR(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        bank: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
        decrat: ::std::os::raw::c_int,
        tapsize: ::std::os::raw::c_int,
        filter_total: *mut ::std::os::raw::c_int,
        data: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv217SetPll(
        hd: ::std::os::raw::c_int,
        samplerate: f64,
        sr_actual: *mut f64,
        dec_factor: *mut ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv217GetPgaStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        errchan: *mut uint32,
        newdata: *mut uint32,
        pgadata: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv218ConfigDio(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        dir_bits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv218ReadDioIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv218SetBITMux(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: ::std::os::raw::c_int,
        mux_pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv218WriteDioOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        dout: uint32,
        last_dout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv222Config(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: uint32,
        mode: uint32,
        lead_res: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv222Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv222SetParams(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: uint32,
        exc: uint32,
        imag: uint32,
        vref: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224ReadAutogain(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        measurement: uint32,
        chan: uint32,
        gain: uint32,
        dt: *mut uint32,
        df: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224SetAveraging(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        factor: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224SetBridgeCompletion(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        ref_level: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224SetExcitation(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: uint32,
        exc_rate: f64,
        exc_level_hi: f64,
        exc_level_lo: f64,
        calc_rate: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224SetFIR(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ch_mask: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
        decrat: ::std::os::raw::c_int,
        tapsize: ::std::os::raw::c_int,
        filter_total: *mut ::std::os::raw::c_int,
        data: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224SetNullLevel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: uint32,
        level: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224SetShunt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_gain: uint32,
        config: uint32,
        position: uint32,
        r_shunt: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv224ShuntCal(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        shunt_set: uint32,
        cycles: ::std::os::raw::c_int,
        excitation: f64,
        r_shunt: f64,
        r_steps: *mut uint32,
        r_actual: *mut f64,
        v_exc: *mut f64,
        v_gage: *mut f64,
        v_shunt: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv225Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        RawData: *mut uint32,
        uData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvReadCalData(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CalData: *mut *mut uint8,
        CalSize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv225SetRate(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        fCLClk: *mut f32,
        TrigMode: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv248Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv248SetAutozero(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        onoff: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254SetMode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        mode: uint32,
        flags: uint32,
        meas_pts: *mut uint32,
        usr_offset: f64,
        usr_gain: f64,
        exc_freq: f64,
        Se_level: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254SetExt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        mode: uint32,
        flags: uint32,
        params: pDQ254SetExt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254SetExcitation(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: uint32,
        exc_rate: f64,
        exc_level: f64,
        calc_rate: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254GetExcitation(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: uint32,
        exc_rate: *mut f64,
        exc_level: *mut f64,
        ADC_rate: *mut f64,
        sine_points: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254GetWFMeasurements(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        config: uint32,
        prm: pWFMEASURE_254,
        chan_a: pWFPRM_254,
        chan_b: pWFPRM_254,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254MeasureWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        changain: uint32,
        frequency_b: *mut f64,
        amplitude_b: *mut f64,
        offset_b: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        config: uint32,
        enable: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254Read(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254AiRead(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254ReadVrms(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        pos: *mut f64,
        VArms: *mut f64,
        VBrms: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254AoWrite(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254ConvertSim(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
        act_cl: *mut uint32,
        bdata: *mut uint32,
        act_size: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254WriteBin(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254ReadDIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254WriteDOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        dout: uint32,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv254SetWForm(
        handle: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        mask: uint32,
        upd_rate: f64,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255AiRead(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255AoWrite(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255SetMode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        mode: uint32,
        flags: uint32,
        meas_pts: *mut uint32,
        exc_freq: f64,
        Se_level: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255SetExt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        mode: uint32,
        flags: uint32,
        params: pDQ255SetExt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255SetExcitation(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: uint32,
        exc_rate: f64,
        exc_level: f64,
        calc_rate: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255GetExcitation(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: uint32,
        exc_rate: *mut f64,
        exc_level: *mut f64,
        ADC_rate: *mut f64,
        sine_points: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255GetWFMeasurements(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        config: uint32,
        prms: pWFMEASURE_255,
        chan_m: pWFPRM_255,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255MeasureWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        changain: uint32,
        frequency_d: *mut f64,
        amplitude_d: *mut f64,
        offset_d: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        config: uint32,
        enable: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255WriteBin(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255ConvertSim(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
        act_cl: *mut uint32,
        bdata: *mut uint32,
        act_size: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255ConvertSimVMAP(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
        delay: uint32,
        bdata: *mut uint32,
        act_size: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255ReadDIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv255WriteDOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        dout: uint32,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256ConvertSimLvdt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
        act_cl: *mut uint32,
        bdata: *mut uint32,
        act_size: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        config: uint32,
        enable: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256ReadLvdt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        sensitivity: *mut f64,
        position: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256ReadPADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256SetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQAI256DATAOUT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256SetModeLvdt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        mode: uint32,
        flags: uint32,
        meas_pts: *mut uint32,
        usr_offset: f64,
        usr_gain: f64,
        exc_freq: f64,
        Se_level: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256SetModeSynchroResolver(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        mode: uint32,
        flags: uint32,
        meas_pts: *mut uint32,
        exc_freq: f64,
        Se_level: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256WriteSynchroResolver(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256WriteLvdt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        amplitude: *mut f64,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv256GetWFMeasurements(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        config: uint32,
        prm: pWFMEASURE_254,
        chan_a: pWFPRM_254,
        chan_b: pWFPRM_254,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv261Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        clist: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv261SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        item: uint32,
        value: uint32,
        flags: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv261SetResRange(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        range: uint32,
        flags: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv261ReadStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        SLSize: ::std::os::raw::c_int,
        slist: *mut uint32,
        sdata: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv3xxWrite(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint16,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv302Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint16,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv3xxEnableWForm(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv3xxSetWForm(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        Cfg: uint32,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        samples: ::std::os::raw::c_int,
        UpdRate: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv3xxWriteWForm(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        from: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint16,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv3xxWriteWFormCL(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        from: ::std::os::raw::c_int,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint16,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv308WriteAltConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        is_mask: uint32,
        is_data: uint32,
        a_config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv318ReadADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv318Reengage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reset: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv318SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        cfg: pDQAO318CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv318SetCBLevels(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: ::std::os::raw::c_int,
        cblev: pDQAO318BRK_CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv318CBStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: ::std::os::raw::c_int,
        flags: uint32,
        reset: uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv319WriteDiag(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ch_open: uint32,
        reserved: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv333ReadADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv333CalibrateADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv333CalibrateADCresult(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv358ExCalAccess(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cmd: uint32,
        len: uint32,
        addr: uint32,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv358Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv358ReadADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv358Dbl2Bin(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        lyopt: uint32,
        ch: uint32,
        res: f64,
        crsfin: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        clk_src: uint32,
        trig_src: uint32,
        sync_mode: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetChannelPll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        pll: ::std::os::raw::c_int,
        samplerate: f64,
        act_rate: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SplitPll(
        req_freq: f64,
        pll1_freq: *mut f64,
        pll2_freq: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        takeraw: ::std::os::raw::c_int,
        data: *mut uint16,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364WriteChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        data: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        wf_prm: pDQAO364WFPRM,
        wf_shape: pDQAO364STDWF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetWFParametersCL(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        clsize: ::std::os::raw::c_int,
        CL: *mut ::std::os::raw::c_int,
        wf_prm: pDQAO364WFPRM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetWFSweep(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        wf_prm: pDQAO364WFSWEEP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetAWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_buffers: ::std::os::raw::c_int,
        buf_lst: pDQAO364BUFLST,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364WriteAWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        buffer: ::std::os::raw::c_int,
        from: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
        fdata: *mut f64,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SelectAWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        buffer: ::std::os::raw::c_int,
        wf_prm: pDQAO364WFPRM,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable_mask: ::std::os::raw::c_int,
        out_enable_mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364TrigSweep(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: uint32,
        layer_mask: *mut uint32,
        flags: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364GetSweepPos(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: uint32,
        pos_mask: uint32,
        sweep_arr: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetOffsWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        param: pDQAO364WFPRM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364WriteOffsWF(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        buffer: ::std::os::raw::c_int,
        from: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        data: *mut uint32,
        fdata: *mut f64,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetBaseClocks(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        source1: ::std::os::raw::c_int,
        f_PLL1: f64,
        true_PLL1: *mut f64,
        source2: ::std::os::raw::c_int,
        f_PLL2: f64,
        true_PLL2: *mut f64,
        source_o: ::std::os::raw::c_int,
        true_offs: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364AttEeAccess(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cmd: uint32,
        len: uint32,
        addr: uint32,
        data: *mut uint8,
        status: pDQEXEE_STS_364,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetDIO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        dio_cfg: uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv364SetTmr1Trig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        freq: f64,
        duty_cycle: f64,
        clk_src: uint32,
        clk_dst: uint32,
        actual: *mut f64,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv388ADCEnable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        mask: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv388ReadADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        clist: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv388SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        cfg: pDQRTD388CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv388Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        res_ohms: *mut f64,
        delay: uint32,
        flags: uint32,
        binvals: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv388WriteBin(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl_bin: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv388WriteDiag(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ch_open: uint32,
        ch_short: uint32,
        cs_max: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv403SetIo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        Cfg: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv403Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv403Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv403ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        event: event403_t,
        pos_edge_mask: *mut uint8,
        neg_edge_mask: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv403ConfigEvents32(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        event: event403_t,
        port0_mask: uint32,
        port1_mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        event: event401_t,
        pos_edge_mask: uint32,
        neg_edge_mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xRead(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xReadLastWrite(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        Pdata: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xSetHyst(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        level0: uint16,
        level1: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xReadTs(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        Pdata: *mut uint32,
        tstamp: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xWrite(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        data: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv404SetHyst(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ref_volts: ::std::os::raw::c_int,
        level0: *mut f32,
        level1: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv414ReadADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        adc_data: pDQ414ADC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv414ReadStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        rstatus: pDQ414STATUS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv414SetCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cfg: pDQ414CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv414Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        data: pDQ414W,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv416GetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQDIO416DATAIN,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv416SetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQDIO416DATAOUT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv416SetLimit(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        limitid: ::std::os::raw::c_int,
        limitvalue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv461SetChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_num: ::std::os::raw::c_int,
        relay_select: uint32,
        dmm_mode: uint32,
        sync: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv461ReadADC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        adc_data: pDQ461ADC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv461SetCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cfg: pDQ461CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv461ReadStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        rstatus: pDQ461STATUS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv461GetRelayCounts(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        count: pDQ461COUNT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv440Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv432GetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQDIO432DATAIN,
        fdata: pDQDIO432CVTD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv432SetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQDIO432DATAOUT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv432SetLimit(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        limitid: ::std::os::raw::c_int,
        limitvalue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv432SetPWM(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        period_us: uint32,
        count: ::std::os::raw::c_int,
        settings: pDQDIOPWM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv432Reengage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        data: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv448Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        readwhat: ::std::os::raw::c_int,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv448ReadAdc(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        bData: *mut uint16,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv448SetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQDIO448DATAOUT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv448SetDebouncer(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        clsize: uint32,
        cl: *mut uint32,
        debouncer: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv448SetLevels(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        clsize: uint32,
        cl: *mut uint32,
        l_low: f32,
        l_high: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        event: event449_t,
        port0_mask: uint32,
        port1_mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449GetModeGainLevels(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode_gain: *mut uint8,
        l_level: *mut f32,
        h_level: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        readwhat: ::std::os::raw::c_int,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449ReadAdc(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: uint32,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449ReadBlock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        bData: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449SetAveragingMode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        avg_port0: uint32,
        avg_port1: uint32,
        dcmode: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449SetDebouncer(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        clsize: uint32,
        cl: *mut uint32,
        debouncer: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449SetGDacs(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        DLSize: uint32,
        dl: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449SetGMux(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        gme4: uint16,
        muxval: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449SetLevels(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        clsize: uint32,
        cl: *mut uint32,
        l_low: f32,
        l_high: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv462GetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQDIO462DATAIN,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv462ReadAdc(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv462SetAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdata: pDQDIO462DATAOUT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv462SetLimit(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        limitid: ::std::os::raw::c_int,
        limitch: ::std::os::raw::c_int,
        limitvalue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv470Settings(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        delay: ::std::os::raw::c_int,
        dyn_ctrl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv500SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        sending: ::std::os::raw::c_int,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv500SetTxCondition(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cmd: uint32,
        value: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501BaseClock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        baseclock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501ChangeChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501ChangeChannelCfgExt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: uint32,
        ext_flags: uint32,
        extcfg: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501ChangeChannelParity(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501ClearFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ch_mask: uint32,
        action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: event501_t,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetBaud(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        baud: uint32,
        realbaud: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetTimeout(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        timeout: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetCharDelay(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        delay_src: uint32,
        delay_us: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetFrameDelay(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        delay_mode: uint32,
        length: uint32,
        delay_src: uint32,
        delay_us: f64,
        repeat_us: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetTermString(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        len: uint16,
        buf: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetTermLength(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        len: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetWatermark(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        dir: uint32,
        len: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501FlowControl(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        cts_cfg: uint32,
        rts_cfg: uint32,
        cts_state: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501GetStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        errors: *mut uint32,
        count: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SendBreak(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        duration: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501ReadRecvFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        requested: ::std::os::raw::c_int,
        data: *mut uint8,
        returned: *mut ::std::os::raw::c_int,
        remained: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501WriteTxFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        requested: ::std::os::raw::c_int,
        data: *mut uint8,
        written: *mut ::std::os::raw::c_int,
        remained_free: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501RecvMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        data: *mut uint8,
        size: *mut uint16,
        success: *mut ::std::os::raw::c_int,
        errorcode: *mut uint8,
        avail: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SendMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        data: *mut uint8,
        size: uint16,
        written: *mut uint16,
        success: *mut ::std::os::raw::c_int,
        errorcode: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetChannelCfgExt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        config: uint32,
        ext_flags: uint32,
        extcfg: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501PauseAndResume(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: uint32,
        todo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SetParity9(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        parity_mode: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv501SendMessageParity9(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        data: *mut uint16,
        size: uint16,
        written: *mut uint16,
        success: *mut ::std::os::raw::c_int,
        errorcode: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503RecvMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        id: *mut uint32,
        data: *mut uint8,
        size: *mut uint16,
        success: *mut ::std::os::raw::c_int,
        errorcode: *mut uint8,
        avail: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503ResetChannel(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503SendMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        id: uint32,
        data: *mut uint8,
        size: uint16,
        success: *mut ::std::os::raw::c_int,
        errorcode: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        sending: ::std::os::raw::c_int,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503SetMode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        cmd: uint32,
        value: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503SetChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503MakeVmapMsg(
        mode: uint32,
        identifier: uint32,
        buf: *mut uint8,
        len: ::std::os::raw::c_int,
        tx: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503ParseVmapMsg(
        mode: uint32,
        rx: *mut uint8,
        tstamp: *mut uint32,
        pktid: *mut uint32,
        buf: *mut uint8,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503SetFilter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        filter_size: ::std::os::raw::c_int,
        filter: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503SetWatermark(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        rx_or_tx: uint32,
        messages: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503GetStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        errors: *mut uint32,
        count: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: event503_t,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv503WriteTxFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        requested: ::std::os::raw::c_int,
        data: *mut uint8,
        written: *mut ::std::os::raw::c_int,
        remained_free: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable_mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        config: pSL504_SETCFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504SendFrame(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        data: *mut uint8,
        size: ::std::os::raw::c_int,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504SendMultFrames(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        n_frames: ::std::os::raw::c_int,
        frm_size: *mut ::std::os::raw::c_int,
        frm_data: *mut uint8,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504RecvMultFrames(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        n_frames: ::std::os::raw::c_int,
        frm_data_sz: ::std::os::raw::c_int,
        frm_data: *mut uint8,
        num_frames: *mut ::std::os::raw::c_int,
        frm_size: *mut ::std::os::raw::c_int,
        rsb_arr: *mut ::std::os::raw::c_int,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504RecvFrame(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        data: *mut uint8,
        size: ::std::os::raw::c_int,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        rsb: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504SendMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        data: *mut uint8,
        size: ::std::os::raw::c_int,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504RecvMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        data: *mut uint8,
        size: ::std::os::raw::c_int,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504GetStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan_mask: ::std::os::raw::c_int,
        status: pSL504_INT_STAT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv504AbortTx(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv514Config(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        config: pL514_CONFIG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv514Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv514Status(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: ::std::os::raw::c_int,
        status: pL514_STATUS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv514WriteFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        buffer: *mut uint32,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv514ReadFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        buffer: *mut uint32,
        retrieved: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv514SetPll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        baudrate: f32,
        baud_actual: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        pCfg: pI2C534CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_mask: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534GetStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        port_mask: ::std::os::raw::c_int,
        pSts: pI2C534STS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534BusControl(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        parameters: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534Flush(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_mask: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534MasterSendCommandCRC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        command: uint32,
        rx_size: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_char,
        transmitted: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        crc_stat: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534MasterReceiveDataCRC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        crc_stat: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534ReadBMFIFOCRC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        crc_out: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534MasterWriteTxFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint32,
        transmitted: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534MasterReadRxFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534SlaveWriteTxFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
        transmitted: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534SlaveReadRxFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534BuildCmdData(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        command: uint32,
        rx_size: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_char,
        tx_size: *mut ::std::os::raw::c_int,
        tx_data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534WriteCLOFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reserved: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint32,
        transmitted: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534ReadCLIFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reserved: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint32,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534CalcCustomTiming(
        hd: ::std::os::raw::c_int,
        divider: f32,
        pMct: pMCTPARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534MasterSendNChanCRC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_mask: ::std::os::raw::c_int,
        flags: uint32,
        pCmd: pI2C534_CMD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv534MasterWriteTxPhyFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        flags: uint32,
        size: ::std::os::raw::c_int,
        data: *mut uint16,
        transmitted: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSetWirelessState(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cmd: uint32,
        data: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553SetMode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: uint32,
        flags: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553Control(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: uint32,
        params: pDQ553Control,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553BITTest(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        testmode: uint32,
        iterations: uint32,
        bus_errors: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigBM(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        busmode: uint32,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        trig_list: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigBMSetFilter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        busmode: uint32,
        f_size: uint32,
        pFilter: pDQBM553Filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigBMSetTrigger(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        busmode: uint32,
        t_size: uint32,
        pTrigger: pDQBM553Trigger,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigExtTrigger(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        pTrigger: pDQ553ExtTrigger,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553RecvBMMessages(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        rq_size: ::std::os::raw::c_int,
        pMsg: pDQBM553Message,
        messages: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553RecvBMMessagesCnt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rq_size: ::std::os::raw::c_int,
        max_msg: ::std::os::raw::c_int,
        pMsg: pDQBM553Message,
        messages: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553RecvBMMessagesRaw(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rq_size: ::std::os::raw::c_int,
        pMsg: pDQBM553Message,
        rawsz: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigRT(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rt_mode: uint32,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        valid_list: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteValidTableRT(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: uint32,
        val_size: uint32,
        rtsa_list: *mut uint32,
        valid_list: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteRT(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        data: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ReadRT(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        data: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ReadStatusRT(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteTxFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        tx_size: uint32,
        tx_data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVMap553WriteRT(
        vmapid: ::std::os::raw::c_int,
        vmap_ptr: *mut uint8,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        data: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqVMap553ReadRT(
        vmapid: ::std::os::raw::c_int,
        vmap_ptr: *mut uint8,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        data: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        actions: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ReadRAM(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        memtype: uint32,
        rt: uint32,
        sa: uint32,
        block: uint32,
        size: uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteRAM(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        memtype: uint32,
        rt: uint32,
        sa: uint32,
        block: uint32,
        size: uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        event: event553_t,
        rtsa: uint32,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigBC(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        bc_mode: uint32,
        option_flags: uint32,
        MJ_clock: f64,
        MN_clock: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteMJDescriptors(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        index: uint32,
        size: ::std::os::raw::c_int,
        descriptors: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteMNDescriptors(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mn_frame: uint32,
        mn_block: uint32,
        index: uint32,
        size: ::std::os::raw::c_int,
        descriptors: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ReadMNDescriptors(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mn_frame: uint32,
        mn_block: uint32,
        index: uint32,
        size: ::std::os::raw::c_int,
        descriptors: *mut uint32,
        bc_position: *mut uint32,
        sel_position: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553BCCBCodeFromCommand(command: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteBCCB(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mn_frame: uint32,
        mn_block: uint32,
        index: uint32,
        size: ::std::os::raw::c_int,
        bccb: pBCCB_Control,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ReadBCCB(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mn_frame: uint32,
        mn_block: uint32,
        index: uint32,
        size: ::std::os::raw::c_int,
        bccb: pBCCB_Status,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ReadBCStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        list_size: ::std::os::raw::c_int,
        list: *mut uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553SelectMNBlock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        block_mask: uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553SelectMJBlock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        block_mask: uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553BCDebug(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        todo: uint32,
        major_idx: ::std::os::raw::c_int,
        minor_idx: ::std::os::raw::c_int,
        current_major_d: *mut ::std::os::raw::c_int,
        current_minor_d: *mut ::std::os::raw::c_int,
        bc_status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553SetBccbCommand(
        bccb: *mut BCCB_Control,
        ctype: tSL553CommandType,
        Bus_flags: ::std::os::raw::c_int,
        Rt: ::std::os::raw::c_int,
        Sa: ::std::os::raw::c_int,
        Rt2: ::std::os::raw::c_int,
        Sa2: ::std::os::raw::c_int,
        WordCount: ::std::os::raw::c_int,
        rx_data: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConvertBcErrSts0(
        sts: uint32,
        buf_size: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConvertBcErrSts1(
        sts: uint32,
        buf_size: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553DebugSelect(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: uint32,
        dbg: *mut DQ553DbgSel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ConfigA708(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        busmode: uint32,
        frame_size: uint32,
        if_delay_us: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553WriteTxFifoA708(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        tx_size: uint32,
        written: *mut uint32,
        remains: *mut uint32,
        tx_data: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv553ReadRxFifoA708(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rq_size: uint32,
        received: *mut uint32,
        remains: *mut uint32,
        rx_data: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv708ConfigWXPD(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        busmode: uint32,
        frame_size_bits: uint32,
        if_delay_us: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv708WriteTxFifoWXPD(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        tx_size_bytes: uint32,
        last_byte_bits: uint32,
        sync_size: uint32,
        delay_us: uint32,
        written_bytes: *mut uint32,
        remain_bytes: *mut uint32,
        tx_data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv708ReadRxFifoWXPD(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rq_max_size_bytes: uint32,
        received_bytes: *mut uint32,
        last_byte_bits: *mut uint32,
        frame_delay: *mut uint32,
        remains: *mut uint32,
        rx_data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        timeout_us: ::std::os::raw::c_int,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566ChangeChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        config: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetMode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        cmd: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetFilter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        cmd: uint32,
        from: uint32,
        size: uint32,
        labels: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetScheduler(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        cmd: uint32,
        from: uint32,
        size: uint32,
        flags: *mut uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetSchedTimebase(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        timebase: ::std::os::raw::c_int,
        rate_us: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetFifoRate(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        timebase: ::std::os::raw::c_int,
        rate_us: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SendPacket(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
        data: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SendFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        packets: ::std::os::raw::c_int,
        data: *mut uint32,
        accepted: *mut uint32,
        available: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566RecvPacket(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        where_: ::std::os::raw::c_int,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566RecvFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        maxsz: ::std::os::raw::c_int,
        data: *mut uint32,
        copied: *mut ::std::os::raw::c_int,
        remains: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566ReadWriteFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chanwr: ::std::os::raw::c_int,
        chanrd: ::std::os::raw::c_int,
        writesz: ::std::os::raw::c_int,
        wrdata: *mut uint32,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        readsz: ::std::os::raw::c_int,
        rddata: *mut uint32,
        read: *mut ::std::os::raw::c_int,
        remains: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566ReadWriteAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        tx_ch: uint32,
        rx_ch: uint32,
        tx_chan_arr: *mut uint32,
        tx_data_arr: *mut *mut uint32,
        tx_size: *mut uint32,
        tx_wrt: *mut uint32,
        tx_avl: *mut uint32,
        rx_chan_arr: *mut uint32,
        rx_data_arr: *mut *mut uint32,
        rx_size: *mut uint32,
        rx_read: *mut uint32,
        rx_rmns: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566ReadWriteSend(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        tx_ch: uint32,
        rx_ch: uint32,
        tx_chan_arr: *mut uint32,
        tx_data_arr: *mut *mut uint32,
        tx_size: *mut uint32,
        rx_chan_arr: *mut uint32,
        rx_size: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566ReadWriteRcv(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        tx_ch: uint32,
        rx_ch: uint32,
        tx_wrt: *mut uint32,
        tx_avl: *mut uint32,
        rx_chan_arr: *mut uint32,
        rx_data_arr: *mut *mut uint32,
        rx_size: *mut uint32,
        rx_read: *mut uint32,
        rx_rmns: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566GetStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        request: uint32,
        errors: *mut uint32,
        count: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        actions: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        actions: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566EnableByChip(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chipmask: ::std::os::raw::c_int,
        actions: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566SetChannelList(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        ss: uint32,
        size: int32,
        entries: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqA429toHolt3282(hst: uint32) -> uint32;
}
extern "C" {
    pub fn DqAdv566BuildPacket(
        data: uint32,
        label: uint32,
        sdi: uint32,
        ssm: uint32,
        parity: uint32,
    ) -> uint32;
}
extern "C" {
    pub fn DqHolt3282toA429(hdw: uint32) -> uint32;
}
extern "C" {
    pub fn DqAdv566ParsePacket(
        packet: uint32,
        data: *mut uint32,
        label: *mut uint8,
        sdi: *mut uint8,
        ssm: *mut uint8,
        parity: *mut uint8,
    );
}
extern "C" {
    pub fn DqAdv566BuildFilterEntry(
        label: uint32,
        new_data_only: uint32,
        trigger_scheduler: uint32,
    ) -> uint32;
}
extern "C" {
    pub fn DqAdv566BuildSchedEntry(
        master_entry: uint32,
        periodic: uint32,
        prescaler: uint32,
        delay_counter: uint16,
    ) -> uint32;
}
extern "C" {
    pub fn DqAdv566ClearFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ch_mask: uint32,
        action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566PauseAndResume(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: uint32,
        todo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566PauseAndResumeCnt(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: uint32,
        todo: ::std::os::raw::c_int,
        cleared: *mut uint32,
        remains: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566ChangeBaseClock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        clock_div: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv516ChangeBaudRate(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: ::std::os::raw::c_int,
        baud_rate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv566DOutCtrl(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        label: ::std::os::raw::c_int,
        dio_state: ::std::os::raw::c_int,
        pulse_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv516SetTxPage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        action_mask: uint32,
        write_page_mask: uint32,
        tx_page_mask: uint32,
        cur_tx_page: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv516SetMajorFrameDelay(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: uint32,
        mn_frame: uint32,
        delay: uint32,
        divider: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv516EnableTransmitters(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        tx_fifo_mask: uint32,
        scheduler_mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv516BuildFrameEntry(periodic: uint32, frame_mask: uint16) -> uint32;
}
extern "C" {
    pub fn DqAdv566ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: event566_t,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601SetWatermark(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        dir: uint32,
        len: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601SetRegister(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601GetRegister(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601SetAdditionalCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        mask: uint32,
        data: uint32,
        mode: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601SetAltClocks(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        timebase: uint32,
        prescaler: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601EnableAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601DisableAll(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601StartAllCounters(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601StopAllCounters(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601StartCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601StopCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601WriteRegisterValue(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601ReadRegisterValue(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601WriteDioOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        dout: uint32,
        last_dout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601ReadDioOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        dout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601ReadDioIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601Write(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601ClearCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601ConfigCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        sampwidth: ::std::os::raw::c_int,
        ps: ::std::os::raw::c_int,
        pc: ::std::os::raw::c_int,
        cr0: ::std::os::raw::c_int,
        cr1: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        oie: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        trs: ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
        gated: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForPWM(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        sampwidth: ::std::os::raw::c_int,
        ps: ::std::os::raw::c_int,
        cr0: ::std::os::raw::c_int,
        cr1: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        oie: ::std::os::raw::c_int,
        extclk: ::std::os::raw::c_int,
        trig: ::std::os::raw::c_int,
        trs: ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
        gated: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForPWMTrain(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        sampwidth: ::std::os::raw::c_int,
        ps: ::std::os::raw::c_int,
        n_pulses: ::std::os::raw::c_int,
        cr0: ::std::os::raw::c_int,
        cr1: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        oie: ::std::os::raw::c_int,
        extclk: ::std::os::raw::c_int,
        trig: ::std::os::raw::c_int,
        trs: ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
        gated: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForGeneralCounting(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        ps: ::std::os::raw::c_int,
        cr0: ::std::os::raw::c_int,
        cr1: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        oie: ::std::os::raw::c_int,
        extclk: ::std::os::raw::c_int,
        trig: ::std::os::raw::c_int,
        trs: ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
        gated: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForBinCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        ps: ::std::os::raw::c_int,
        cr0: ::std::os::raw::c_int,
        cr1: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        extclk: ::std::os::raw::c_int,
        trig: ::std::os::raw::c_int,
        trs: ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
        gated: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForQuadrature(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForHalfPeriod(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        trig: ::std::os::raw::c_int,
        trs: ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
        gated: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForPeriodMeasurment(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        pc: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        trig: ::std::os::raw::c_int,
        trs: ::std::os::raw::c_int,
        enc: ::std::os::raw::c_int,
        gated: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601CfgForTPPM(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        startmode: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        dbg: ::std::os::raw::c_int,
        dbc: ::std::os::raw::c_int,
        iie: ::std::os::raw::c_int,
        gie: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601ReadInputFIFO(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        requested: ::std::os::raw::c_int,
        data: *mut uint32,
        returned: *mut ::std::os::raw::c_int,
        remained: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: event601_t,
        count: uint32,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601WaitForEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        event: *mut event601_t,
        chan: *mut uint32,
        count: *mut uint32,
        crl: *mut uint32,
        crh: *mut uint32,
        sts: *mut uint32,
        tstamp: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv601Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602SetTermination(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        txterm: uint32,
        rxterm: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602CfgPWMDuringMeasurement(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        ps: ::std::os::raw::c_int,
        cr0: ::std::os::raw::c_int,
        cr1: ::std::os::raw::c_int,
        oie: ::std::os::raw::c_int,
        re: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602EnPWMDuringMeasurement(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        en: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602SetEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        evt_chan: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: pTR602_CFG,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602WriteDioOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        dout: uint32,
        last_dout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602ReadDioOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        dout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602ReadDioIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602ConfigDo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        buffer: uint32,
        enables: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602SetGPSSConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        pCfg: pCT602_GPSS_CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602SendGPSSMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        data: *mut uint8,
        size: ::std::os::raw::c_int,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602RecvGPSSMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        data: *mut uint8,
        size: ::std::os::raw::c_int,
        received: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602ConfigM272(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        config: pDQ_M272_CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602EnableM272(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602ReadFifoM272(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        buffer: *mut uint32,
        read: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        pxx_stat: *mut uint32,
        m272_stat: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602WriteFifoM272(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        buffer: *mut uint32,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        pxx_stat: *mut uint32,
        m272_stat: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602ConfigPGen(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        config: pDQ_CT602_PGEN_CONF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv602WriteFifoPGen(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        buffer: *mut uint32,
        written: *mut ::std::os::raw::c_int,
        available: *mut ::std::os::raw::c_int,
        status: *mut uint32,
        inputs: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604SetWatermark(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        dir: uint32,
        len: uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604SetChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        pCfg: pDQCHNLSET_604_,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604GetRegister(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604ReadRegisterValue(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604SetRegister(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604WriteRegisterValue(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604WriteDioOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        dout: uint32,
        last_dout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604ReadDioOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        dout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604ReadDioIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        din: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604ClearCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604StartCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604StopCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv604ConfigCounter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        counter: ::std::os::raw::c_int,
        en: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        cr0: ::std::os::raw::c_int,
        cr1: ::std::os::raw::c_int,
        tbr: ::std::os::raw::c_int,
        idba: ::std::os::raw::c_int,
        idbb: ::std::os::raw::c_int,
        idbz: ::std::os::raw::c_int,
        idbt: ::std::os::raw::c_int,
        inv_a: ::std::os::raw::c_int,
        inv_b: ::std::os::raw::c_int,
        inv_z: ::std::os::raw::c_int,
        inv_t: ::std::os::raw::c_int,
        inv_do0: ::std::os::raw::c_int,
        inv_do1: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        rl_mode: ::std::os::raw::c_int,
        evt_b: ::std::os::raw::c_int,
        evt_src: ::std::os::raw::c_int,
        tb_src: ::std::os::raw::c_int,
        clkout_en: ::std::os::raw::c_int,
        clkout_mode: ::std::os::raw::c_int,
        trg_src: ::std::os::raw::c_int,
        trg_clr: ::std::os::raw::c_int,
        trgout_en: ::std::os::raw::c_int,
        trgout_mode: ::std::os::raw::c_int,
        gtstart_en: ::std::os::raw::c_int,
        gtstop_en: ::std::os::raw::c_int,
        out_width: ::std::os::raw::c_int,
        qe_mode: ::std::os::raw::c_int,
        qe_delay: ::std::os::raw::c_int,
        qe_err: ::std::os::raw::c_int,
        qe_swap: ::std::os::raw::c_int,
        ts_mode: ::std::os::raw::c_int,
        end_mode: ::std::os::raw::c_int,
        inc: ::std::os::raw::c_int,
        cfg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608SetCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: uint32,
        front_cfg: uint32,
        mode: uint32,
        extcfg: pDQ_VR608_CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608GetCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: uint32,
        front_cfg: *mut uint32,
        mode: *mut uint32,
        extcfg: pDQ_VR608_CFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608SetADCClock(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: uint32,
        ain_rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608ConvertRawData(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        mode: uint32,
        crr: uint32,
        cr: uint32,
        crh: uint32,
        crl: uint32,
        data: pDQ_VR608_READ_DATA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        CL: *mut uint32,
        bin_data: *mut uint32,
        CL_ptr: *mut *mut uint32,
        data: pDQ_VR608_READ_DATA,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608ReadFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        sizemax: uint32,
        size: *mut uint32,
        data: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608ReadADCStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        pSts: pDQ_VR608_ADC_STS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608ReadADCFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        sizemax: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_int,
        avail: *mut ::std::os::raw::c_int,
        data_a: *mut f32,
        data_b: *mut f32,
        binary: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608SetWatermark(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        len: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv608Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable_mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ConfigTimekeeper(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        flags: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetTimecodeInput(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        flags: uint32,
        pPrmDef: pCT650_IRIG_PRM_DEF,
        pDataDef: pCT650_IRIG_CODE_DEF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetTimecodeInputEx(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        flags: uint32,
        pPrmDef: pCT650_IRIG_PRM_DEF,
        pDataDef: pCT650_IRIG_CODE_DEF,
        pSigDef: pCT650_IRIG_SIG_DEF,
        sigDefMask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetTimecodeOutput(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        output: uint32,
        pPrmDef: pCT650_IRIG_PRM_DEF,
        pDataDef: pCT650_IRIG_CODE_DEF,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650AssignTTLOutputs(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        output: uint32,
        ttl0: uint32,
        ttl1: uint32,
        ttl2: uint32,
        ttl3: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetAMOutputLevels(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: uint32,
        hi_gain: f64,
        low_gain: f64,
        offset: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetPropDelay(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: uint32,
        delay: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetLocalOffset(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        hour_offset: ::std::os::raw::c_int,
        min_offset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650GetInputTimecode(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        size: uint32,
        block: *mut uint32,
        decoded_code: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650GetTimeRegisters(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        time_regs: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ReadReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reg: uint32,
        value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650WriteReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ProgramPLL(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        duty_cycle: f64,
        frequency: f64,
        f_actual: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650GetTimeSBS(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        seconds: *mut uint32,
        micro: *mut uint32,
        dayofyear: *mut uint32,
        year: *mut uint32,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmd650GetTimeSBS(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        seconds: *mut uint32,
        micro: *mut uint32,
        dayofyear: *mut uint32,
        year: *mut uint32,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650GetTimeANSI(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        time: *mut tm,
        micro: *mut uint32,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650GetTimeBCD(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        time: pCT650_BCD_TIME,
        micro: *mut uint32,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmd650GetTimeBCD(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        time: pCT650_BCD_TIME,
        micro: *mut uint32,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ResetTimestampsGetANSI(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
        time: *mut tm,
        micro: *mut uint32,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ResetTimestampsGetBCD(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
        time: pCT650_BCD_TIME,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetTimeSBS(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: uint32,
        seconds: uint32,
        days: uint32,
        year: uint32,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetTimeANSI(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: uint32,
        time: *mut tm,
        tkstatus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ReadGPS(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        rq_size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_char,
        ret_size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650WriteGPS(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        rq_size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_char,
        copied: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650GetGPSStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        gps_status: *mut uint32,
        status: *mut uint32,
        time: *mut uint32,
        date: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ReadEventFifo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        rq_size: ::std::os::raw::c_int,
        data: *mut uint32,
        ret_size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: event650_t,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        evt_chan: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: pEV650_CFG,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650GetEventStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        evt_chan: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: pEV650_STS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650EnableGPSTracking(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650SetGPSTime(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv650ClockCalibration(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mode: uint32,
        indata: uint32,
        outdata: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv651GetRegister(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reg: uint32,
        value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv651SetRegister(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        actions: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664GetDeviceInfo(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pDeviceInfo: pAR664_DEV_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664IoctlD(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        command: uint32,
        flags: uint32,
        in_sz: ::std::os::raw::c_int,
        data_in: *mut uint32,
        out_sz: ::std::os::raw::c_int,
        data_out: *mut uint32,
        returned: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664Ioctl(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        command: uint32,
        flags: uint32,
        in_sz: ::std::os::raw::c_int,
        data_in: *mut uint32,
        out_sz: ::std::os::raw::c_int,
        data_out: *mut uint32,
        returned: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
        pCfg: pAR664_ARCFG,
        xml_filename: *mut ::std::os::raw::c_char,
        size_tbl: *mut ::std::os::raw::c_int,
        handle_tbl: *mut *mut AR664_CFG_HANDLES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664ClearConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664AddVL(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        pVL: pAR664_VL_CFG,
        vl_handle: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664AddPort(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        vl_handle: ::std::os::raw::c_int,
        pPort: pAR664_PORT_CFG,
        port_handle: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664ChangeVLPrm(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        vl_handle: ::std::os::raw::c_int,
        pVL: pAR664_VL_CFG,
        pmask: uint32,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664ChangePortPrm(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_handle: ::std::os::raw::c_int,
        pPort: pAR664_PORT_CFG,
        pmask: uint32,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664GetHandle(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        bus: ::std::os::raw::c_int,
        vlid: ::std::os::raw::c_int,
        port_id: ::std::os::raw::c_int,
        handle: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664EnableVLPort(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        arr_sz: ::std::os::raw::c_int,
        vl_port_handles: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664EnableES(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        arr_sz: ::std::os::raw::c_int,
        es_ids: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664EnablePartition(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        arr_sz: ::std::os::raw::c_int,
        part_ids: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664SendMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_handle: ::std::os::raw::c_int,
        flags: uint32,
        msg_sz: ::std::os::raw::c_int,
        message: *mut uint8,
        written: *mut ::std::os::raw::c_int,
        stored: *mut uint32,
        available: *mut uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664SendMessageHdr(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_handle: ::std::os::raw::c_int,
        flags: uint32,
        msg_sz: ::std::os::raw::c_int,
        message: *mut uint8,
        pHDR: pAR664_HEADERS,
        written: *mut ::std::os::raw::c_int,
        stored: *mut uint32,
        available: *mut uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664RecvMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_handle: ::std::os::raw::c_int,
        flags: uint32,
        msg_sz: ::std::os::raw::c_int,
        message: *mut uint8,
        read: *mut ::std::os::raw::c_int,
        available: *mut uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664RecvMessageHdr(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        port_handle: ::std::os::raw::c_int,
        flags: uint32,
        msg_sz: ::std::os::raw::c_int,
        message: *mut uint8,
        read: *mut ::std::os::raw::c_int,
        pHDR: pAR664_HEADERS,
        available: *mut uint32,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664CtrlErrors(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        vl_port_handle: ::std::os::raw::c_int,
        pError: pAR664_ERR_INJ,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664GetBusStat(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        pBusStat: pAR664_BUS_STAT,
        clear: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664VLPortStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        arr_sz: ::std::os::raw::c_int,
        vl_port_handles: *mut ::std::os::raw::c_int,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664GetPortMessageCount(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pArrSz: *mut ::std::os::raw::c_int,
        arr: pAR664_PORT_MSGCNT,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664GetPortStatistic(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        selectors: uint32,
        port_handles: *mut ::std::os::raw::c_int,
        port_handles_sz: ::std::os::raw::c_int,
        arr: *mut uint32,
        pArrSz: *mut ::std::os::raw::c_int,
        available: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664PortMsgStatus(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        arr_sz: ::std::os::raw::c_int,
        port_handles: *mut ::std::os::raw::c_int,
        stat_sz: *mut ::std::os::raw::c_int,
        st_arr: *mut AR664_PORT_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664BusControl(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pCtrl: pAR664_CTRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664SetSync(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        irig_devn: ::std::os::raw::c_int,
        clk_src: uint32,
        sync_in: uint32,
        sync_out: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664ValidateVlPortCfg(
        vl: *mut AR664_VL_CFG,
        port: *mut AR664_PORT_CFG,
        param_num: *mut ::std::os::raw::c_int,
        strict: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664ConfigEvents(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: event664_t,
        eparam: uint32,
        list_sz: ::std::os::raw::c_int,
        h_list: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv664SendScheduleTable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv91xRead(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        status: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv91xSetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        src: uint32,
        vsel: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv921Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        status: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv921SetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        sync: uint32,
        power: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv925Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        status: *mut uint32,
        rpm: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv926Read(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        status: *mut uint32,
        reserved: *mut uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvAssignIsoSync(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        sync_line: uint32,
        signal: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvAssignIsoDio(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        dio_line: uint32,
        direction: uint32,
        signal: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvLayerAccessDio(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        config: uint16,
        d_out: uint16,
        d_in: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvAssignSyncx(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        sync_line: uint32,
        signal: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvCalcCRC32(buf: *mut uint8, buf_size: uint32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DqAdvDnrpRead(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvDnrpSetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        action: uint32,
        config: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvDnxpRead(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        CLSize: ::std::os::raw::c_int,
        cl: *mut uint32,
        bData: *mut uint32,
        fData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvDnxpSetConfig(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        action: uint32,
        config: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvGroupDelay(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        action: uint32,
        delay: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSkipScans(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        action: uint32,
        count: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvHwTestsCpuLayerTestStart(hd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvHwTestsCpuLayerTestAbort(hd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvHwTestsCpuLayerTestGetStatus(
        hd: ::std::os::raw::c_int,
        busy: *mut uint32,
        str_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvHwTestsCpuLayerTestGetResults(
        hd: ::std::os::raw::c_int,
        error: *mut uint32,
        str_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvHwTestsIOLayerTest(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        testtype: uint32,
        error: *mut uint32,
        str_: *mut ::std::os::raw::c_char,
        data_bus_staus: *mut uint32,
        addr_bus_staus: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteClockIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteClockOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRoutePll(
        hd: ::std::os::raw::c_int,
        frequency: f64,
        f_actual: *mut f64,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteSyncClockIn(
        hd: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteSyncClockOut(
        hd: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteSyncIn(
        hd: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteSyncOut(
        hd: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteSyncTrigIn(
        hd: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteSyncTrigOut(
        hd: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteTrigIn(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteTrigOut(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRouteSyncTest(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRWExtDevice(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        id: uint32,
        cmd: uint32,
        d2dev: uint32,
        count: uint32,
        d_fr_dev: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSetClockSource(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        clock: uint32,
        source: uint32,
        edge: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSetNetworkBuffers(
        hd: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        nbufs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSetScansPerPkt(
        hd: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        scans: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSetTriggerSource(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        trigger: uint32,
        source: uint32,
        edge: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvWriteSignalRouting(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        psignals: pSGNLS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDefineSyncScheme(
        handle: ::std::os::raw::c_int,
        scheme: pDQ_SYNC_SCHEME,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDisableSyncScheme(
        handle: ::std::os::raw::c_int,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncGetSyncStatus(
        handle: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        status: pDQ_SYNC_STATUS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDefineLayerClock(
        Iom: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        clocks: pDQ_SYNC_DEF_CLOCKS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDefineLayerTrigger(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        trig_line: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDefineLayerTimestamp(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncResyncTimestamp(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        to_value: ::std::os::raw::c_int,
        bitmask: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        time: *mut tm,
        nanosec: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDefineStartStop(
        Iom: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        bitmask: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        startsec: uint32,
        start_us: uint32,
        duration: uint32,
        duration_us: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDefineNTPServer(
        Iom: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        pNTP: pDQ_SYNC_DEFNTP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncDefinePTPServer(
        Iom: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        pPTP: pDQ_SYNC_DEFPTP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncGetUTCTimeFromPTP(
        Iom: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        ptpUTC: pDQ_SYNC_UTC_TIME,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncGetPTPStatus(
        Iom: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        pPTPstat: pDQ_SYNC_PTP_STAT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncSetupISR(
        Iom: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        sycnl: uint32,
        div: uint32,
        flags: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqSyncConfigEvents(
        hd: ::std::os::raw::c_int,
        xtra_prm: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        event: evsync_t,
        param: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSetParam(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chnl: ::std::os::raw::c_int,
        datain_size: uint32,
        datain: *mut uint32,
        dataout: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvSetSwitchingTimeout(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        timeout: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv3xxTestRead(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cmd: uint32,
        chan: uint32,
        bdata: *mut uint32,
        fdata: *mut f64,
    ) -> ::std::os::raw::c_int;
}
pub const DQ_EMBEDDED_EVENT_DqEmbEventTimeout: DQ_EMBEDDED_EVENT = 1;
pub const DQ_EMBEDDED_EVENT_DqEmbEventSyncIn: DQ_EMBEDDED_EVENT = 2;
pub const DQ_EMBEDDED_EVENT_DqEmbEventTimer: DQ_EMBEDDED_EVENT = 4;
pub const DQ_EMBEDDED_EVENT_DqEmbEventTimerOverrun: DQ_EMBEDDED_EVENT = 8;
pub const DQ_EMBEDDED_EVENT_DqEmbEventTriggerButton: DQ_EMBEDDED_EVENT = 16;
pub const DQ_EMBEDDED_EVENT_DqEmbEvent1PPSSync: DQ_EMBEDDED_EVENT = 32;
pub type DQ_EMBEDDED_EVENT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DqEmbeddedEventConfig {
    pub dev: ::std::os::raw::c_int,
    pub event: DQ_EMBEDDED_EVENT,
    pub param: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__DqEmbeddedEventConfig() {
    assert_eq!(
        ::std::mem::size_of::<_DqEmbeddedEventConfig>(),
        12usize,
        concat!("Size of: ", stringify!(_DqEmbeddedEventConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<_DqEmbeddedEventConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(_DqEmbeddedEventConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqEmbeddedEventConfig>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqEmbeddedEventConfig),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqEmbeddedEventConfig>())).event as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqEmbeddedEventConfig),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqEmbeddedEventConfig>())).param as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqEmbeddedEventConfig),
            "::",
            stringify!(param)
        )
    );
}
pub type DQ_EMBEDDED_EVENT_CONFIG = _DqEmbeddedEventConfig;
extern "C" {
    pub fn DqEmbConfigureEvent(
        hd: ::std::os::raw::c_int,
        event: DQ_EMBEDDED_EVENT,
        param: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqEmbWaitForEvent(
        hd: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        event: *mut DQ_EMBEDDED_EVENT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqEmbCancelEvent(
        hd: ::std::os::raw::c_int,
        event: DQ_EMBEDDED_EVENT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqEmbIoctl(
        hd: ::std::os::raw::c_int,
        cmd: ::std::os::raw::c_int,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqEmb501Send(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        bufSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqEmb501Receive(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        bufSize: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        termChar: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqEmb503Send(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        frameId: uint32,
        frameData: *mut ::std::os::raw::c_uchar,
        frameDataSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqEmb503Receive(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        frameId: *mut uint32,
        frameData: *mut ::std::os::raw::c_uchar,
        frameDataSize: *mut ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xSetEvent(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        pos_edge_mask: uint32,
        neg_edge_mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv40xWaitForEvent(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        pos_edge_status: *mut uint32,
        neg_edge_status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv403SetEvent(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        bank0_pos_edge_mask: uint32,
        bank0_neg_edge_mask: uint32,
        bank1_pos_edge_status: uint32,
        bank1_neg_edge_status: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv403WaitForEvent(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        bank0_pos_edge_status: *mut uint32,
        bank0_neg_edge_status: *mut uint32,
        bank1_pos_edge_status: *mut uint32,
        bank1_neg_edge_status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449SetEvent(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
        bank0_edge_mask: uint32,
        bank1_edge_mask: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv449WaitForEvent(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        bank0_pos_edge_status: *mut uint32,
        bank0_neg_edge_status: *mut uint32,
        bank1_pos_edge_status: *mut uint32,
        bank1_neg_edge_status: *mut uint32,
        bank0_change_status: *mut uint32,
        bank1_change_status: *mut uint32,
        timestamp: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DQ_RTMAP_PARAM {
    pub max_payload_sz: ::std::os::raw::c_int,
    pub mtu: ::std::os::raw::c_int,
    pub refreshRate: f64,
}
#[test]
fn bindgen_test_layout_DQ_RTMAP_PARAM() {
    assert_eq!(
        ::std::mem::size_of::<DQ_RTMAP_PARAM>(),
        16usize,
        concat!("Size of: ", stringify!(DQ_RTMAP_PARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<DQ_RTMAP_PARAM>(),
        8usize,
        concat!("Alignment of ", stringify!(DQ_RTMAP_PARAM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_RTMAP_PARAM>())).max_payload_sz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_RTMAP_PARAM),
            "::",
            stringify!(max_payload_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_RTMAP_PARAM>())).mtu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_RTMAP_PARAM),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DQ_RTMAP_PARAM>())).refreshRate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DQ_RTMAP_PARAM),
            "::",
            stringify!(refreshRate)
        )
    );
}
pub type pDQ_RTMAP_PARAM = *mut DQ_RTMAP_PARAM;
extern "C" {
    pub fn DqRtDmapInit(
        handle: ::std::os::raw::c_int,
        dmapid: *mut ::std::os::raw::c_int,
        refreshRate: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapInitEx(
        handle: ::std::os::raw::c_int,
        dmapid: *mut ::std::os::raw::c_int,
        param: pDQ_RTMAP_PARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtSetDefaultFlags(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        flags: uint16,
        set_clear: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapSetMode(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapAddChannel(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        cl: *mut uint32,
        clSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapCheckSpace(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        cl: *mut ::std::os::raw::c_int,
        clSize: ::std::os::raw::c_int,
        in_sz_left: *mut ::std::os::raw::c_int,
        out_sz_left: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapGetInputMap(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        mappedData: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapGetInputMapSize(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        mapSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapGetOutputMap(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        mappedData: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapGetOutputMapSize(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        mapSize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapReadScaledData(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        scaledBuffer: *mut f64,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapReadScaledDataF(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        scaledBuffer: *mut f32,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvConvertRawToScaled(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        channel: uint32,
        rawVal: uint32,
        ScaledVal: *mut f64,
        Step: f64,
        Offset: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvGetScalingCoefficients(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        channel: uint32,
        pStep: *mut f64,
        pOffset: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvRawToScaleValue(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        channel: uint32,
        rawVal: uint32,
        pScaledVal: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdvScaleToRawValue(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        channel: uint32,
        scaledVal: f64,
        pRawVal: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapReadRawData16(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        rawBuffer: *mut uint16,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapReadRawData32(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        rawBuffer: *mut uint32,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapReadRawData(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        rawBuffer: *mut ::std::os::raw::c_void,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapWriteScaledData(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        scaledBuffer: *mut f64,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapWriteScaledDataF(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        scaledBuffer: *mut f32,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapWriteRawData16(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        rawBuffer: *mut uint16,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapWriteRawData32(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        rawBuffer: *mut uint32,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapWriteRawData(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        rawBuffer: *mut ::std::os::raw::c_void,
        bufferSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapProgram(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapStart(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapRefresh(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapRefreshInputs(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapRefreshOutputs(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapRefreshExt(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        counter: *mut uint16,
        tstamp: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapRefreshOutputsExt(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        counter: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapRefreshInputsExt(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        counter: *mut uint16,
        tstamp: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapStop(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtDmapClose(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapInit(
        handle: ::std::os::raw::c_int,
        vmapid: *mut ::std::os::raw::c_int,
        refreshRate: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapInitEx(
        handle: ::std::os::raw::c_int,
        dmapid: *mut ::std::os::raw::c_int,
        param: pDQ_RTMAP_PARAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapSetMode(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapAddChannel(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        cl: *mut ::std::os::raw::c_int,
        flags: *mut ::std::os::raw::c_int,
        clSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapSetScanRate(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        scan_rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapSetConfig(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        config: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapAddChannelMaxSize(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        cl: uint32,
        flags: uint32,
        max_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapCheckSpace(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        cl: *mut ::std::os::raw::c_int,
        flags: *mut ::std::os::raw::c_int,
        clSize: ::std::os::raw::c_int,
        in_sz_left: *mut ::std::os::raw::c_int,
        out_sz_left: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapGetInputPtr(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_list: ::std::os::raw::c_int,
        hdrptr: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapGetOutputPtr(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_list: ::std::os::raw::c_int,
        hdrptr: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapGetInputMap(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_list: ::std::os::raw::c_int,
        dataptr: *mut *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapGetOutputMap(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_list: ::std::os::raw::c_int,
        dataptr: *mut *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapProgram(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapStart(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapStartTr(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        tr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqCmdTrig(hd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRefresh(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRefreshInputs(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRefreshExt(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        dqCounter: *mut uint16,
        dqTStamp: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapReRefreshExt(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        rq_counter: uint16,
        dqCounter: *mut uint16,
        dqTStamp: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRefreshInputsExt(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        dqCounter: *mut uint16,
        dqTStamp: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRefreshOutputsExt(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        dqCounter: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapReRefreshOutputsExt(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        rq_counter: uint16,
        counter: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRefreshOutputs(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtXmapRefreshInputs(
        handle: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        mapid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtXmapRefreshInputsExt(
        handle: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        mapid: *mut ::std::os::raw::c_int,
        dqCounter: *mut uint16,
        dqTStamp: *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAVmapRefreshInputsExt(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        packet_type: *mut uint32,
        counter: *mut uint16,
        tstamp: *mut uint16,
        mapid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAVmapRefreshInputsExtRe(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        flags: uint32,
        packet_type: *mut uint32,
        counter: *mut uint16,
        tstamp: *mut uint16,
        mapid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtXmapSetModeFlags(
        handle: ::std::os::raw::c_int,
        mapid: ::std::os::raw::c_int,
        modeflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapSetChannelList(
        hd: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subsystem: ::std::os::raw::c_int,
        cl: *mut ::std::os::raw::c_int,
        clSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapStop(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapClose(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapAddOutputData(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_index: ::std::os::raw::c_int,
        data_size: uint32,
        act_size: *mut ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapAddOutputChannelData(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_index: ::std::os::raw::c_int,
        channel: uint32,
        data_size: uint32,
        act_size: *mut ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRqInputDataSz(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_index: ::std::os::raw::c_int,
        rq_size: uint32,
        act_size: *mut ::std::os::raw::c_int,
        indataptr: *mut *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRqInputChannelData(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_index: ::std::os::raw::c_int,
        channel: uint32,
        rq_size: uint32,
        act_size: *mut ::std::os::raw::c_int,
        indataptr: *mut *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapGetInputData(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_index: ::std::os::raw::c_int,
        max_size: uint32,
        data_size: *mut ::std::os::raw::c_int,
        avl_size: *mut ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapGetOutputDataSz(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
        trl_index: ::std::os::raw::c_int,
        data_size: *mut ::std::os::raw::c_int,
        avl_size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapInitOutputPacket(
        handle: ::std::os::raw::c_int,
        vmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapWriteOutput(
        handle: ::std::os::raw::c_int,
        vmap_id: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        rq_size: ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapPlusWriteOutput(
        handle: ::std::os::raw::c_int,
        vmap_id: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        rq_channel: uint32,
        rq_size: ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapRequestInput(
        handle: ::std::os::raw::c_int,
        vmap_id: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        rq_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapPlusRequestInput(
        handle: ::std::os::raw::c_int,
        vmap_id: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        rq_channel: uint32,
        rq_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapReadInput(
        handle: ::std::os::raw::c_int,
        vmap_id: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        rq_size: ::std::os::raw::c_int,
        ret_size: *mut ::std::os::raw::c_int,
        data: *mut uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapInputFifoAvailable(
        handle: ::std::os::raw::c_int,
        vmap_id: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtVmapOutputFifoAvailable(
        handle: ::std::os::raw::c_int,
        vmap_id: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        channel: uint32,
        available: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DqHistoryTrigger {
    pub dev: ::std::os::raw::c_int,
    pub triggerChannel: ::std::os::raw::c_int,
    pub preTriggers: ::std::os::raw::c_int,
    pub aboveBelow: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub reserved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__DqHistoryTrigger() {
    assert_eq!(
        ::std::mem::size_of::<_DqHistoryTrigger>(),
        28usize,
        concat!("Size of: ", stringify!(_DqHistoryTrigger))
    );
    assert_eq!(
        ::std::mem::align_of::<_DqHistoryTrigger>(),
        4usize,
        concat!("Alignment of ", stringify!(_DqHistoryTrigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryTrigger>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryTrigger),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_DqHistoryTrigger>())).triggerChannel as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryTrigger),
            "::",
            stringify!(triggerChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryTrigger>())).preTriggers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryTrigger),
            "::",
            stringify!(preTriggers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryTrigger>())).aboveBelow as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryTrigger),
            "::",
            stringify!(aboveBelow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryTrigger>())).level as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryTrigger),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryTrigger>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryTrigger),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryTrigger>())).reserved as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryTrigger),
            "::",
            stringify!(reserved)
        )
    );
}
pub type DQ_HISTORY_TRIGGER = _DqHistoryTrigger;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DqHistoryBuffer {
    pub bufferIndex: ::std::os::raw::c_int,
    pub bufferSize: ::std::os::raw::c_int,
    pub triggerIndex: ::std::os::raw::c_int,
    pub scanSize: ::std::os::raw::c_int,
    pub devScanSize: [::std::os::raw::c_int; 32usize],
    pub devSampleSize: [::std::os::raw::c_int; 32usize],
    pub buffer: [::std::os::raw::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout__DqHistoryBuffer() {
    assert_eq!(
        ::std::mem::size_of::<_DqHistoryBuffer>(),
        276usize,
        concat!("Size of: ", stringify!(_DqHistoryBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_DqHistoryBuffer>(),
        4usize,
        concat!("Alignment of ", stringify!(_DqHistoryBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryBuffer>())).bufferIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryBuffer),
            "::",
            stringify!(bufferIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryBuffer>())).bufferSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryBuffer),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryBuffer>())).triggerIndex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryBuffer),
            "::",
            stringify!(triggerIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryBuffer>())).scanSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryBuffer),
            "::",
            stringify!(scanSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryBuffer>())).devScanSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryBuffer),
            "::",
            stringify!(devScanSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryBuffer>())).devSampleSize as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryBuffer),
            "::",
            stringify!(devSampleSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DqHistoryBuffer>())).buffer as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_DqHistoryBuffer),
            "::",
            stringify!(buffer)
        )
    );
}
pub type DQ_HISTORY_BUFFER = _DqHistoryBuffer;
extern "C" {
    pub fn DqRtHistoryInit(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        numTriggers: ::std::os::raw::c_int,
        triggerList: *mut DQ_HISTORY_TRIGGER,
        bufferSize: ::std::os::raw::c_int,
        numHistoryBuffers: ::std::os::raw::c_int,
        recycle: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtHistoryGetStatus(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        readyBuffers: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtHistoryGetBuffer(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
        pBuffer: *mut *mut DQ_HISTORY_BUFFER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtHistoryClose(
        handle: ::std::os::raw::c_int,
        dmapid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtSetDqrtOptions(
        debug_options: uint32,
        size: uint32,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsyncOpenIOM(
        handle: ::std::os::raw::c_int,
        new_handle: *mut ::std::os::raw::c_int,
        UDP_Port: uint16,
        mTimeOut: uint32,
        depth: ::std::os::raw::c_int,
        pDqCfg: *mut pDQRDCFG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsyncCloseIOM(hd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsyncEnableEvents(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        enable: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsyncReceive(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        buffer: *mut pDQPKT,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsyncSend(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        pkt_size: ::std::os::raw::c_int,
        buffer: pDQPKT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsyncSendResponse(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        pkt_size: ::std::os::raw::c_int,
        buffer: pDQEVENT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAXMapSlotAllocate(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        dmapID: ::std::os::raw::c_int,
        slot_uS: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAXMapEnable(
        hd: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAXMapSetTiming(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        dmapID: ::std::os::raw::c_int,
        dmap_period_Hz: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAXMapTestTiming(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        dmapID: ::std::os::raw::c_int,
        proc_time_uS: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAVMapSetWatermark(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        vmapid: ::std::os::raw::c_int,
        watermrk: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAXMapSetExtClk(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        vmapid: ::std::os::raw::c_int,
        clk_src: uint32,
        clk_div: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAXMapSetExtClk(
        hd: ::std::os::raw::c_int,
        flags: uint32,
        vmapid: ::std::os::raw::c_int,
        clk_src: uint32,
        clk_div: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAXMapInit(
        hd: ::std::os::raw::c_int,
        xmapid: ::std::os::raw::c_int,
        Config: *mut uint32,
        trigType: uint32,
        amaptype: uint32,
        rate: f64,
        emitCfg: uint32,
        TrigRoute: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAXMapStart(
        hd: ::std::os::raw::c_int,
        xmapid: ::std::os::raw::c_int,
        amaptype: uint32,
        rate: f64,
        emitCfg: uint32,
        flags: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsync553ReadRT(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        data: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqRtAsync553WriteRT(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: ::std::os::raw::c_int,
        request_ack: ::std::os::raw::c_int,
        rt_size: uint32,
        rtsa_list: *mut uint32,
        data: *mut *mut uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801SetChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        param_value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801LoadChannelWm(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        subsystem: uint32,
        watermark: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801LoadChannelReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801LoadControlReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801GetParameter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        param_type: uint32,
        param_index: uint32,
        param_value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: uint32,
        enable: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801RecvMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        data: *mut uint32,
        requested: ::std::os::raw::c_int,
        returned: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv801SendMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        data: *mut uint32,
        requested: ::std::os::raw::c_int,
        written: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802SetChannelCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        param_value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802LoadChannelWm(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        subsystem: uint32,
        watermark: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802LoadChannelReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802LoadControlReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802GetParameter(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel: uint32,
        param_type: uint32,
        param_index: uint32,
        param_value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802Enable(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        channel_mask: uint32,
        enable: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802RecvMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        data: *mut uint32,
        requested: ::std::os::raw::c_int,
        returned: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv802SendMessage(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chan: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        data: *mut uint32,
        requested: ::std::os::raw::c_int,
        written: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv820ReadReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reg: uint32,
        value: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv820WriteReg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        reg: uint32,
        value: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv820SetCfg(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        cfg_mask: uint32,
        pCfg: pPL820CFG,
        status: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv820ReadSPI(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        spi: uint32,
        size32: uint32,
        data: *mut uint32,
        read: *mut uint32,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqAdv820WriteSPI(
        hd: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        spi: uint32,
        size32: uint32,
        data: *mut uint32,
        written: *mut uint32,
        avail: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvFillConvData(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        ss: ::std::os::raw::c_int,
        ch_lst: *mut uint32,
        ch_lst_sz: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvCopyDataGetMemsize(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        memsize: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvCopyDataConv(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        mem: *mut ::std::os::raw::c_char,
        memsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvGetDataConv(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        pdc: *mut pDATACONV,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2ScalePdc(
        pdc: pDATACONV,
        chlst: *const uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2ScaleDev(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2RawPdc(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2RawDev(
        handle: ::std::os::raw::c_int,
        devn: ::std::os::raw::c_int,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvFormatPdcFromBinary(pdc: pDATACONV) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvPrepopConvDataInput(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        ch_lst: *mut uint32,
        ch_lst_sz: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvPrepopConvDataOutput(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        ch_lst: *mut uint32,
        ch_lst_sz: uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRefreshConvData(
        handle: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale201(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale204(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale205(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale208(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale211(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale212(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale217(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale222(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale224(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale225(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale228(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale248(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale254(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale255(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale318(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale333(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale416(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale432(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale448(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale449(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale463(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvRaw2Scale020(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        raw: *mut ::std::os::raw::c_char,
        scaled: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2Raw308(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2Raw318(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2Raw332(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2Raw358(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2Raw364(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2Raw254(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvScale2Raw255(
        pdc: pDATACONV,
        chlst: *mut uint32,
        chlstsz: uint32,
        bufsz: uint32,
        scaled: *mut f64,
        raw: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DqConvCorrectPdcEndianInPlace(pdc: pDATACONV) -> pDATACONV;
}
extern "C" {
    pub fn DqConvNtoh204(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh208(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh222(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh225(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh248(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh255(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh318(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh333(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh416(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh432(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh448(pdc: pDATACONV);
}
extern "C" {
    pub fn DqConvNtoh2000(pdc: pDATACONV);
}
